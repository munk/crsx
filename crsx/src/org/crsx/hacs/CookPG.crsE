CookPG[(
  $StringEntrySort ::= (STRING[$String]; ) ;
  Boolean ::= (B_FALSE; B_TRUE; ) ;
  CONSUMPTION_SORT ::= (C_BUFFER[$String, $Numeric]; C_LEFTRECURSIVE[$String, $Numeric]; ) ;
  DERIVED_SORT ::= (DERIVED[$String, $Numeric, RawRepeat]; ) ;
  
    {$String : $StringEntrySort}Define
    ::=
    (
     D_SYNTHESIZES[$String];
     D_NONE;
     D_RULE[RawRule, $String, Boolean];
     (D_ABSTRACTION a : RawSortParam . Define);
     D_FORM[RawForm, FormKind];
    )
   ;
   FormKind ::= (FK_SCHEME[NameSet]; FK_DATA[$List[$String]]; FK_SYMBOL[$Boolean]; FK_SUGAR[RawTerm]; FK_ALIAS; ) ;
  (∀ a_97 .  Lifted[a_97] ::= (LIFTED[a_97]; BOTTOM; ) );
   NameSet ::= (NAME_SET[$String]; ) ;
   {$String : SortEntry}NormalizedSortMap ::= (NSM[NameSet]; ) ;
   Ok ::= (OK; ) ;
   PFK_SORT ::= (PFK[RawParsedForm, FormKind]; ) ;
   {$String : $StringEntrySort}RawAttribute ::= (RAW-Attribute[RawAttributeKind, $String, RawAttributeValue]; ) ;
  
    {$String : $StringEntrySort}RawAttributeForm
    ::=
    (RAW-AttributeFormMap[RawSort, RawSort]; RAW-AttributeFormSimple[RawSort]; RAW-AttributeFormSet[RawSort]; )
   ;
   {$String : $StringEntrySort}RawAttributeKind ::= (RAW-AttributeKindDown; RAW-AttributeKindUp; ) ;
   {$String : $StringEntrySort}RawAttributeOption ::= (RAW-AttributeOption[$String, $String]; ) ;
  
    {$String : $StringEntrySort}RawAttributeValue
    ::=
    (
     RAW-AttributeValue[RawTerm];
     RAW-AttributeNotKey[RawTerm];
     RAW-AttributeKey[RawTerm];
     RAW-AttributeKeyValue[RawTerm, RawTerm];
    )
   ;
  
    {$String : $StringEntrySort}RawDeclaration
    ::=
    (
     RAW-fragment[$String, $List[RawRegExpChoice]];
     RAW-token[$String, $List[RawRegExpChoice]];
     RAW-import[$String, $List[$String]];
     RAW-sort[$String, RawRepeat, RawSortAbstraction];
     RAW-attribute[RawAttributeKind, $String, RawAttributeForm, $List[RawAttributeOption]];
     RAW-embedded-module[RawEmbeddedModule];
     RAW-rule[RawRule];
     RAW-anonymous[$List[RawSortAlternative]];
     RAW-space[$List[RawRegExpChoice]];
     RAW-nestedDeclarations[$List[RawDeclaration]];
    )
   ;
   {$String : $StringEntrySort}RawEmbeddedModule ::= (RAW-module[$String, $List[RawDeclaration]]; ) ;
  
    {$String : $StringEntrySort}RawForm
    ::=
    (
     RAW-FormConstruction[$String, $List[RawScopeSort], $List[RawInheritedRef]];
     RAW-FormParsedSorted[$String, RawParsedForm, $Numeric, $List[RawInheritedRef]];
     RAW-FormParsedUnsorted[RawParsedForm, $Numeric, $List[RawInheritedRef]];
    )
   ;
   {$String : $StringEntrySort}RawInheritedRef ::= (RAW-InheritedRef[$String]; ) ;
   {$String : $StringEntrySort}RawModule ::= (RAW-top-module[RawEmbeddedModule]; ) ;
   {$String : $StringEntrySort}RawParsed ::= (Raw$Unparsed[$String]; Raw$Parsed[RawTerm]; ) ;
  
    {$String : $StringEntrySort}RawParsedForm
    ::=
    (
     RAW-ParsedFormTerm[RawScopeSortPrecRepeat, RawParsedForm];
     RAW-ParsedFormWord[$String, RawParsedForm];
     RAW-ParsedFormSpace[$String, RawParsedForm];
     RAW-ParsedFormDone;
    )
   ;
   {$String : $StringEntrySort}RawPriority ::= (RAW-priority; RAW-Normal; RAW-default; ) ;
  
    {$String : $StringEntrySort}RawRegExpChoice
    ::=
    (RAW-nested[RawRegExpSimple, RawRegExpSimple]; RAW-RegExpConcat[$List[RawRegExpUnit]]; )
   ;
  
    {$String : $StringEntrySort}RawRegExpClass
    ::=
    (
     RAW-RegExpClassRange[$String, $String, RawRegExpClass];
     RAW-RegExpClassNot[RawRegExpClass];
     RAW-RegExpClassChar[$String, RawRegExpClass];
     RAW-RegExpClassDone;
    )
   ;
  
    {$String : $StringEntrySort}RawRegExpSimple
    ::=
    (
     RAW-RegExpWord[$String];
     RAW-RegExpString[$String];
     RAW-RegExpRef[$String];
     RAW-RegExpAny;
     RAW-RegExpClass[RawRegExpClass];
     RAW-RegExpNest[$List[RawRegExpChoice]];
    )
   ;
   {$String : $StringEntrySort}RawRegExpUnit ::= (RAW-RegExpUnit[RawRegExpSimple, RawRepeat]; ) ;
  
    {$String : $StringEntrySort}RawRepeat
    ::=
    (RAW-RepeatSomeSep[RawRegExpSimple]; RAW-RepeatSingle; RAW-RepeatSome; RAW-RepeatMaybeSome; RAW-RepeatMaybe; )
   ;
   {$String : $StringEntrySort}RawRule ::= (RAW-Rule[RawPriority, RawTerm, RawTerm, RawTerm]; ) ;
   {$String : $StringEntrySort}RawScope ::= (RAW-Scope[$List[$String], RawTerm]; ) ;
  
    {$String : $StringEntrySort}RawScopeSort
    ::=
    (
     RAW-ScopeSort[RawSort, RawRepeat, $List[RawSubstituteSort]];
     RAW-BinderScopeSort[$String, RawSort, RawScopeSort];
     RAW-ScopeSortBinder[$String, RawSort];
    )
   ;
  
    {$String : $StringEntrySort}RawScopeSortPrecRepeat
    ::=
    (RAW-ScopeSortPrecRepeat[RawScopeSort, $Numeric, RawRepeat]; )
   ;
  
    {$String : $StringEntrySort}RawSort
    ::=
    (RAW-Sort[RawSort, $List[RawSort]]; RAW-SortName[$String, $List[$String]]; RAW-SortParam[RawSort]; )
   ;
  
    {$String : $StringEntrySort}RawSortAbstraction
    ::=
    (
     RAW-SortAbstractionBody[$List[RawSortAlternative]];
     (RAW-SortAbstractionParam a_74 : RawSortParam . RawSortAbstraction);
    )
   ;
  
    {$String : $StringEntrySort}RawSortAlternative
    ::=
    (
     RAW-static[RawForm];
     RAW-symbol[RawForm];
     RAW-SynthesizedRef[$String];
     RAW-sugar[RawForm, RawTerm];
     RAW-scheme[RawForm];
     RAW-data[RawForm, $List[$String]];
    )
   ;
   {$String : $StringEntrySort}RawSubstituteSort ::= (RAW-SubstituteSort[$String, RawSort]; ) ;
  
    {$String : $StringEntrySort}RawTerm
    ::=
    (
     RAW-VariableUseSorted[$String, RawRepeat, $String, $List[RawAttribute]];
     RAW-Literal[$String, $List[RawAttribute]];
     RAW-Parsed[RawParsed, $List[RawAttribute]];
     RAW-ParsedSorted[$String, RawRepeat, RawParsed, $List[RawAttribute]];
     RAW-Construction[$String, $List[RawScope], $List[RawAttribute]];
     RAW-Special[$String, Text];
     RAW-MetaApplicationSorted[$String, RawRepeat, $String, $List[RawTerm], $List[RawAttribute]];
     OMITTED;
     RAW-VariableUse[$String, $List[RawAttribute]];
     RAW-MetaApplication[$String, $List[RawTerm], $List[RawAttribute]];
     RAW-ConstructionSorted[$String, RawRepeat, $String, $List[RawScope], $List[RawAttribute]];
    )
   ;
  
    SortEntry
    ::=
    (
     SE_TOKEN[$String];
     SE_NONE;
     SE_SORT[$List[Define], $String, NameSet, Wrapper];
     SE_ATTRIBUTE[RawAttributeKind, $String, RawAttributeForm, $List[RawAttributeOption]];
     NAMES[NameSet];
    )
   ;
   Text ::= (variable; $TextNil; $TextCons[Text-Part, Text]; ) ;
  
    Text-Part
    ::=
    (
     $TextGroup[Text];
     $TextSeparator;
     $TextBreak[$String];
     $TextChars[$String];
     $TextEmbed[Text];
     $TextString[Text];
     $TextIndent[Text];
    )
   ;
   {$String : Text}TextMapSort ::= (TEXT_MAP[$List[$String]]; ) ;
   Wrapper ::= (Wrapper[RawParsedForm]; NoWrapper; ) ;
  AddName[NameSet, $String] :: NameSet ;
  Prelude-AddName-1[Data[#Names, #Name], Copy[#Names, #Name]] :
    AddName[NAME_SET[#Names], #Name]
    →
    NAME_SET[
     $[
      IfEmpty,
      #Name,
      #Names,
      $[
       IfEmpty,
       #Names,
       $[':', ";", #Name, ";"],
       $[If, $[Contains, #Names, $[':', ";", #Name, ";"]], #Names, $[':', #Names, #Name, ";"]]]]]
   ;
  AddNameNumber[NameSet, $Numeric] :: NameSet ;
  Prelude-AddNameNumber-1[Data[#Number]] : AddNameNumber[#Names, #Number] → AddName[#Names, $[FormatNumber, #Number]]
   ;
  And[Boolean, Boolean] :: Boolean ;
  Prelude-And-1 : And[B_TRUE, #] → # ;
  Prelude-And-2 : And[B_FALSE, #] → B_FALSE ;
  (∀ a_93 . Append[$List[a_93], $List[a_93]] :: $List[a_93] );
  Prelude-Append-1 : Append[(), #tail] → #tail ;
  Prelude-Append-2 : Append[(#1; #s), #tail] → (#1; Append[#s, #tail]) ;
  (∀ a_50 . AsText[a_50] :: Text );
  Text-AsText-1 : AsText[#text] → #text ;
  AttributeFormSyntax[RawAttributeForm, $List[RawAttributeOption]] :: Text ;
  AttributeFormSyntax-1 :
    AttributeFormSyntax[RAW-AttributeFormSimple[#Sort#], #AttributeOptions]
    →
    $TextCons[
     $TextChars["RAW_LPAREN {RAW-AttributeValue} <Raw_"],
     $TextCons[$TextChars[SortName[#Sort#]], $TextCons[$TextChars["> RAW_RPAREN"], $TextNil]]]
   ;
  AttributeFormSyntax-2 :
    AttributeFormSyntax[RAW-AttributeFormSet[#Sort#], #AttributeOptions]
    →
    $TextCons[
     $TextChars["RAW_LBRACE {RAW-AttributeKey} <Raw_"],
     $TextCons[$TextChars[SortName[#Sort#]], $TextCons[$TextChars["> RAW_RBRACE"], $TextNil]]]
   ;
  AttributeFormSyntax-3 :
    AttributeFormSyntax[RAW-AttributeFormMap[#Sort1#, #Sort2#], #AttributeOptions]
    →
    $TextCons[
     $TextChars["RAW_LBRACE {RAW-AttributeKeyValue} <Raw_"],
     $TextCons[
      $TextChars[SortName[#Sort1#]],
      $TextCons[
       $TextChars["> RAW_COLON <Raw_"],
       $TextCons[$TextChars[SortName[#Sort2#]], $TextCons[$TextChars["> RAW_RBRACE"], $TextNil]]]]]
   ;
  {$String : SortEntry}AttributeKeySortName[$String] :: $String ;
  CookN-AttributeKeySortName-1 :
    {#ND}
    AttributeKeySortName[#SortName]
    →
    {#ND}
    AttributeKeySortName1[$[{#ND}Get[SortEntry], #SortName, SE_NONE], #SortName]
   ;
  {$String : SortEntry}AttributeKeySortName1[SortEntry, $String] :: $String ;
  CookN-AttributeKeySortName1-1[Data[#Entry]] :
    {#ND}
    AttributeKeySortName1[#Entry, #SortName]
    →
    {#ND}
    AttributeKeySortName2[#Entry, #SortName]
   ;
  {$String : SortEntry}AttributeKeySortName2[SortEntry, $String] :: $String ;
  CookN-AttributeKeySortName2-1 :
    {#ND}
    AttributeKeySortName2[SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormSimple[#Sort#], #AttributeOptions], #SortName]
    →
    ""
   ;
  CookN-AttributeKeySortName2-2 :
    {#ND}
    AttributeKeySortName2[SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormSet[#Sort#], #AttributeOptions], #SortName]
    →
    SortName[#Sort#]
   ;
  CookN-AttributeKeySortName2-3 :
    {#ND}
    AttributeKeySortName2[
     SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormMap[#Sort1#, #Sort2#], #AttributeOptions],
     #SortName]
    →
    SortName[#Sort1#]
   ;
  CookN-AttributeKeySortName2-4 :
    {#ND}
    AttributeKeySortName2[$[NotMatch, SE_ATTRIBUTE[#AttributeKind, #AttributeName, #AttributeForm, #AttributeOptions], #_], #SortName]
    →
    ""
   ;
  AttributeKindCategory[RawAttributeKind] :: Text ;
  AttributeKindCategory-1 :
    AttributeKindCategory[RAW-AttributeKindUp]
    →
    $TextCons[$TextChars["Synthesized"], $TextNil]
   ;
  AttributeKindCategory-2 :
    AttributeKindCategory[RAW-AttributeKindDown]
    →
    $TextCons[$TextChars["Inherited"], $TextNil]
   ;
  AttributeKindIndicator[RawAttributeKind] :: Text ;
  AttributeKindIndicator-1 :
    AttributeKindIndicator[RAW-AttributeKindUp]
    →
    $TextCons[$TextChars["({$Synthesized})"], $TextNil]
   ;
  AttributeKindIndicator-2 :
    AttributeKindIndicator[RAW-AttributeKindDown]
    →
    $TextCons[$TextChars["({$Inherited})"], $TextNil]
   ;
  AttributeKindToken[RawAttributeKind] :: Text ;
  AttributeKindToken-1 : AttributeKindToken[RAW-AttributeKindUp] → $TextCons[$TextChars["RAW_UP"], $TextNil] ;
  AttributeKindToken-2 : AttributeKindToken[RAW-AttributeKindDown] → $TextCons[$TextChars["RAW_DOWN"], $TextNil] ;
  AttributeName[RawAttribute] :: $String ;
  CookBase-AttributeName-1 :
    AttributeName[RAW-Attribute[#AttributeKind#, #AttributeName#, #AttributeValue#]]
    →
    #AttributeName#
   ;
  {$String : SortEntry}AttributeNameList :: $List[$String] ;
  CookN-AttributeNameList-1 : {#ND}AttributeNameList → {#ND}AttributeNameList2[$[{#ND}Keys[$String]]] ;
  {$String : SortEntry}AttributeNameList2[$List[$String]] :: $List[$String] ;
  CookN-AttributeNameList2-1 : {#ND}AttributeNameList2[()] → () ;
  CookN-AttributeNameList2-2 :
    {#ND; #Name : #Entry}
    AttributeNameList2[(#Name; #Names)]
    →
    {#ND}
    AttributeNameList3[#Entry, #Names]
   ;
  {$String : SortEntry}AttributeNameList3[SortEntry, $List[$String]] :: $List[$String] ;
  CookN-AttributeNameList3-1 :
    {#ND}
    AttributeNameList3[SE_ATTRIBUTE[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#], #Names]
    →
    (#AttributeName#; {#ND}AttributeNameList2[#Names])
   ;
  CookN-AttributeNameList3-2 :
    {#ND}
    AttributeNameList3[$[NotMatch, SE_ATTRIBUTE[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#], #_], #Names]
    →
    {#ND}
    AttributeNameList2[#Names]
   ;
  {$String : SortEntry}AttributeValueSortName[$String] :: $String ;
  CookN-AttributeValueSortName-1 :
    {#ND}
    AttributeValueSortName[#AttributeName]
    →
    {#ND}
    AttributeValueSortName1[$[{#ND}Get[SortEntry], #AttributeName, SE_NONE], #AttributeName]
   ;
  {$String : SortEntry}AttributeValueSortName1[SortEntry, $String] :: $String ;
  CookN-AttributeValueSortName1-1[Data[#Entry]] :
    {#ND}
    AttributeValueSortName1[#Entry, #AttributeName]
    →
    {#ND}
    AttributeValueSortName2[#Entry, #AttributeName]
   ;
  {$String : SortEntry}AttributeValueSortName2[SortEntry, $String] :: $String ;
  CookN-AttributeValueSortName2-1 :
    {#ND}
    AttributeValueSortName2[SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormSimple[#Sort#], #AttributeOptions], #SortName]
    →
    SortName[#Sort#]
   ;
  CookN-AttributeValueSortName2-2 :
    {#ND}
    AttributeValueSortName2[SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormSet[#Sort#], #AttributeOptions], #SortName]
    →
    ""
   ;
  CookN-AttributeValueSortName2-3 :
    {#ND}
    AttributeValueSortName2[
     SE_ATTRIBUTE[#AttributeKind, #AttributeName, RAW-AttributeFormMap[#Sort1#, #Sort2#], #AttributeOptions],
     #SortName]
    →
    SortName[#Sort2#]
   ;
  CookN-AttributeValueSortName2-4 :
    {#ND}
    AttributeValueSortName2[$[NotMatch, SE_ATTRIBUTE[#AttributeKind, #AttributeName, #AttributeForm, #AttributeOptions], #_], #SortName]
    →
    ""
   ;
  BaseClassOf[$String] :: $String ;
  CookBase-BaseClassOf-1[Data[#Name], Copy[#Name]] :
    BaseClassOf[#Name]
    →
    $[If, $[Contains, #Name, "."], BaseClassOf[$[AfterFirst, #Name, "."]], $[Replace, #Name, "\"", ""]]
   ;
  BaseSortName[RawSort] :: $String ;
  CookBase-BaseSortName-1[Data[#Sort]] : BaseSortName[#Sort] → BaseSortName2[#Sort] ;
  BaseSortName2[RawSort] :: $String ;
  CookBase-BaseSortName2-1 :
    BaseSortName2[RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#]]
    →
    #SortName#
   ;
  CookBase-BaseSortName2-2 :
    BaseSortName2[$[NotMatch, RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#], #]]
    →
    "BAD"
   ;
  CheckString[$String] :: $String ;
  CookBase-CheckString-1 : CheckString[#String] → #String ;
  (∀ a_81 . Concat[$List[$List[a_81]]] :: $List[a_81] );
  Prelude-Concat-1 : Concat[()] → () ;
  Prelude-Concat-2 : Concat[((); #ss)] → Concat[#ss] ;
  Prelude-Concat-3 : Concat[((#1; #s); #ss)] → (#1; Concat[(#s; #ss)]) ;
  {$String : SortEntry}ConstructorScopeSorts[$String, $String] :: Lifted[$List[RawScopeSort]] ;
  CookN-ConstructorScopeSorts-1[Data[#TopSortName]] :
    {#ND}
    ConstructorScopeSorts[#TopSortName, #Constructor]
    →
    ConstructorScopeSorts0[$[{#ND}Get[SortEntry], #TopSortName, SE_NONE], #Constructor]
   ;
  ConstructorScopeSorts0[SortEntry, $String] :: Lifted[$List[RawScopeSort]] ;
  CookN-ConstructorScopeSorts0-1[Data[#Entry, #Constructor]] :
    ConstructorScopeSorts0[#Entry, #Constructor]
    →
    ConstructorScopeSorts1[#Entry, #Constructor]
   ;
  ConstructorScopeSorts1[SortEntry, $String] :: Lifted[$List[RawScopeSort]] ;
  CookN-ConstructorScopeSorts1-1 :
    ConstructorScopeSorts1[SE_SORT[#Defines, #Name, #Precs, #Wrapper], #Constructor]
    →
    ConstructorScopeSorts2[#Defines, #Constructor]
   ;
  CookN-ConstructorScopeSorts1-2 :
    ConstructorScopeSorts1[$[NotMatch, SE_SORT[#Defines, #Name, #Precs, #Wrapper], #_], #Constructor]
    →
    BOTTOM
   ;
  ConstructorScopeSorts2[$List[Define], $String] :: Lifted[$List[RawScopeSort]] ;
  CookN-ConstructorScopeSorts2-1 : ConstructorScopeSorts2[(), #Constructor] → BOTTOM ;
  CookN-ConstructorScopeSorts2-2 :
    ConstructorScopeSorts2[((D_ABSTRACTION a_142 . #Define[a_142]); #Defines), #Constructor]
    →
    ConstructorScopeSorts2[(#Define[param]; #Defines), #Constructor]
   ;
  CookN-ConstructorScopeSorts2-3 :
    ConstructorScopeSorts2[(D_RULE[#Rule, #sort, #IsDataEquivalence?]; #Defines), #Constructor]
    →
    ConstructorScopeSorts2[#Defines, #Constructor]
   ;
  CookN-ConstructorScopeSorts2-4 :
    ConstructorScopeSorts2[(D_FORM[#Form, #Kind]; #Defines), #Constructor]
    →
    ConstructorScopeSorts3[#Form, #Defines, #Constructor]
   ;
  CookN-ConstructorScopeSorts2-5 :
    ConstructorScopeSorts2[(D_SYNTHESIZES[#AttributeName]; #Defines), #Constructor]
    →
    ConstructorScopeSorts2[#Defines, #Constructor]
   ;
  ConstructorScopeSorts3[RawForm, $List[Define], $String] :: Lifted[$List[RawScopeSort]] ;
  CookN-ConstructorScopeSorts3-1[Data[#Constructor1, #Constructor2]] :
    ConstructorScopeSorts3[RAW-FormConstruction[#Constructor1, #ScopeSorts, #InheritedRefs], #Defines, #Constructor2]
    →
    $[If, $[Equal, #Constructor1, #Constructor2], LIFTED[#ScopeSorts], ConstructorScopeSorts2[#Defines, #Constructor2]]
   ;
  CookN-ConstructorScopeSorts3-2[Data[#_]] :
    ConstructorScopeSorts3[$[NotMatch, RAW-FormConstruction[#Constructor, #ScopeSorts, #InheritedRefs], #_], #Defines, #Constructor2]
    →
    ConstructorScopeSorts2[#Defines, #Constructor2]
   ;
  ContainsName[NameSet, $String] :: Boolean ;
  Prelude-ContainsName-1[Data[#Names, #Name]] :
    ContainsName[NAME_SET[#Names], #Name]
    →
    $[If, $[Contains, #Names, $[':', ";", #Name, ";"]], B_TRUE, B_FALSE]
   ;
  (∀ a_56 . CookError[$String] :: a_56 );
  CookBase-CookError-1[Data[#message]] : CookError[#message] → $[Error, #message] ;
  {$String : SortEntry}DerivedSorts[NameSet] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-1 :
    {#ND}
    DerivedSorts[#Names]
    →
    FoldNamesWhen[ok x y . {#ND}Then-DerivedSorts2[ok, x, y], #Names, ()]
   ;
  DerivedSorts-Attribute[RawAttribute, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Attribute-1 :
    DerivedSorts-Attribute[RAW-Attribute[#AttributeKind#, #AttributeName#, RAW-AttributeValue[#Term#]], #derived]
    →
    DerivedSorts-Term[#Term#, #derived]
   ;
  CookN-DerivedSorts-Attribute-2 :
    DerivedSorts-Attribute[RAW-Attribute[#AttributeKind#, #AttributeName#, RAW-AttributeKey[#Term#]], #derived]
    →
    DerivedSorts-Term[#Term#, #derived]
   ;
  CookN-DerivedSorts-Attribute-3 :
    DerivedSorts-Attribute[RAW-Attribute[#AttributeKind#, #AttributeName#, RAW-AttributeKeyValue[#Term1#, #Term2#]], #derived]
    →
    DerivedSorts-Term[#Term1#, DerivedSorts-Term[#Term2#, #derived]]
   ;
  CookN-DerivedSorts-Attribute-4 :
    DerivedSorts-Attribute[RAW-Attribute[#AttributeKind#, #AttributeName#, RAW-AttributeNotKey[#Term#]], #derived]
    →
    DerivedSorts-Term[#Term#, #derived]
   ;
  DerivedSorts-Attributes[$List[RawAttribute], $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Attributes-1 : DerivedSorts-Attributes[(), #derived] → #derived ;
  CookN-DerivedSorts-Attributes-2 :
    DerivedSorts-Attributes[(#a1; #as), #derived]
    →
    DerivedSorts-Attribute[#a1, DerivedSorts-Attributes[#as, #derived]]
   ;
  DerivedSorts-Form[RawForm, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Form-1 :
    DerivedSorts-Form[RAW-FormParsedSorted[#Sort#, #ParsedForm#, #Prec#, #InheritedRefs], #derived]
    →
    DerivedSorts-ParsedForm[#ParsedForm#, #derived]
   ;
  CookN-DerivedSorts-Form-2 :
    DerivedSorts-Form[RAW-FormParsedUnsorted[#ParsedForm#, #Prec#, #InheritedRefs], #derived]
    →
    DerivedSorts-ParsedForm[#ParsedForm#, #derived]
   ;
  CookN-DerivedSorts-Form-3 :
    DerivedSorts-Form[RAW-FormConstruction[#Constructor#, #ScopeSorts#, #InheritedRefs], #derived]
    →
    #derived
   ;
  DerivedSorts-Parsed[RawParsed, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Parsed-1 : DerivedSorts-Parsed[Raw$Parsed[#Term], #derived] → DerivedSorts-Term[#Term, #derived]
   ;
  CookN-DerivedSorts-Parsed-2 : DerivedSorts-Parsed[Raw$Unparsed[#String], #derived] → #derived ;
  DerivedSorts-ParsedForm[RawParsedForm, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-ParsedForm-1 :
    DerivedSorts-ParsedForm[RAW-ParsedFormWord[#Word, #ParsedForm], #derived]
    →
    DerivedSorts-ParsedForm[#ParsedForm, #derived]
   ;
  CookN-DerivedSorts-ParsedForm-2 :
    DerivedSorts-ParsedForm[RAW-ParsedFormSpace[#Space, #ParsedForm], #derived]
    →
    DerivedSorts-ParsedForm[#ParsedForm, #derived]
   ;
  CookN-DerivedSorts-ParsedForm-3 : DerivedSorts-ParsedForm[RAW-ParsedFormDone, #derived] → #derived ;
  CookN-DerivedSorts-ParsedForm-4 :
    DerivedSorts-ParsedForm[RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#ScopeSort, #Precedence, #Repeat], #ParsedForm], #derived]
    →
    DerivedSorts-ScopeSort[#ScopeSort, #Precedence, #Repeat, DerivedSorts-ParsedForm[#ParsedForm, #derived]]
   ;
  DerivedSorts-Repeat[$String, RawRepeat, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Repeat-1 : DerivedSorts-Repeat[#Name, RAW-RepeatSingle, #derived] → #derived ;
  CookN-DerivedSorts-Repeat-2[Data[#Name, #Repeat]] :
    DerivedSorts-Repeat[#Name, $[NotMatch, RAW-RepeatSingle, #Repeat], #derived]
    →
    $[IfEmpty, #Name, #derived, (DERIVED[#Name, 0, #Repeat]; #derived)]
   ;
  DerivedSorts-Rule[RawRule, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Rule-1 :
    DerivedSorts-Rule[RAW-Rule[#Priority#, #Construction#, #Construction_Pattern#, #Term_Contraction#], #derived]
    →
    DerivedSorts-Term[#Construction_Pattern#, DerivedSorts-Term[#Term_Contraction#, #derived]]
   ;
  DerivedSorts-ScopeSort[RawScopeSort, $Numeric, RawRepeat, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-ScopeSort-1 :
    DerivedSorts-ScopeSort[RAW-ScopeSort[#Sort#, #Repeat#, #SubstituteSorts1#], #Precedence, #Repeat, #derived]
    →
    DerivedSorts-Sort[#Sort#, #Precedence, NestedRepeat[#Repeat#, #Repeat], #derived]
   ;
  CookN-DerivedSorts-ScopeSort-2 :
    DerivedSorts-ScopeSort[RAW-ScopeSortBinder[#Variable#, #Sort#], #Precedence, #Repeat, #derived]
    →
    #derived
   ;
  DerivedSorts-Scopes[$List[RawScope], $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Scopes-1 :
    DerivedSorts-Scopes[#Scopes, #derived]
    →
    FoldWhen[ok_61 scope derived . Then-DerivedSorts-Scope[ok_61, scope, derived], #Scopes, #derived]
   ;
  DerivedSorts-Sort[RawSort, $Numeric, RawRepeat, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Sort-1[Data[#Repeat]] :
    DerivedSorts-Sort[#Sort, #Precedence, #Repeat, #derived]
    →
    DerivedSorts-Sort2[#Repeat, #Precedence, BaseSortName[#Sort], #derived]
   ;
  DerivedSorts-Sort2[RawRepeat, $Numeric, $String, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Sort2-1 : DerivedSorts-Sort2[RAW-RepeatSingle, #Precedence, #Name, #derived] → #derived ;
  CookN-DerivedSorts-Sort2-2[Data[#Repeat, #Name]] :
    DerivedSorts-Sort2[$[NotMatch, RAW-RepeatSingle, #Repeat], #Precedence, #Name, #derived]
    →
    $[IfEmpty, #Name, #derived, (DERIVED[#Name, #Precedence, #Repeat]; #derived)]
   ;
  DerivedSorts-Term[RawTerm, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Term-1 : DerivedSorts-Term[OMITTED, #derived] → #derived ;
  CookN-DerivedSorts-Term-10 :
    DerivedSorts-Term[RAW-MetaApplicationSorted[#Constructor_Sort#, #Repeat#, #MetaVariable#, #Terms#, #Attributes#], #derived]
    →
    DerivedSorts-Repeat[#Constructor_Sort#, #Repeat#, DerivedSorts-Terms[#Terms#, #derived]]
   ;
  CookN-DerivedSorts-Term-11 : DerivedSorts-Term[RAW-Special[#Variable, #Concrete], #derived] → #derived ;
  CookN-DerivedSorts-Term-2 :
    DerivedSorts-Term[RAW-VariableUse[#Variable#, #Attributes#], #derived]
    →
    DerivedSorts-Attributes[#Attributes#, #derived]
   ;
  CookN-DerivedSorts-Term-3 :
    DerivedSorts-Term[RAW-VariableUseSorted[#Constructor#, #Repeat#, #Variable#, #Attributes#], #derived]
    →
    DerivedSorts-Repeat[#Constructor#, #Repeat#, DerivedSorts-Attributes[#Attributes#, #derived]]
   ;
  CookN-DerivedSorts-Term-4 :
    DerivedSorts-Term[RAW-Literal[#Literal#, #Attributes#], #derived]
    →
    DerivedSorts-Attributes[#Attributes#, #derived]
   ;
  CookN-DerivedSorts-Term-5 :
    DerivedSorts-Term[RAW-Parsed[#Parsed, #Attributes], #derived]
    →
    DerivedSorts-Parsed[#Parsed, DerivedSorts-Attributes[#Attributes, #derived]]
   ;
  CookN-DerivedSorts-Term-6 :
    DerivedSorts-Term[RAW-ParsedSorted[#Name, #Repeat, #Parsed, #Attributes], #derived]
    →
    DerivedSorts-Repeat[#Name, #Repeat, DerivedSorts-Parsed[#Parsed, DerivedSorts-Attributes[#Attributes, #derived]]]
   ;
  CookN-DerivedSorts-Term-7 :
    DerivedSorts-Term[RAW-Construction[#Constructor#, #Scopes#, #Attributes#], #derived]
    →
    DerivedSorts-Scopes[#Scopes#, DerivedSorts-Attributes[#Attributes#, #derived]]
   ;
  CookN-DerivedSorts-Term-8 :
    DerivedSorts-Term[RAW-ConstructionSorted[#Constructor1#, #Repeat#, #Constructor#, #Scopes#, #Attributes#], #derived]
    →
    DerivedSorts-Repeat[#Constructor1#, #Repeat#, DerivedSorts-Scopes[#Scopes#, DerivedSorts-Attributes[#Attributes#, #derived]]]
   ;
  CookN-DerivedSorts-Term-9 :
    DerivedSorts-Term[RAW-MetaApplication[#MetaVariable#, #Terms#, #Attributes#], #derived]
    →
    DerivedSorts-Terms[#Terms#, DerivedSorts-Attributes[#Attributes#, #derived]]
   ;
  DerivedSorts-Terms[$List[RawTerm], $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts-Terms-1 :
    DerivedSorts-Terms[#Terms, #derived]
    →
    FoldWhen[ok_95 term derived_97 . Then-DerivedSorts-Term[ok_95, term, derived_97], #Terms, #derived]
   ;
  DerivedSorts2[SortEntry, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-DerivedSorts2-1 : DerivedSorts2[SE_NONE, #derived] → #derived ;
  CookN-DerivedSorts2-2 : DerivedSorts2[SE_TOKEN[#name], #derived] → #derived ;
  CookN-DerivedSorts2-3 : DerivedSorts2[SE_ATTRIBUTE[#kind, #name, #form, #options], #derived] → #derived ;
  CookN-DerivedSorts2-4 :
    DerivedSorts2[SE_SORT[#Defines, #Name, #Precs, #Wrapper], #derived]
    →
    FoldWhen[ok_59 defined derived_80 . Then-DerivedSorts-Defines[ok_59, defined, derived_80], #Defines, #derived]
   ;
  (∀ b a_19 . Drop[Lifted[a_19], x_98 : a_19 . $sort[b], b] :: b );
  Prelude-Drop-1 : Drop[LIFTED[#], a_64 . #1[a_64], #2] → #1[#] ;
  Prelude-Drop-2 : Drop[BOTTOM, a_12 . #1[a_12], #2] → #2 ;
  EmptyTextMap :: TextMapSort ;
  Prelude-EmptyTextMap-1 : EmptyTextMap → TEXT_MAP[()] ;
  ExtractSubstitutedSort[RawSubstituteSort] :: Text ;
  ExtractSubstitutedSort-1 :
    ExtractSubstitutedSort[RAW-SubstituteSort[#Variable1#, #Sort2#]]
    →
    $TextCons[$TextChars[#Variable1#], $TextNil]
   ;
  FirstName[NameSet] :: $String ;
  Prelude-FirstName-1[Data[#Names]] : FirstName[NAME_SET[#Names]] → $[BeforeFirst, $[AfterFirst, #Names, ";"], ";"] ;
  (∀ b_88 a_35 . Fold[x_29 : a_35 z : b_88 . $sort[b_88], $List[a_35], b_88] :: b_88 );
  Prelude-Fold-1 : Fold[x_28 z_65 . #[x_28, z_65], (), #z] → #z ;
  Prelude-Fold-2 : Fold[x_5 z_71 . #[x_5, z_71], (#x; #xs), #z] → #[#x, Fold[x_36 z_49 . #[x_36, z_49], #xs, #z]] ;
  (∀ a_198 b_19 c . Fold2[x_27 : a_198 y_95 : b_19 z_47 : c . $sort[c], $List[a_198], $List[b_19], c] :: c );
  Prelude-Fold2-1 : Fold2[x_14 y_50 z_91 . #[x_14, y_50, z_91], (), #_, #z] → #z ;
  Prelude-Fold2-2 : Fold2[x_56 y_48 z_56 . #[x_56, y_48, z_56], #_, (), #z] → #z ;
  Prelude-Fold2-3 :
    Fold2[x_0 y_116 z_99 . #[x_0, y_116, z_99], (#x; #xs), (#y; #ys), #z]
    →
    #[#x, #y, Fold2[x_55 y_91 z_10 . #[x_55, y_91, z_10], #xs, #ys, #z]]
   ;
  (∀ b_3 . FoldNamesWhen[ok_52 : Ok x_25 : $String y_37 : b_3 . $sort[b_3], NameSet, b_3] :: b_3 );
  Prelude-FoldNamesWhen-1 :
    FoldNamesWhen[ok_6 x_13 y_23 . #[ok_6, x_13, y_23], #List, #Base]
    →
    FoldWhen[ok_94 x_43 y_96 . #[ok_94, x_43, y_96], NameSetList[#List], #Base]
   ;
  (∀ a_17 b_36 . FoldWhen[ok_51 : Ok x_53 : a_17 z_85 : b_36 . $sort[b_36], $List[a_17], b_36] :: b_36 );
  Prelude-FoldWhen-1 : FoldWhen[ok_62 x_91 z_89 . #[ok_62, x_91, z_89], (), #z] → #z ;
  Prelude-FoldWhen-2 :
    FoldWhen[ok_40 x_42 z_33 . #[ok_40, x_42, z_33], (#x; #xs), #z]
    →
    #[OK, #x, FoldWhen[ok_4 x_48 z_84 . #[ok_4, x_48, z_84], #xs, #z]]
   ;
  FullName[$String] :: $String ;
  CookBase-FullName-1[Data[#Name], Copy[#Name]] : FullName[#Name] → $[Replace, $[Replace, #Name, "/", "."], "\"", ""]
   ;
  FullPrefix[$String] :: $String ;
  CookBase-FullPrefix-1[Data[#Name], Copy[#Name]] :
    FullPrefix[#Name]
    →
    $[Replace, $[Replace, $[Replace, #Name, ".", "$"], "/", "$"], "\"", ""]
   ;
  HasNames[NameSet] :: Boolean ;
  Prelude-HasNames-1[Data[#Names]] :
    HasNames[NAME_SET[#Names]]
    →
    $[IfEmpty, #Names, B_FALSE, $[If, $[Equal, #Names, ";"], B_FALSE, B_TRUE]]
   ;
  (∀ a_37 . Hd[$List[a_37]] :: a_37 );
  Prelude-Hd-1 : Hd[(#; ##)] → # ;
  Prelude-Hd-2 : Hd[()] → $[Error, "Hd of empty list"] ;
  (∀ a_89 . If[Boolean, a_89, a_89] :: a_89 );
  Prelude-If-1 : If[B_TRUE, #1, #2] → #1 ;
  Prelude-If-2 : If[B_FALSE, #1, #2] → #2 ;
  (∀ a_3 . IfAliasKind[FormKind, a_3, a_3] :: a_3 );
  IfAliasKind-1 : IfAliasKind[FK_ALIAS, #1, #2] → #1 ;
  IfAliasKind-2 : IfAliasKind[FK_SYMBOL[#IsStatic], #1, #2] → #1 ;
  IfAliasKind-3[Data[#Kind]] :
    IfAliasKind[$[NotMatch, FK_ALIAS, $[NotMatch, FK_SYMBOL[#IsStatic], #Kind]], #1, #2]
    →
    #2
   ;
  (∀ b_29 a_53 . IfEmpty[$List[a_53], b_29, b_29] :: b_29 );
  Prelude-IfEmpty-1 : IfEmpty[(), #1, #2] → #1 ;
  Prelude-IfEmpty-2 : IfEmpty[(#; ##), #1, #2] → #2 ;
  (∀ a_31 b_30 . IfLifted[Lifted[a_31], b_30, b_30] :: b_30 );
  Prelude-IfLifted-1 : IfLifted[LIFTED[#], #1, #2] → #1 ;
  Prelude-IfLifted-2 : IfLifted[BOTTOM, #1, #2] → #2 ;
  (∀ b_16 a_52 . IfSingleton[$List[a_52], b_16, b_16] :: b_16 );
  Prelude-IfSingleton-1 : IfSingleton[(), #1, #2] → #2 ;
  Prelude-IfSingleton-2 : IfSingleton[(#; ##), #1, #2] → IfEmpty[##, #1, #2] ;
  (∀ a_51 . IfSingletonRepeat[RawRepeat, a_51, a_51] :: a_51 );
  CookBase-IfSingletonRepeat-1 : IfSingletonRepeat[RAW-RepeatSingle, #1, #2] → #1 ;
  CookBase-IfSingletonRepeat-2 : IfSingletonRepeat[RAW-RepeatMaybe, #1, #2] → #2 ;
  CookBase-IfSingletonRepeat-3 : IfSingletonRepeat[RAW-RepeatMaybeSome, #1, #2] → #2 ;
  CookBase-IfSingletonRepeat-4 : IfSingletonRepeat[RAW-RepeatSome, #1, #2] → #2 ;
  CookBase-IfSingletonRepeat-5 : IfSingletonRepeat[RAW-RepeatSomeSep[#RegExpLeaf#], #1, #2] → #2 ;
  {$String : SortEntry}InheritedMapNames :: NameSet ;
  CookN-InheritedMapNames-1 :
    {#ND}
    InheritedMapNames
    →
    FoldWhen[ok_71 k ns . {#ND}KeepInheritedMapEntry[ok_71, k, ns], $[{#ND}Keys[$String]], NoNames]
   ;
  {$String : SortEntry}InheritedNames :: NameSet ;
  CookN-InheritedNames-1 :
    {#ND}
    InheritedNames
    →
    FoldWhen[ok_41 k_81 ns_5 . {#ND}KeepInheritedEntry[ok_41, k_81, ns_5], $[{#ND}Keys[$String]], NoNames]
   ;
  (∀ a_30 . JoinMappedTextMaps[x_17 : a_30 . TextMapSort, $List[a_30]] :: TextMapSort );
  Prelude-JoinMappedTextMaps-1 :
    JoinMappedTextMaps[x_75 . #[x_75], #List]
    →
    JoinMappedTextMaps2[x_20 . #[x_20], #List, EmptyTextMap]
   ;
  (∀ a_174 . JoinMappedTextMaps2[x_44 : a_174 . TextMapSort, $List[a_174], TextMapSort] :: TextMapSort );
  Prelude-JoinMappedTextMaps2-1 : JoinMappedTextMaps2[x_47 . #[x_47], (), #Map] → #Map ;
  Prelude-JoinMappedTextMaps2-2 :
    JoinMappedTextMaps2[x_68 . #[x_68], (#t; #ts), #Map]
    →
    JoinTextMaps[#[#t], JoinMappedTextMaps2[x_116 . #[x_116], #ts, #Map]]
   ;
  JoinTextMaps[TextMapSort, TextMapSort] :: TextMapSort ;
  Prelude-JoinTextMaps-1 :
    JoinTextMaps[{#map1}TEXT_MAP[#Keys1], #TextMap2]
    →
    {#map1}
    JoinTextMaps2[#Keys1, #TextMap2]
   ;
  {$String : Text}JoinTextMaps2[$List[$String], TextMapSort] :: TextMapSort ;
  Prelude-JoinTextMaps2-1 : {#map1}JoinTextMaps2[(), #TextMap2] → #TextMap2 ;
  Prelude-JoinTextMaps2-2 :
    {#map1}
    JoinTextMaps2[(#Key1; #Keys1), {#map2}TEXT_MAP[#Keys2]]
    →
    $[
     {#map2}
     IfDef,
     #Key1,
     {#map1}
     JoinTextMaps2[#Keys1, {#map2}TEXT_MAP[#Keys2]],
     {#map1}
     JoinTextMaps2[#Keys1, {#map2; #Key1 : $[{#map1}Get[Text], #Key1]}TEXT_MAP[(#Key1; #Keys2)]]]
   ;
  {$String : SortEntry}KeepInheritedEntry[Ok, $String, NameSet] :: NameSet ;
  CookN-KeepInheritedEntry-1 :
    {#ND}
    KeepInheritedEntry[OK, #name, #synthesized]
    →
    KeepInheritedEntry1[$[{#ND}Get[SortEntry], #name, SE_NONE], #synthesized]
   ;
  KeepInheritedEntry1[SortEntry, NameSet] :: NameSet ;
  CookN-KeepInheritedEntry1-1[Data[#entry]] :
    KeepInheritedEntry1[#entry, #synthesized]
    →
    KeepInheritedEntry2[#entry, #synthesized]
   ;
  KeepInheritedEntry2[SortEntry, NameSet] :: NameSet ;
  CookN-KeepInheritedEntry2-1 :
    KeepInheritedEntry2[SE_ATTRIBUTE[RAW-AttributeKindDown, #name, #form, #options], #synthesized]
    →
    AddName[#synthesized, #name]
   ;
  CookN-KeepInheritedEntry2-2 :
    KeepInheritedEntry2[$[NotMatch, SE_ATTRIBUTE[RAW-AttributeKindDown, #name, #form, #options], #_], #synthesized]
    →
    #synthesized
   ;
  {$String : SortEntry}KeepInheritedMapEntry[Ok, $String, NameSet] :: NameSet ;
  CookN-KeepInheritedMapEntry-1 :
    {#ND}
    KeepInheritedMapEntry[OK, #name, #inheritedmaps]
    →
    KeepInheritedMapEntry1[$[{#ND}Get[SortEntry], #name, SE_NONE], #inheritedmaps]
   ;
  KeepInheritedMapEntry1[SortEntry, NameSet] :: NameSet ;
  CookN-KeepInheritedMapEntry1-1[Data[#entry]] :
    KeepInheritedMapEntry1[#entry, #inheritedmaps]
    →
    KeepInheritedMapEntry2[#entry, #inheritedmaps]
   ;
  KeepInheritedMapEntry2[SortEntry, NameSet] :: NameSet ;
  CookN-KeepInheritedMapEntry2-1 :
    KeepInheritedMapEntry2[SE_ATTRIBUTE[RAW-AttributeKindDown, #name, RAW-AttributeFormMap[#Sort1#, #Sort2#], #options], #inheritedmaps]
    →
    AddName[#inheritedmaps, #name]
   ;
  CookN-KeepInheritedMapEntry2-2 :
    KeepInheritedMapEntry2[
     $[NotMatch, SE_ATTRIBUTE[RAW-AttributeKindDown, #name, RAW-AttributeFormMap[#Sort1#, #Sort2#], #options], #_],
     #inheritedmaps]
    →
    #inheritedmaps
   ;
  {$String : SortEntry}KeepSynthesizedEntry[Ok, $String, NameSet] :: NameSet ;
  CookN-KeepSynthesizedEntry-1 :
    {#ND}
    KeepSynthesizedEntry[OK, #name, #synthesized]
    →
    KeepSynthesizedEntry1[$[{#ND}Get[SortEntry], #name, SE_NONE], #synthesized]
   ;
  KeepSynthesizedEntry1[SortEntry, NameSet] :: NameSet ;
  CookN-KeepSynthesizedEntry1-1[Data[#entry]] :
    KeepSynthesizedEntry1[#entry, #synthesized]
    →
    KeepSynthesizedEntry2[#entry, #synthesized]
   ;
  KeepSynthesizedEntry2[SortEntry, NameSet] :: NameSet ;
  CookN-KeepSynthesizedEntry2-1 :
    KeepSynthesizedEntry2[SE_ATTRIBUTE[RAW-AttributeKindUp, #name, #form, #options], #synthesized]
    →
    AddName[#synthesized, #name]
   ;
  CookN-KeepSynthesizedEntry2-2 :
    KeepSynthesizedEntry2[$[NotMatch, SE_ATTRIBUTE[RAW-AttributeKindUp, #name, #form, #options], #_], #synthesized]
    →
    #synthesized
   ;
  {$String : SortEntry}KeepSynthesizedMapEntry[Ok, $String, NameSet] :: NameSet ;
  CookN-KeepSynthesizedMapEntry-1 :
    {#ND}
    KeepSynthesizedMapEntry[OK, #name, #synthesizedmaps]
    →
    KeepSynthesizedMapEntry1[$[{#ND}Get[SortEntry], #name, SE_NONE], #synthesizedmaps]
   ;
  KeepSynthesizedMapEntry1[SortEntry, NameSet] :: NameSet ;
  CookN-KeepSynthesizedMapEntry1-1[Data[#entry]] :
    KeepSynthesizedMapEntry1[#entry, #synthesizedmaps]
    →
    KeepSynthesizedMapEntry2[#entry, #synthesizedmaps]
   ;
  KeepSynthesizedMapEntry2[SortEntry, NameSet] :: NameSet ;
  CookN-KeepSynthesizedMapEntry2-1 :
    KeepSynthesizedMapEntry2[SE_ATTRIBUTE[RAW-AttributeKindUp, #name, RAW-AttributeFormMap[#Sort1#, #Sort2#], #options], #synthesizedmaps]
    →
    AddName[#synthesizedmaps, #name]
   ;
  CookN-KeepSynthesizedMapEntry2-2 :
    KeepSynthesizedMapEntry2[
     $[NotMatch, SE_ATTRIBUTE[RAW-AttributeKindUp, #name, RAW-AttributeFormMap[#Sort1#, #Sort2#], #options], #_],
     #synthesizedmaps]
    →
    #synthesizedmaps
   ;
  {$String : $StringEntrySort}MakeLocation :: $String ;
  CookBase-MakeLocation-1 :
    {#L}
    MakeLocation
    →
    MakeLocation2[
     $[{#L}Get[$StringEntrySort], "$FileLocation", STRING[""]],
     $[{#L}Get[$StringEntrySort], "$LineLocation", STRING[""]],
     $[{#L}Get[$StringEntrySort], "$ColumnLocation", STRING[""]]]
   ;
  MakeLocation2[$StringEntrySort, $StringEntrySort, $StringEntrySort] :: $String ;
  CookBase-MakeLocation2-1 :
    MakeLocation2[STRING[#file], STRING[#line], STRING[#column]]
    →
    $[':', #file, " ", #line, ":", #column]
   ;
  (∀ a_183 b_48 . Map[x_88 : a_183 . $sort[b_48], $List[a_183]] :: $List[b_48] );
  Prelude-Map-1 : Map[x_37 . #[x_37], ()] → () ;
  Prelude-Map-2 : Map[x_76 . #[x_76], (#1; #s)] → (#[#1]; Map[x_6 . #[x_6], #s]) ;
  (∀ b_86 a_158 . MapWhen[ok_99 : Ok x_7 : a_158 . $sort[b_86], $List[a_158]] :: $List[b_86] );
  Prelude-MapWhen-1 : MapWhen[ok_92 x_124 . #[ok_92, x_124], ()] → () ;
  Prelude-MapWhen-2 :
    MapWhen[ok_38 x_57 . #[ok_38, x_57], (#1; #s)]
    →
    (#[OK, #1]; MapWhen[ok_1 x_30 . #[ok_1, x_30], #s])
   ;
  {$String : SortEntry}N-CaptureOtherMaps[$List[RawAttribute]] :: Text ;
  CookN-N-CaptureOtherMaps-1 :
    {#ND; $AllInheritedMapNames : NAMES[#InheritedMapNames]}
    N-CaptureOtherMaps[#Attributes]
    →
    N-InitOtherMaps1[
     FoldWhen[ok_97 a_79 ns_71 . ThenRemoveAttributeName[ok_97, a_79, ns_71], #Attributes, #InheritedMapNames],
     "; ",
     $True]
   ;
  {$String : SortEntry}N-Declarations[$List[RawDeclaration], $String] :: NormalizedSortMap ;
  CookN-N-Declarations-1 :
    {#ND}
    N-Declarations[#Declarations, #ModuleName]
    →
    {#ND}
    N-Declarations1[#Declarations, #ModuleName, "", NoNames, ¹ok_16 s ss . N-Finish[ss]]
   ;
  {$String : SortEntry}N-Declarations1[$List[RawDeclaration], $String, $String, NameSet, ¹ok_26 : Ok s_79 : $String ss_81 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  CookN-Declarations-alternatives :
    {#ND}
    N-Declarations1[
     (RAW-anonymous[#SortAlternatives#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_15 s_35 ss_34 . #[¹ok_15, s_35, ss_34]]
    →
    {#ND}
    N-SortAlternatives[
     #SortAlternatives#,
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_35 s_68 ss_27 . N-then-Declarations1[¹ok_35, #Declarations#, #ModuleName, s_68, ss_27, ¹ok2 s2 ss2 . #[¹ok2, s2, ss2]]]
   ;
  CookN-Declarations-attribute[Data[#AttributeName#, #AttributeForm#]] :
    {#ND}
    N-Declarations1[
     (RAW-attribute[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_18 s_6 ss_46 . #[¹ok_18, s_6, ss_46]]
    →
    {#ND; #AttributeName# : SE_ATTRIBUTE[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#]}
    N-Declarations1[#Declarations#, #ModuleName, "", AddName[#Names, #AttributeName#], ¹ok_147 s_91 ss_97 . #[¹ok_147, s_91, ss_97]]
   ;
  CookN-Declarations-fragment :
    {#ND}
    N-Declarations1[
     (RAW-fragment[#FragmentName#, #RegExp#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_57 s_3 ss_22 . #[¹ok_57, s_3, ss_22]]
    →
    {#ND}
    N-Declarations1[#Declarations#, #ModuleName, "", #Names, ¹ok_37 s_75 ss_91 . #[¹ok_37, s_75, ss_91]]
   ;
  CookN-Declarations-local :
    {#ND}
    N-Declarations1[
     (RAW-nestedDeclarations[#Declarations2#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_17 s_5 ss_51 . #[¹ok_17, s_5, ss_51]]
    →
    {#ND}
    N-Declarations1[
     #Declarations2#,
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_53 s_98 ss_61 .
      N-then-Declarations1[¹ok_53, #Declarations#, #ModuleName, #LastSortName, ss_61, ¹ok2_93 s2_62 ss2_92 . #[¹ok2_93, s2_62, ss2_92]]]
   ;
  CookN-Declarations-none :
    {#ND}
    N-Declarations1[(), #ModuleName, #LastSortName, #Names, ¹ok_46 s_22 ss_63 . #[¹ok_46, s_22, ss_63]]
    →
    {#ND}
    #[OK, #LastSortName, #Names]
   ;
  CookN-Declarations-rule :
    {#ND}
    N-Declarations1[(RAW-rule[#Rule#]; #Declarations#), #ModuleName, #LastSortName, #Names, ¹ok_0 s_51 ss_55 . #[¹ok_0, s_51, ss_55]]
    →
    {#ND}
    _InsertDefine[
     D_RULE[#Rule#, RuleTopSort[#Rule#, #LastSortName], B_FALSE],
     RuleTopSort[#Rule#, #LastSortName],
     #Names,
     ¹ok_78 s_90 ss_42 .
      N-then-Declarations1[¹ok_78, #Declarations#, #ModuleName, s_90, ss_42, ¹ok2_52 s2_40 ss2_82 . #[¹ok2_52, s2_40, ss2_82]]]
   ;
  CookN-Declarations-sort :
    {#ND}
    N-Declarations1[
     (RAW-sort[#SortName#, #Repeat#, #SortAbstraction#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_76 s_42 ss_99 . #[¹ok_76, s_42, ss_99]]
    →
    {#ND}
    N-SortAbstraction[
     #SortAbstraction#,
     #ModuleName,
     SortNameWithRepeat1[SortName1[#SortName#], #Repeat#],
     #Names,
     ¹ok_31 s_77 ss_15 .
      N-then-Declarations1[¹ok_31, #Declarations#, #ModuleName, s_77, ss_15, ¹ok2_88 s2_82 ss2_84 . #[¹ok2_88, s2_82, ss2_84]]]
   ;
  CookN-Declarations-space :
    {#ND}
    N-Declarations1[
     (RAW-space[#RegExp#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_64 s_18 ss_5 . #[¹ok_64, s_18, ss_5]]
    →
    {#ND}
    N-Declarations1[#Declarations#, #ModuleName, "", #Names, ¹ok_90 s_12 ss_65 . #[¹ok_90, s_12, ss_65]]
   ;
  CookN-Declarations-token[Data[#SortName]] :
    {#ND}
    N-Declarations1[
     (RAW-token[#SortName#, #RegExp#]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #SortNames,
     ¹ok_178 s_47 ss_49 . #[¹ok_178, s_47, ss_49]]
    →
    {#ND; #SortName# : SE_TOKEN[#SortName#]}
    N-Declarations1[#Declarations#, #ModuleName, "", AddName[#SortNames, #SortName#], ¹ok_24 s_21 ss_40 . #[¹ok_24, s_21, ss_40]]
   ;
  CookN-N-Declarations1-1 :
    {#ND}
    N-Declarations1[
     (RAW-embedded-module[RAW-module[#ModuleName2#, #Declarations2#]]; #Declarations#),
     #ModuleName,
     #LastSortName,
     #Names,
     ¹ok_85 s_82 ss_87 . #[¹ok_85, s_82, ss_87]]
    →
    {#ND}
    N-Declarations1[
     #Declarations2#,
     #ModuleName2#,
     "",
     #Names,
     ¹ok_88 s_80 ss_67 .
      N-then-Declarations1[¹ok_88, #Declarations#, #ModuleName, #LastSortName, ss_67, ¹ok2_21 s2_35 ss2_75 . #[¹ok2_21, s2_35, ss2_75]]]
   ;
  {$String : SortEntry}N-Finish[NameSet] :: NormalizedSortMap ;
  CookN-N-Finish-1 : {#ND}N-Finish[#Names] → {#ND}N-Finish0[#Names, #Names] ;
  {$String : SortEntry}N-Finish0[NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish0-1 : {#ND}N-Finish0[#RestNames, #Names] → {#ND}N-Finish1[HasNames[#RestNames], #RestNames, #Names] ;
  {$String : SortEntry}N-Finish1[Boolean, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish1-1 :
    {#ND}
    N-Finish1[B_FALSE, #RestNames, #Names]
    →
    {#ND}
    N-Finish9[#Names, {#ND}InheritedNames, {#ND}InheritedMapNames, {#ND}SynthesizedNames, {#ND}SynthesizedMapNames]
   ;
  CookN-N-Finish1-2 :
    {#ND}
    N-Finish1[B_TRUE, #RestNames, #Names]
    →
    {#ND}
    N-Finish2[FirstName[#RestNames], RemoveFirstName[#RestNames], #Names]
   ;
  {$String : SortEntry}N-Finish2[$String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish2-1[Data[#Name]] :
    {#ND}
    N-Finish2[#Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish3[$[{#ND}Get[SortEntry], #Name, SE_NONE], #RestNames, #Names]
   ;
  {$String : SortEntry}N-Finish3[SortEntry, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish3-1 : {#ND}N-Finish3[SE_NONE, #RestNames, #Names] → {#ND}N-Finish0[#RestNames, #Names] ;
  CookN-N-Finish3-2 : {#ND}N-Finish3[SE_TOKEN[#Name], #RestNames, #Names] → {#ND}N-Finish0[#RestNames, #Names] ;
  CookN-N-Finish3-3 :
    {#ND}
    N-Finish3[SE_ATTRIBUTE[#AttributeKind1, #AttributeName1, #AttributeForm1, #AttributeOptions1], #RestNames, #Names]
    →
    {#ND}
    N-Finish0[#RestNames, #Names]
   ;
  CookN-N-Finish3-4 :
    {#ND}
    N-Finish3[SE_SORT[#Defines1, #Name1, #Precs1, #Wrapper1], #RestNames, #Names]
    →
    {#ND}
    N-Finish4[#Precs1, 0, #Name1, #RestNames, #Names]
   ;
  {$String : SortEntry}N-Finish4[NameSet, $Numeric, $String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish4-1[Data[#Precs]] :
    {#ND}
    N-Finish4[#Precs, #MaxPrec, #Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish5[HasNames[#Precs], #Precs, #MaxPrec, #Name, #RestNames, #Names]
   ;
  {$String : SortEntry}N-Finish5[Boolean, NameSet, $Numeric, $String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish5-1 :
    {#ND}
    N-Finish5[B_FALSE, #Precs, #MaxPrec, #Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish7[#MaxPrec, #Name, #RestNames, #Names]
   ;
  CookN-N-Finish5-2 :
    {#ND}
    N-Finish5[B_TRUE, #Precs, #MaxPrec, #Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish6[FirstName[#Precs], RemoveFirstName[#Precs], #MaxPrec, #Name, #RestNames, #Names]
   ;
  {$String : SortEntry}N-Finish6[$String, NameSet, $Numeric, $String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish6-1[Data[#Prec, #Precs, #MaxPrec]] :
    {#ND}
    N-Finish6[#Prec, #Precs, #MaxPrec, #Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish4[
     #Precs,
     $[If, $[GreaterThan, $[Decimal, #Prec], #MaxPrec], $[Decimal, #Prec], #MaxPrec],
     #Name,
     #RestNames,
     #Names]
   ;
  {$String : SortEntry}N-Finish7[$Numeric, $String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish7-1[Data[#Prec, #Name], Share[#RestNames, #Names]] :
    {#ND}
    N-Finish7[#Prec, #Name, #RestNames, #Names]
    →
    $[
     If,
     $[GreaterThan, #Prec, 0],
     {#ND}
     _InsertDefine[
      N-LinkDefine[#Name, #Prec],
      #Name,
      #Names,
      ¹ok_9 s_39 ss_86 . N-then-Finish7[¹ok_9, $[Minus, #Prec, 1], s_39, #RestNames, ss_86]],
     {#ND}
     N-Finish0[#RestNames, #Names]]
   ;
  {$String : SortEntry}N-Finish9[NameSet, NameSet, NameSet, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-Finish9-1 :
    {#ND}
    N-Finish9[#Names, #InheritedNames, #InheritedMapNames, #SynthesizedNames, #SynthesizedMapNames]
    →
    {
     #ND;
     $AllSynthesizedNames : NAMES[#SynthesizedNames];
     $AllInheritedNames : NAMES[#InheritedNames];
     $AllSynthesizedMapNames : NAMES[#SynthesizedMapNames];
     $AllInheritedMapNames : NAMES[#InheritedMapNames];
     $AllNames : NAMES[#Names]}
    
    NSM[#Names]
   ;
  N-FormInheritedAttributes[RawForm] :: NameSet ;
  CookN-N-FormInheritedAttributes-1 :
    N-FormInheritedAttributes[RAW-FormParsedSorted[#Name, #ParsedForm, #Prec, #InheritedRefs]]
    →
    N-InheritedRefsList[#InheritedRefs]
   ;
  CookN-N-FormInheritedAttributes-2 :
    N-FormInheritedAttributes[RAW-FormParsedUnsorted[#ParsedForm, #Prec, #InheritedRefs]]
    →
    N-InheritedRefsList[#InheritedRefs]
   ;
  CookN-N-FormInheritedAttributes-3 :
    N-FormInheritedAttributes[RAW-FormConstruction[#Constructor, #ScopeSorts, #InheritedRefs]]
    →
    N-InheritedRefsList[#InheritedRefs]
   ;
  N-InheritedRefsList[$List[RawInheritedRef]] :: NameSet ;
  CookN-N-InheritedRefsList-1 : N-InheritedRefsList[()] → NoNames ;
  CookN-N-InheritedRefsList-2 :
    N-InheritedRefsList[(RAW-InheritedRef[#AttributeName1#]; #refs)]
    →
    AddName[N-InheritedRefsList[#refs], #AttributeName1#]
   ;
  {$String : SortEntry}N-InitOtherMaps[$List[RawAttribute], $String] :: Text ;
  CookN-N-InitOtherMaps-1 :
    {#ND; $AllInheritedMapNames : NAMES[#InheritedMapNames]}
    N-InitOtherMaps[#Attributes, #sep]
    →
    N-InitOtherMaps1[
     FoldWhen[ok_75 a_196 ns_26 . ThenRemoveAttributeName[ok_75, a_196, ns_26], #Attributes, #InheritedMapNames],
     #sep,
     $False]
   ;
  N-InitOtherMaps1[NameSet, $String, $Boolean] :: Text ;
  CookN-N-InitOtherMaps1-1 :
    N-InitOtherMaps1[#MapNames, #sep, #capture]
    →
    N-InitOtherMaps2[NameSetList[#MapNames], #sep, #capture]
   ;
  N-InitOtherMaps2[$List[$String], $String, $Boolean] :: Text ;
  CookN-N-InitOtherMaps2-1 : N-InitOtherMaps2[(), #sep, #capture] → $TextNil ;
  CookN-N-InitOtherMaps2-2 :
    N-InitOtherMaps2[(#a; #as), #sep, #capture]
    →
    $TextCons[
     $TextChars[#sep],
     $TextCons[
      $TextChars["\""],
      $TextCons[
       $TextChars[#a],
       $TextCons[
        $TextChars["\" : {"],
        $TextCons[
         $TextEmbed[
          AsText[$[If, #capture, $TextCons[$TextChars["#InheritedMap_"], $TextCons[$TextChars[#a], $TextNil]], $TextNil]]],
         $TextCons[
          $TextChars["}Inherited_"],
          $TextCons[$TextChars[#a], $TextCons[$TextEmbed[AsText[N-InitOtherMaps2[#as, "; ", #capture]]], $TextNil]]]]]]]]
   ;
  N-LinkDefine[$String, $Numeric] :: Define ;
  CookN-N-LinkDefine-1[Data[#Name, #Prec]] :
    N-LinkDefine[#Name, #Prec]
    →
    D_FORM[
     RAW-FormParsedSorted[
      #Name,
      RAW-ParsedFormTerm[
       RAW-ScopeSortPrecRepeat[RAW-ScopeSort[RAW-Sort[RAW-SortName[#Name, ()], ()], RAW-RepeatSingle, ()], #Prec, RAW-RepeatSingle],
       RAW-ParsedFormDone],
      $[Minus, #Prec, 1],
      ()],
     FK_ALIAS]
   ;
  {$String : SortEntry}N-SortAbstraction[RawSortAbstraction, $String, $String, NameSet, ¹ok_50 : Ok s_10 : $String ss_94 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  CookN-N-SortAbstraction-1 :
    {#ND}
    N-SortAbstraction[#SortAbstraction, #ModuleName, #Name, #Names, ¹ok_73 s_36 ss_177 . #[¹ok_73, s_36, ss_177]]
    →
    {#ND}
    _InsertDefines[N-SortAbstractionDefines[#SortAbstraction], #Name, #Names, ¹ok_34 s_54 ss_0 . #[¹ok_34, s_54, ss_0]]
   ;
  N-SortAbstractionDefines[RawSortAbstraction] :: $List[Define] ;
  CookN-N-SortAbstractionDefines-1 :
    N-SortAbstractionDefines[RAW-SortAbstractionBody[#SortAlternatives#]]
    →
    N-SortAlternativesDefines[#SortAlternatives#]
   ;
  CookN-N-SortAbstractionDefines-2 :
    N-SortAbstractionDefines[(RAW-SortAbstractionParam a_96 . #SortAbstraction#[a_96])]
    →
    (N-SortAbstractionDefines2 a_160 . N-SortAbstractionDefines[#SortAbstraction#[a_160]])
   ;
  (N-SortAbstractionDefines2 a_59 : RawSortParam . $List[Define]) :: $List[Define] ;
  CookN-N-SortAbstractionDefines2-1 : (N-SortAbstractionDefines2 a_15 . ) → () ;
  CookN-N-SortAbstractionDefines2-2 :
    (N-SortAbstractionDefines2 a_66 . #Define[a_66]; #Defines[a_66])
    →
    ((D_ABSTRACTION a_102 . #Define[a_102]); (N-SortAbstractionDefines2 a_69 . #Defines[a_69]))
   ;
  N-SortAlternativeDefine[RawSortAlternative] :: Define ;
  CookN-N-SortAlternativeDefine-1 :
    N-SortAlternativeDefine[{#LOC}RAW-scheme[#Form#]]
    →
    {#LOC}
    D_FORM[#Form#, FK_SCHEME[N-FormInheritedAttributes[#Form#]]]
   ;
  CookN-N-SortAlternativeDefine-2 :
    N-SortAlternativeDefine[{#LOC}RAW-data[#Form#, #Tagging#]]
    →
    {#LOC}
    D_FORM[#Form#, FK_DATA[#Tagging#]]
   ;
  CookN-N-SortAlternativeDefine-3 :
    N-SortAlternativeDefine[{#LOC}RAW-symbol[#Form#]]
    →
    {#LOC}
    D_FORM[#Form#, FK_SYMBOL[$False]]
   ;
  CookN-N-SortAlternativeDefine-4 :
    N-SortAlternativeDefine[{#LOC}RAW-static[#Form#]]
    →
    {#LOC}
    D_FORM[#Form#, FK_SYMBOL[$True]]
   ;
  CookN-N-SortAlternativeDefine-5 :
    N-SortAlternativeDefine[{#LOC}RAW-sugar[#Form#, #Term#]]
    →
    {#LOC}
    D_FORM[#Form#, FK_SUGAR[#Term#]]
   ;
  CookN-N-SortAlternativeDefine-6 :
    N-SortAlternativeDefine[{#LOC}RAW-SynthesizedRef[#AttributeName#]]
    →
    {#LOC}
    D_SYNTHESIZES[#AttributeName#]
   ;
  {$String : SortEntry}N-SortAlternatives[
     $List[RawSortAlternative],
     $String,
     $String,
     NameSet,
     ¹ok_83 : Ok s_15 : $String ss_66 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  CookN-N-SortAlternatives-1 :
    {#ND}
    N-SortAlternatives[(), #ModuleName, #Name, #Names, ¹ok_242 s_76 ss_43 . #[¹ok_242, s_76, ss_43]]
    →
    {#ND}
    #[OK, #Name, #Names]
   ;
  CookN-N-SortAlternatives-2[Data[#Name]] :
    {#ND}
    N-SortAlternatives[(#sa; #sas), #ModuleName, #Name, #Names, ¹ok_79 s_17 ss_2 . #[¹ok_79, s_17, ss_2]]
    →
    $[
     IfEmpty,
     #Name,
     N-SortAlternatives-Error,
     {#ND}
     _InsertDefines[N-SortAlternativesDefines[(#sa; #sas)], #Name, #Names, ¹ok_42 s_4 ss_85 . #[¹ok_42, s_4, ss_85]]]
   ;
  N-SortAlternatives-Error :: NormalizedSortMap ;
  CookN-N-SortAlternatives-Error-1 :
    N-SortAlternatives-Error
    →
    $[Error, "Error: cannot process stand-alone SortAlternatives with no current sort."]
   ;
  N-SortAlternativesDefines[$List[RawSortAlternative]] :: $List[Define] ;
  CookN-N-SortAlternativesDefines-1 : N-SortAlternativesDefines[()] → () ;
  CookN-N-SortAlternativesDefines-2 :
    N-SortAlternativesDefines[(#SortAlternative#; #SortAlternatives#)]
    →
    (N-SortAlternativeDefine[#SortAlternative#]; N-SortAlternativesDefines[#SortAlternatives#])
   ;
  N-resolve[$List[RawDeclaration]] :: $List[RawDeclaration] ;
  CookN-Resolve-Attribute :
    N-resolve[(RAW-attribute[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#]; #Declarations#)]
    →
    (RAW-attribute[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-Fragment :
    N-resolve[(RAW-fragment[#FragmentName#, #RegExp#]; #Declarations#)]
    →
    (RAW-fragment[#FragmentName#, #RegExp#]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-Import :
    N-resolve[(RAW-import[#ModuleName#, #SortNames#]; #Declarations#)]
    →
    N-resolve[(RAW-embedded-module[$[ParseURL, "rawEmbeddedModule", $[Replace, #ModuleName#, "\"", ""]]]; #Declarations#)]
   ;
  CookN-Resolve-Module :
    N-resolve[(RAW-embedded-module[RAW-module[#ModuleName2#, #Declarations2#]]; #Declarations#)]
    →
    (RAW-embedded-module[RAW-module[#ModuleName2#, N-resolve[#Declarations2#]]]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-NakedAlternative :
    N-resolve[(RAW-anonymous[#SortAlternatives#]; #Declarations#)]
    →
    (RAW-anonymous[#SortAlternatives#]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-Sort :
    N-resolve[(RAW-sort[#SortName#, #Repeat#, #SortAbstraction#]; #Declarations#)]
    →
    (RAW-sort[#SortName#, #Repeat#, #SortAbstraction#]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-Space :
    N-resolve[(RAW-space[#RegExp#]; #Declarations#)]
    →
    (RAW-space[#RegExp#]; N-resolve[#Declarations#])
   ;
  CookN-Resolve-Token :
    N-resolve[(RAW-token[#SortName#, #RegExp#]; #Declarations#)]
    →
    (RAW-token[#SortName#, #RegExp#]; N-resolve[#Declarations#])
   ;
  CookN-ResolveDone : N-resolve[()] → () ;
  CookN-ResolveNesting :
    N-resolve[(RAW-nestedDeclarations[#Declarations1#]; #Declarations2#)]
    →
    (RAW-nestedDeclarations[N-resolve[#Declarations1#]]; N-resolve[#Declarations2#])
   ;
  CookN-ResolveRule : N-resolve[(RAW-rule[#Rule#]; #Declarations#)] → (RAW-rule[#Rule#]; N-resolve[#Declarations#]) ;
  {$String : SortEntry}N-then-Declarations1[
     Ok,
     $List[RawDeclaration],
     $String,
     $String,
     NameSet,
     ¹ok_55 : Ok s_70 : $String ss_92 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  CookN-N-then-Declarations1-1 :
    {#ND}
    N-then-Declarations1[OK, #Declaration*, #ModuleName, #LastSortName, #Names, ¹ok_25 s_30 ss_79 . #[¹ok_25, s_30, ss_79]]
    →
    {#ND}
    N-Declarations1[#Declaration*, #ModuleName, #LastSortName, #Names, ¹ok_43 s_89 ss_24 . #[¹ok_43, s_89, ss_24]]
   ;
  {$String : SortEntry}N-then-Finish7[Ok, $Numeric, $String, NameSet, NameSet] :: NormalizedSortMap ;
  CookN-N-then-Finish7-1 :
    {#ND}
    N-then-Finish7[OK, #Prec, #Name, #RestNames, #Names]
    →
    {#ND}
    N-Finish7[#Prec, #Name, #RestNames, #Names]
   ;
  NameSetList[NameSet] :: $List[$String] ;
  Prelude-NameSetList-1[Data[#Names]] : NameSetList[#Names] → If[HasNames[#Names], NameSetList1[#Names], ()] ;
  NameSetList1[NameSet] :: $List[$String] ;
  Prelude-NameSetList1-1 :
    NameSetList1[NAME_SET[#Names]]
    →
    $[Split, $[Substring, #Names, 1, $[Minus, $[Length, #Names], 1]], ";"]
   ;
  NestedRepeat[RawRepeat, RawRepeat] :: RawRepeat ;
  CookBase-NestedRepeat-many-many : NestedRepeat[RAW-RepeatMaybeSome, RAW-RepeatMaybeSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-many-maybe : NestedRepeat[RAW-RepeatMaybeSome, RAW-RepeatMaybe] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-many-single : NestedRepeat[RAW-RepeatMaybeSome, RAW-RepeatSingle] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-many-some : NestedRepeat[RAW-RepeatMaybeSome, RAW-RepeatSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-many-somesep :
    NestedRepeat[RAW-RepeatMaybeSome, RAW-RepeatSomeSep[#RegExpLeaf2#]]
    →
    $[Error, "Cannot nest * in +_\'...\' repeater."]
   ;
  CookBase-NestedRepeat-maybe-many : NestedRepeat[RAW-RepeatMaybe, RAW-RepeatMaybeSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-maybe-maybe : NestedRepeat[RAW-RepeatMaybe, RAW-RepeatMaybe] → RAW-RepeatMaybe ;
  CookBase-NestedRepeat-maybe-single : NestedRepeat[RAW-RepeatMaybe, RAW-RepeatSingle] → RAW-RepeatMaybe ;
  CookBase-NestedRepeat-maybe-some : NestedRepeat[RAW-RepeatMaybe, RAW-RepeatSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-maybe-somesep :
    NestedRepeat[RAW-RepeatMaybe, RAW-RepeatSomeSep[#RegExpLeaf2#]]
    →
    $[Error, "Cannot nest ? in +_\'...\' repeater."]
   ;
  CookBase-NestedRepeat-single-many : NestedRepeat[RAW-RepeatSingle, RAW-RepeatMaybeSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-single-maybe : NestedRepeat[RAW-RepeatSingle, RAW-RepeatMaybe] → RAW-RepeatMaybe ;
  CookBase-NestedRepeat-single-single : NestedRepeat[RAW-RepeatSingle, RAW-RepeatSingle] → RAW-RepeatSingle ;
  CookBase-NestedRepeat-single-some : NestedRepeat[RAW-RepeatSingle, RAW-RepeatSome] → RAW-RepeatSome ;
  CookBase-NestedRepeat-single-somesep :
    NestedRepeat[RAW-RepeatSingle, RAW-RepeatSomeSep[#RegExpLeaf2#]]
    →
    RAW-RepeatSomeSep[#RegExpLeaf2#]
   ;
  CookBase-NestedRepeat-some-many : NestedRepeat[RAW-RepeatSome, RAW-RepeatMaybeSome] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-some-maybe : NestedRepeat[RAW-RepeatSome, RAW-RepeatMaybe] → RAW-RepeatMaybeSome ;
  CookBase-NestedRepeat-some-single : NestedRepeat[RAW-RepeatSome, RAW-RepeatSingle] → RAW-RepeatSome ;
  CookBase-NestedRepeat-some-some : NestedRepeat[RAW-RepeatSome, RAW-RepeatSome] → RAW-RepeatSome ;
  CookBase-NestedRepeat-some-somesep :
    NestedRepeat[RAW-RepeatSome, RAW-RepeatSomeSep[#RegExpLeaf2#]]
    →
    RAW-RepeatSomeSep[#RegExpLeaf2#]
   ;
  CookBase-NestedRepeat-somesep-many :
    NestedRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatMaybeSome]
    →
    $[Error, "Cannot nest +_\'...\' in * repeater."]
   ;
  CookBase-NestedRepeat-somesep-maybe :
    NestedRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatMaybe]
    →
    $[Error, "Cannot nest +_\'...\' in ? repeater."]
   ;
  CookBase-NestedRepeat-somesep-single :
    NestedRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatSingle]
    →
    RAW-RepeatSomeSep[#RegExpLeaf1#]
   ;
  CookBase-NestedRepeat-somesep-some :
    NestedRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatSome]
    →
    $[Error, "Cannot nest +_\'...\' in + repeater."]
   ;
  CookBase-NestedRepeat-somesep-somesep :
    NestedRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatSomeSep[#RegExpLeaf2#]]
    →
    $[Error, "Cannot nest +_\'...\' in another +_\'...\' repeater."]
   ;
  NewLine :: Text ;
  Prelude-NewLine-1 : NewLine → $TextCons[$TextChars["\u21b2"], $TextNil] ;
  NoNames :: NameSet ;
  Prelude-NoNames-1 : NoNames → NAME_SET[";"] ;
  NumberToText[$Numeric] :: Text ;
  Prelude-NumberToText-1[Data[#n]] : NumberToText[#n] → $TextCons[$TextChars[$[FormatNumber, #n]], $TextNil] ;
  Or[Boolean, Boolean] :: Boolean ;
  Prelude-Or-1 : Or[B_TRUE, #] → B_TRUE ;
  Prelude-Or-2 : Or[B_FALSE, #] → # ;
  PG[RawModule] :: Text ;
  PG-1 : PG[RAW-top-module[RAW-module[#ModuleName#, #Declarations#]]] → PG1[#ModuleName#, N-resolve[#Declarations#]] ;
  PG-AttributeCollection[FormKind, $String, $Numeric, Text, Boolean] :: Text ;
  PG-AttributeCollection-1 : PG-AttributeCollection[#Kind, #SortName, #Prec, #Construct, B_FALSE] → #Construct ;
  PG-AttributeCollection-2 :
    PG-AttributeCollection[#Kind, #SortName, #Prec, #Construct, B_TRUE]
    →
    $TextCons[
     $TextChars["<"],
     $TextCons[
      $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
      $TextCons[$TextChars["LR "], $TextCons[$TextEmbed[AsText[#Construct]], $TextCons[$TextChars[">"], $TextNil]]]]]
   ;
  PG-AttributeProduction[FormKind, $String, $Numeric, Boolean] :: TextMapSort ;
  PG-AttributeProduction-1 : PG-AttributeProduction[#dontcare, #SortName, #Prec, #IsLeftRecursive] → EmptyTextMap ;
  PG-DeclareRegExp[$List[RawRegExpChoice], $String] :: Text ;
  PG-DeclareRegExp-1 :
    PG-DeclareRegExp[(#RegExpChoice; #RegExp), #id]
    →
    $TextCons[
     $TextEmbed[AsText[PG-DeclareRegExpChoice[#RegExpChoice, #id]]],
     $TextCons[$TextEmbed[AsText[PG-DeclareRegExp[#RegExp, #id]]], $TextNil]]
   ;
  PG-DeclareRegExp-2 : PG-DeclareRegExp[(), #id] → $TextNil ;
  PG-DeclareRegExpChoice[RawRegExpChoice, $String] :: Text ;
  PG-DeclareRegExpChoice-1 :
    PG-DeclareRegExpChoice[RAW-nested[#RegExpSimple1#, #RegExpSimple2#], #id]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["%{"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["/* token "],
        $TextCons[
         $TextChars[#id],
         $TextCons[
          $TextChars[". */"],
          $TextCons[
           $TextBreak["\n"],
           $TextCons[
            $TextChars["MORE : { < "],
            $TextCons[
             $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple1#, #id]]],
             $TextCons[
              $TextChars[" > { nesting = 0; nestedState = curLexState; } : IN_"],
              $TextCons[
               $TextEmbed[AsText[TokenName[#id]]],
               $TextCons[
                $TextChars[" }"],
                $TextCons[
                 $TextBreak["\n"],
                 $TextCons[
                  $TextChars["<IN_"],
                  $TextCons[
                   $TextEmbed[AsText[TokenName[#id]]],
                   $TextCons[
                    $TextChars["> MORE : { < "],
                    $TextCons[
                     $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple1#, #id]]],
                     $TextCons[
                      $TextChars[" > { nesting = 1; } : IN_NESTED_"],
                      $TextCons[
                       $TextEmbed[AsText[TokenName[#id]]],
                       $TextCons[
                        $TextChars[" }"],
                        $TextCons[
                         $TextBreak["\n"],
                         $TextCons[
                          $TextChars["<IN_NESTED_"],
                          $TextCons[
                           $TextEmbed[AsText[TokenName[#id]]],
                           $TextCons[
                            $TextChars["> MORE : { < "],
                            $TextCons[
                             $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple1#, #id]]],
                             $TextCons[
                              $TextChars[" > { nesting++; } }"],
                              $TextCons[
                               $TextBreak["\n"],
                               $TextCons[
                                $TextChars["<IN_NESTED_"],
                                $TextCons[
                                 $TextEmbed[AsText[TokenName[#id]]],
                                 $TextCons[
                                  $TextChars["> MORE : { < "],
                                  $TextCons[
                                   $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple2#, #id]]],
                                   $TextCons[
                                    $TextChars[" > { if (--nesting <= 0) SwitchTo(IN_"],
                                    $TextCons[
                                     $TextEmbed[AsText[TokenName[#id]]],
                                     $TextCons[
                                      $TextChars["); } }"],
                                      $TextCons[
                                       $TextBreak["\n"],
                                       $TextCons[
                                        $TextChars["<IN_"],
                                        $TextCons[
                                         $TextEmbed[AsText[TokenName[#id]]],
                                         $TextCons[
                                          $TextChars["> "],
                                          $TextCons[
                                           $TextChars[$[If, $[Equal, #id, "space$"], "SKIP", "TOKEN"]],
                                           $TextCons[
                                            $TextChars[" : { < T_NESTED_"],
                                            $TextCons[
                                             $TextEmbed[AsText[TokenName[#id]]],
                                             $TextCons[
                                              $TextChars[" : "],
                                              $TextCons[
                                               $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple2#, #id]]],
                                               $TextCons[
                                                $TextChars[" > { SwitchTo(nestedState); } }"],
                                                $TextCons[
                                                 $TextBreak["\n"],
                                                 $TextCons[
                                                  $TextChars["<IN_"],
                                                  $TextCons[
                                                   $TextEmbed[AsText[TokenName[#id]]],
                                                   $TextCons[
                                                    $TextChars[",IN_NESTED_"],
                                                    $TextCons[
                                                     $TextEmbed[AsText[TokenName[#id]]],
                                                     $TextCons[
                                                      $TextChars["> MORE : { < ~[] > }"],
                                                      $TextCons[
                                                       $TextBreak["\n"],
                                                       $TextCons[$TextChars["%}"], $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  PG-DeclareRegExpChoice-2 :
    PG-DeclareRegExpChoice[RAW-RegExpConcat[#RegExpUnits#], #id]
    →
    PG-DeclareRegExpUnits[#RegExpUnits#, #id]
   ;
  PG-DeclareRegExpSimple[RawRegExpSimple, $String] :: Text ;
  PG-DeclareRegExpSimple-1 : PG-DeclareRegExpSimple[RAW-RegExpString[#String#], #id] → $TextNil ;
  PG-DeclareRegExpSimple-2 : PG-DeclareRegExpSimple[RAW-RegExpWord[#Word#], #id] → $TextNil ;
  PG-DeclareRegExpSimple-3 : PG-DeclareRegExpSimple[RAW-RegExpRef[#FragmentRef#], #id] → $TextNil ;
  PG-DeclareRegExpSimple-4 : PG-DeclareRegExpSimple[RAW-RegExpAny, #id] → $TextNil ;
  PG-DeclareRegExpSimple-5 : PG-DeclareRegExpSimple[RAW-RegExpClass[#RegExpClass#], #id] → $TextNil ;
  PG-DeclareRegExpSimple-6 : PG-DeclareRegExpSimple[RAW-RegExpNest[#RegExp#], #id] → PG-DeclareRegExp[#RegExp#, #id] ;
  PG-DeclareRegExpUnit[RawRegExpUnit, $String] :: Text ;
  PG-DeclareRegExpUnit-1 :
    PG-DeclareRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSingle], #id]
    →
    PG-DeclareRegExpSimple[#RegExpSimple#, #id]
   ;
  PG-DeclareRegExpUnit-2 :
    PG-DeclareRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatMaybe], #id]
    →
    PG-DeclareRegExpSimple[#RegExpSimple#, #id]
   ;
  PG-DeclareRegExpUnit-3 :
    PG-DeclareRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatMaybeSome], #id]
    →
    PG-DeclareRegExpSimple[#RegExpSimple#, #id]
   ;
  PG-DeclareRegExpUnit-4 :
    PG-DeclareRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSome], #id]
    →
    PG-DeclareRegExpSimple[#RegExpSimple#, #id]
   ;
  PG-DeclareRegExpUnit-5 :
    PG-DeclareRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSomeSep[#RegExpLeaf#]], #id]
    →
    $TextCons[
     $TextEmbed[AsText[PG-DeclareRegExpSimple[#RegExpSimple#, #id]]],
     $TextCons[$TextEmbed[AsText[PG-DeclareRegExpSimple[#RegExpLeaf#, #id]]], $TextNil]]
   ;
  PG-DeclareRegExpUnits[$List[RawRegExpUnit], $String] :: Text ;
  PG-DeclareRegExpUnits-1 :
    PG-DeclareRegExpUnits[(#RegExpUnit#; #RegExpUnits#), #id]
    →
    $TextCons[
     $TextEmbed[AsText[PG-DeclareRegExpUnit[#RegExpUnit#, #id]]],
     $TextCons[$TextEmbed[AsText[PG-DeclareRegExpUnits[#RegExpUnits#, #id]]], $TextNil]]
   ;
  PG-DeclareRegExpUnits-2 : PG-DeclareRegExpUnits[(), #id] → $TextNil ;
  {$String : SortEntry}PG-Expand[$List[PFK_SORT], $String, $Numeric, Boolean] :: Text ;
  PG-Expand-1 :
    {#ND}
    PG-Expand[#PrecPFKs, #SortName, #Prec, #Last?]
    →
    {#ND}
    PG-LeftRecursive[#PrecPFKs, #SortName, #Prec, #Last?, (), ()]
   ;
  PG-InlineRegExp[$List[RawRegExpChoice], $String] :: Text ;
  PG-InlineRegExp-1 :
    PG-InlineRegExp[(#RegExpChoice; #RegExp), #id]
    →
    $TextCons[
     $TextIndent[$TextCons[$TextEmbed[AsText[PG-InlineRegExpChoice[#RegExpChoice, #id]]], $TextNil]],
     $TextCons[$TextChars[" "], $TextCons[$TextEmbed[AsText[PG-InlineRegExp2[#RegExp, #id]]], $TextNil]]]
   ;
  PG-InlineRegExp2[$List[RawRegExpChoice], $String] :: Text ;
  PG-InlineRegExp2-1 :
    PG-InlineRegExp2[(#RegExpChoice; #RegExp), #id]
    →
    $TextCons[
     $TextChars["| "],
     $TextCons[
      $TextIndent[$TextCons[$TextEmbed[AsText[PG-InlineRegExpChoice[#RegExpChoice, #id]]], $TextNil]],
      $TextCons[$TextChars[" "], $TextCons[$TextEmbed[AsText[PG-InlineRegExp2[#RegExp, #id]]], $TextNil]]]]
   ;
  PG-InlineRegExp2-2 : PG-InlineRegExp2[(), #id] → $TextNil ;
  PG-InlineRegExpChoice[RawRegExpChoice, $String] :: Text ;
  PG-InlineRegExpChoice-1 :
    PG-InlineRegExpChoice[RAW-nested[#RegExpSimple1#, #RegExpSimple2#], #id]
    →
    $TextCons[$TextChars["NESTED_"], $TextCons[$TextEmbed[AsText[TokenName[#id]]], $TextNil]]
   ;
  PG-InlineRegExpChoice-2 :
    PG-InlineRegExpChoice[RAW-RegExpConcat[#RegExpUnits#], #id]
    →
    PG-InlineRegExpUnits[#RegExpUnits#, #id]
   ;
  PG-InlineRegExpClass1[RawRegExpClass, $String] :: Text ;
  PG-InlineRegExpClass1-1 :
    PG-InlineRegExpClass1[RAW-RegExpClassNot[#RegExpClass], #id]
    →
    $TextCons[
     $TextChars["~["],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExpClass2[#RegExpClass, #id, $TextNil]]], $TextCons[$TextChars["]"], $TextNil]]]
   ;
  PG-InlineRegExpClass1-2 :
    PG-InlineRegExpClass1[$[NotMatch, RAW-RegExpClassNot[#_], #RegExpClass], #id]
    →
    $TextCons[
     $TextChars["["],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExpClass2[#RegExpClass, #id, $TextNil]]], $TextCons[$TextChars["]"], $TextNil]]]
   ;
  PG-InlineRegExpClass2[RawRegExpClass, $String, Text] :: Text ;
  PG-InlineRegExpClass2-1 :
    PG-InlineRegExpClass2[RAW-RegExpClassChar[#Char, #RegExpClass], #id, #sep]
    →
    $TextCons[
     $TextEmbed[AsText[#sep]],
     $TextCons[
      $TextEmbed[AsText[PG-InlineRegExpRangeChar[#Char, #id]]],
      $TextCons[$TextEmbed[AsText[PG-InlineRegExpClass2[#RegExpClass, #id, $TextCons[$TextChars[","], $TextNil]]]], $TextNil]]]
   ;
  PG-InlineRegExpClass2-2 :
    PG-InlineRegExpClass2[RAW-RegExpClassRange[#lo, #hi, #RegExpClass], #id, #sep]
    →
    $TextCons[
     $TextEmbed[AsText[#sep]],
     $TextCons[
      $TextEmbed[AsText[PG-InlineRegExpRangeChar[#lo, #id]]],
      $TextCons[
       $TextChars["-"],
       $TextCons[
        $TextEmbed[AsText[PG-InlineRegExpRangeChar[#hi, #id]]],
        $TextCons[$TextEmbed[AsText[PG-InlineRegExpClass2[#RegExpClass, #id, $TextCons[$TextChars[","], $TextNil]]]], $TextNil]]]]]
   ;
  PG-InlineRegExpClass2-3 : PG-InlineRegExpClass2[RAW-RegExpClassDone, #id, #sep] → $TextNil ;
  PG-InlineRegExpRangeChar[$String, $String] :: Text ;
  PG-InlineRegExpRangeChar-1[Data[#RegExpRangeStartChar#]] :
    PG-InlineRegExpRangeChar[#RegExpRangeStartChar#, #id]
    →
    $[
     If,
     $[Equal, #RegExpRangeStartChar#, "\'"],
     $TextCons[$TextChars["\"\'\""], $TextNil],
     $TextCons[$TextChars["\'"], $TextCons[$TextChars[#RegExpRangeStartChar#], $TextCons[$TextChars["\'"], $TextNil]]]]
   ;
  PG-InlineRegExpSimple[RawRegExpSimple, $String] :: Text ;
  PG-InlineRegExpSimple-1 :
    PG-InlineRegExpSimple[RAW-RegExpString[#String#], #id]
    →
    $TextCons[$TextChars[#String#], $TextNil]
   ;
  PG-InlineRegExpSimple-2 :
    PG-InlineRegExpSimple[RAW-RegExpWord[#Word#], #id]
    →
    $TextCons[$TextChars[Stringify[#Word#]], $TextNil]
   ;
  PG-InlineRegExpSimple-3 :
    PG-InlineRegExpSimple[RAW-RegExpRef[#FragmentRef#], #id]
    →
    $TextCons[$TextEmbed[AsText[TokenName[#FragmentRef#]]], $TextNil]
   ;
  PG-InlineRegExpSimple-4 :
    PG-InlineRegExpSimple[RAW-RegExpAny, #id]
    →
    PG-InlineRegExpSimple[
     RAW-RegExpClass[
      RAW-RegExpClassNot[RAW-RegExpClassChar["\\n", RAW-RegExpClassChar["\\r", RAW-RegExpClassChar["\\f", RAW-RegExpClassDone]]]]],
     #id]
   ;
  PG-InlineRegExpSimple-5 :
    PG-InlineRegExpSimple[RAW-RegExpClass[#RegExpClass#], #id]
    →
    PG-InlineRegExpClass1[#RegExpClass#, #id]
   ;
  PG-InlineRegExpSimple-6 :
    PG-InlineRegExpSimple[RAW-RegExpNest[#RegExp#], #id]
    →
    $TextCons[
     $TextChars["( "],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExp[#RegExp#, #id]]], $TextCons[$TextChars[" )"], $TextNil]]]
   ;
  PG-InlineRegExpUnit[RawRegExpUnit, $String] :: Text ;
  PG-InlineRegExpUnit-1 :
    PG-InlineRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSingle], #id]
    →
    PG-InlineRegExpSimple[#RegExpSimple#, #id]
   ;
  PG-InlineRegExpUnit-2 :
    PG-InlineRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatMaybe], #id]
    →
    $TextCons[
     $TextChars["( "],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple#, #id]]], $TextCons[$TextChars[" )?"], $TextNil]]]
   ;
  PG-InlineRegExpUnit-3 :
    PG-InlineRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatMaybeSome], #id]
    →
    $TextCons[
     $TextChars["( "],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple#, #id]]], $TextCons[$TextChars[" )*"], $TextNil]]]
   ;
  PG-InlineRegExpUnit-4 :
    PG-InlineRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSome], #id]
    →
    $TextCons[
     $TextChars["( "],
     $TextCons[$TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple#, #id]]], $TextCons[$TextChars[" )+"], $TextNil]]]
   ;
  PG-InlineRegExpUnit-5 :
    PG-InlineRegExpUnit[RAW-RegExpUnit[#RegExpSimple#, RAW-RepeatSomeSep[#RegExpLeaf#]], #id]
    →
    $TextCons[
     $TextChars["( "],
     $TextCons[
      $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple#, #id]]],
      $TextCons[
       $TextChars[" ( "],
       $TextCons[
        $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpLeaf#, #id]]],
        $TextCons[
         $TextChars[" "],
         $TextCons[$TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpSimple#, #id]]], $TextCons[$TextChars[" )* )"], $TextNil]]]]]]]
   ;
  PG-InlineRegExpUnits[$List[RawRegExpUnit], $String] :: Text ;
  PG-InlineRegExpUnits-1 :
    PG-InlineRegExpUnits[(#RegExpUnit#; #RegExpUnits#), #id]
    →
    $TextCons[
     $TextEmbed[AsText[PG-InlineRegExpUnit[#RegExpUnit#, #id]]],
     $TextCons[$TextChars[" "], $TextCons[$TextEmbed[AsText[PG-InlineRegExpUnits[#RegExpUnits#, #id]]], $TextNil]]]
   ;
  PG-InlineRegExpUnits-2 : PG-InlineRegExpUnits[(), #id] → $TextNil ;
  {$String : SortEntry}PG-LeftRecursive[$List[PFK_SORT], $String, $Numeric, Boolean, $List[PFK_SORT], $List[PFK_SORT]]
    ::
    Text
   ;
  PG-LeftRecursive-1 :
    {#ND}
    PG-LeftRecursive[(#PFK1; #PFKs), #SortName, #Prec, #Last?, #LeftRecursivePFKs, #OtherPFKs]
    →
    {#ND}
    PG-LeftRecursive2[
     PG-isLeftRecursive[#SortName, #Prec, #PFK1],
     #PFK1,
     #PFKs,
     #SortName,
     #Prec,
     #Last?,
     #LeftRecursivePFKs,
     #OtherPFKs]
   ;
  PG-LeftRecursive-2 :
    {#ND}
    PG-LeftRecursive[(), #SortName, #Prec, #Last?, #LeftRecursivePFKs, #OtherPFKs]
    →
    IfEmpty[
     #LeftRecursivePFKs,
     {#ND}
     PG-Produce[#SortName, #Prec, #Last?, #OtherPFKs, C_BUFFER[#SortName, #Prec]],
     {#ND}
     PG-ProduceBody[
      #LeftRecursivePFKs,
      2,
      ($TextCons[$TextChars["#1"], $TextNil]; ),
      ($TextCons[$TextChars["LR"], $TextNil]; ),
      C_LEFTRECURSIVE[#SortName, #Prec],
      in after .
       $TextCons[
        $TextChars["/* Handle left recursion. */"],
        $TextCons[
         $TextBreak["\n"],
         $TextCons[
          $TextChars["<"],
          $TextCons[
           $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
           $TextCons[
            $TextChars["LR #1> ::= "],
            $TextCons[
             $TextIndent[
              $TextCons[$TextEmbed[AsText[in]], $TextCons[$TextBreak["\n"], $TextCons[$TextChars["| {{#1}}"], $TextNil]]]],
             $TextCons[
              $TextBreak["\n"],
              $TextCons[
               $TextChars["."],
               $TextCons[
                $TextBreak["\n"],
                $TextCons[
                 $TextEmbed[AsText[TextFoldMap[after, $TextCons[$TextBreak["\n"], $TextNil]]]],
                 $TextCons[
                  $TextBreak["\n"],
                  $TextCons[
                   $TextEmbed[AsText[{#ND}PG-Produce[#SortName, #Prec, #Last?, #OtherPFKs, C_LEFTRECURSIVE[#SortName, #Prec]]]],
                   $TextNil]]]]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-LeftRecursive2[Boolean, PFK_SORT, $List[PFK_SORT], $String, $Numeric, Boolean, $List[PFK_SORT], $List[PFK_SORT]]
    ::
    Text
   ;
  PG-LeftRecursive2-1 :
    {#ND}
    PG-LeftRecursive2[B_TRUE, #PFK1, #PFKs, #SortName, #Prec, #Last?, #LeftRecursivePFKs, #OtherPFKs]
    →
    {#ND}
    PG-LeftRecursive[#PFKs, #SortName, #Prec, #Last?, Append[#LeftRecursivePFKs, (PG-stripLeftRecursion[#PFK1]; )], #OtherPFKs]
   ;
  PG-LeftRecursive2-2 :
    {#ND}
    PG-LeftRecursive2[B_FALSE, #PFK1, #PFKs, #SortName, #Prec, #Last?, #LeftRecursivePFKs, #OtherPFKs]
    →
    {#ND}
    PG-LeftRecursive[#PFKs, #SortName, #Prec, #Last?, #LeftRecursivePFKs, Append[#OtherPFKs, (#PFK1; )]]
   ;
  PG-Lexical[$List[RawDeclaration]] :: Text ;
  PG-Lexical-1 : PG-Lexical[#Declarations] → PG-Lexical2[#Declarations, B_FALSE, hasskip . PG-Lexical2Tail[hasskip]] ;
  PG-Lexical2[$List[RawDeclaration], Boolean, ha : Boolean . Text] :: Text ;
  Lexcial-done : PG-Lexical2[(), #hasSkip, hasskip_24 . #[hasskip_24]] → #[#hasSkip] ;
  Lexical-alternatives :
    PG-Lexical2[(RAW-anonymous[#SortAlternatives#]; #Declarations#), #hasSkip, hasskip_14 . #[hasskip_14]]
    →
    PG-Lexical2[#Declarations#, #hasSkip, hasskip_81 . #[hasskip_81]]
   ;
  Lexical-attribute :
    PG-Lexical2[
     (RAW-attribute[#AttributeKind#, #AttributeName#, #AttributeForm#, #AttributeOptions#]; #Declarations#),
     #hasSkip,
     hasskip_87 . #[hasskip_87]]
    →
    PG-Lexical2[#Declarations#, #hasSkip, hasskip_61 . #[hasskip_61]]
   ;
  Lexical-fragment :
    PG-Lexical2[(RAW-fragment[#FragmentName#, #RegExp#]; #Declarations#), #hasSkip, hasskip_71 . #[hasskip_71]]
    →
    $TextCons[
     $TextChars["token fragment "],
     $TextCons[
      $TextEmbed[AsText[TokenName[#FragmentName#]]],
      $TextCons[
       $TextChars[" ::= "],
       $TextCons[
        $TextIndent[$TextCons[$TextEmbed[AsText[PG-InlineRegExp[#RegExp#, #FragmentName#]]], $TextNil]],
        $TextCons[
         $TextChars[" . "],
         $TextCons[
          $TextBreak["\n"],
          $TextCons[
           $TextEmbed[AsText[PG-DeclareRegExp[#RegExp#, #FragmentName#]]],
           $TextCons[$TextEmbed[AsText[PG-Lexical2[#Declarations#, #hasSkip, hasskip_20 . #[hasskip_20]]]], $TextNil]]]]]]]]
   ;
  Lexical-module :
    PG-Lexical2[
     (RAW-embedded-module[RAW-module[#ModuleName2#, #Declarations2#]]; #Declarations#),
     #hasSkip,
     hasskip_13 . #[hasskip_13]]
    →
    PG-Lexical2[#Declarations2#, #hasSkip, hasskip_72 . PG-Lexical2[#Declarations#, hasskip_72, hasskip2 . #[hasskip2]]]
   ;
  Lexical-nest :
    PG-Lexical2[(RAW-nestedDeclarations[#Declarations2#]; #Declarations#), #hasSkip, hasskip_88 . #[hasskip_88]]
    →
    PG-Lexical2[#Declarations2#, #hasSkip, hasskip_41 . PG-Lexical2[#Declarations#, hasskip_41, hasskip2_52 . #[hasskip2_52]]]
   ;
  Lexical-rule :
    PG-Lexical2[(RAW-rule[#Rule#]; #Declarations#), #hasSkip, hasskip_9 . #[hasskip_9]]
    →
    PG-Lexical2[#Declarations#, #hasSkip, hasskip_11 . #[hasskip_11]]
   ;
  Lexical-sort :
    PG-Lexical2[(RAW-sort[#SortName#, #Repeat#, #SortAbstraction#]; #Declarations#), #hasSkip, hasskip_98 . #[hasskip_98]]
    →
    PG-Lexical2[#Declarations#, #hasSkip, hasskip_1 . #[hasskip_1]]
   ;
  Lexical-space :
    PG-Lexical2[(RAW-space[#RegExp#]; #Declarations#), #hasSkip, hasskip_180 . #[hasskip_180]]
    →
    $TextCons[
     $TextChars["skip ::= \' \' | "],
     $TextCons[
      $TextIndent[$TextCons[$TextEmbed[AsText[PG-InlineRegExp[#RegExp#, "space$"]]], $TextNil]],
      $TextCons[
       $TextChars[" ."],
       $TextCons[
        $TextBreak["\n"],
        $TextCons[
         $TextEmbed[AsText[PG-DeclareRegExp[#RegExp#, "space$"]]],
         $TextCons[$TextEmbed[AsText[PG-Lexical2[#Declarations#, B_TRUE, hasskip_45 . #[hasskip_45]]]], $TextNil]]]]]]
   ;
  Lexical-token :
    PG-Lexical2[(RAW-token[#SortName#, #RegExp#]; #Declarations#), #hasSkip, hasskip_78 . #[hasskip_78]]
    →
    $TextCons[
     $TextChars["token "],
     $TextCons[
      $TextEmbed[AsText[TokenName[#SortName#]]],
      $TextCons[
       $TextChars[" ::= "],
       $TextCons[
        $TextIndent[$TextCons[$TextEmbed[AsText[PG-InlineRegExp[#RegExp#, #SortName#]]], $TextNil]],
        $TextCons[
         $TextChars[" ."],
         $TextCons[
          $TextBreak["\n"],
          $TextCons[
           $TextEmbed[AsText[PG-DeclareRegExp[#RegExp#, #SortName#]]],
           $TextCons[$TextEmbed[AsText[PG-Lexical2[#Declarations#, #hasSkip, hasskip_186 . #[hasskip_186]]]], $TextNil]]]]]]]]
   ;
  PG-Lexical2Tail[Boolean] :: Text ;
  PG-Lexical2Tail-1 : PG-Lexical2Tail[B_TRUE] → $TextNil ;
  PG-Lexical2Tail-2 :
    PG-Lexical2Tail[B_FALSE]
    →
    $TextCons[$TextChars["skip ::= \" \" ."], $TextCons[$TextBreak["\n"], $TextNil]]
   ;
  {$String : SortEntry}PG-MetaHead[Boolean, $String, $String, Boolean, $Numeric] :: Text ;
  PG-MetaHead-1 : PG-MetaHead[B_FALSE, #SortName, #Name, #isLeftRecursive, #Prec] → $TextNil ;
  PG-MetaHead-2[Data[#SortName], Discard[#Prec]] :
    {#ND; $ParsePrefix : #ParsePrefix}
    PG-MetaHead[B_TRUE, #SortName, #Name, B_FALSE, #Prec]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars[" //<META>"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["   meta1_"],
        $TextCons[
         $TextEmbed[AsText[TokenName[#Name]]],
         $TextCons[
          $TextChars["$$:unmeta:{"],
          $TextCons[
           $TextChars[#ParsePrefix],
           $TextCons[
            $TextChars["RawSorted_"],
            $TextCons[
             $TextChars[#SortName],
             $TextCons[
              $TextChars["}"],
              $TextCons[
               $TextBreak["\n"],
               $TextCons[
                $TextChars["| meta2_"],
                $TextCons[
                 $TextEmbed[AsText[TokenName[#Name]]],
                 $TextCons[
                  $TextChars["$$:unmeta:{"],
                  $TextCons[
                   $TextChars[#ParsePrefix],
                   $TextCons[
                    $TextChars["RawSorted_"],
                    $TextCons[
                     $TextChars[#SortName],
                     $TextCons[
                      $TextChars["}"],
                      $TextCons[
                       $TextBreak["\n"],
                       $TextCons[
                        $TextChars["| "],
                        $TextCons[$TextBreak["\n"], $TextCons[$TextChars["//</META>"], $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]
   ;
  PG-MetaHead-3[Data[#SortName]] :
    {#ND; $ParsePrefix : #ParsePrefix}
    PG-MetaHead[B_TRUE, #SortName, #Name, B_TRUE, #Prec]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars[" //<META>"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["   meta1_"],
        $TextCons[
         $TextEmbed[AsText[TokenName[#Name]]],
         $TextCons[
          $TextChars["$$:unmeta:{"],
          $TextCons[
           $TextChars[#ParsePrefix],
           $TextCons[
            $TextChars["RawSorted_"],
            $TextCons[
             $TextChars[#SortName],
             $TextCons[
              $TextChars["}:#1 <"],
              $TextCons[
               $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
               $TextCons[
                $TextChars["LR #1>"],
                $TextCons[
                 $TextBreak["\n"],
                 $TextCons[
                  $TextChars["| meta2_"],
                  $TextCons[
                   $TextEmbed[AsText[TokenName[#Name]]],
                   $TextCons[
                    $TextChars["$$:unmeta:{"],
                    $TextCons[
                     $TextChars[#ParsePrefix],
                     $TextCons[
                      $TextChars["RawSorted_"],
                      $TextCons[
                       $TextChars[#SortName],
                       $TextCons[
                        $TextChars["}:#1 <"],
                        $TextCons[
                         $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
                         $TextCons[
                          $TextChars["LR #1>"],
                          $TextCons[
                           $TextBreak["\n"],
                           $TextCons[
                            $TextChars["| "],
                            $TextCons[
                             $TextBreak["\n"],
                             $TextCons[$TextChars["//</META>"], $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  PG-MetaTail[Boolean, $String, $String] :: Text ;
  PG-MetaTail-1 : PG-MetaTail[B_FALSE, #SortName, #Name] → $TextNil ;
  PG-MetaTail-2[Data[#SortName]] :
    PG-MetaTail[B_TRUE, #SortName, #Name]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["//<META>"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["%{"],
        $TextCons[
         $TextBreak["\n"],
         $TextCons[
          $TextChars["/* Meta token for "],
          $TextCons[
           $TextChars[#SortName],
           $TextCons[
            $TextChars[". */ "],
            $TextCons[
             $TextBreak["\n"],
             $TextCons[
              $TextChars["TOKEN : { < T_meta1_"],
              $TextCons[
               $TextEmbed[AsText[TokenName[#Name]]],
               $TextCons[
                $TextChars[" : (\"\\u27e8\" (\" \")* "],
                $TextCons[
                 $TextChars[Stringify[#SortName]],
                 $TextCons[
                  $TextChars[" (\" \")* \"\\u27e9\") > }"],
                  $TextCons[
                   $TextBreak["\n"],
                   $TextCons[
                    $TextChars["MORE : { < \"\\u27e8\" (\" \")* "],
                    $TextCons[
                     $TextChars[Stringify[#SortName]],
                     $TextCons[
                      $TextChars[
                       " (\" \")* ~[\"\\u27e8\",\"\\u27e9\"] > { nesting = 0; nestedState = curLexState; } : IN_META_"],
                      $TextCons[
                       $TextEmbed[AsText[TokenName[#Name]]],
                       $TextCons[
                        $TextChars[" }"],
                        $TextCons[
                         $TextBreak["\n"],
                         $TextCons[
                          $TextChars["<IN_META_"],
                          $TextCons[
                           $TextEmbed[AsText[TokenName[#Name]]],
                           $TextCons[
                            $TextChars["> MORE : { \"\\u27e8\" { nesting = 1; } : IN_NESTED_META_"],
                            $TextCons[
                             $TextEmbed[AsText[TokenName[#Name]]],
                             $TextCons[
                              $TextChars[" }"],
                              $TextCons[
                               $TextBreak["\n"],
                               $TextCons[
                                $TextChars["<IN_NESTED_META_"],
                                $TextCons[
                                 $TextEmbed[AsText[TokenName[#Name]]],
                                 $TextCons[
                                  $TextChars["> MORE : { \"\\u27e8\" { nesting++; } }"],
                                  $TextCons[
                                   $TextBreak["\n"],
                                   $TextCons[
                                    $TextChars["<IN_NESTED_META_"],
                                    $TextCons[
                                     $TextEmbed[AsText[TokenName[#Name]]],
                                     $TextCons[
                                      $TextChars["> MORE : { \"\\u27e9\" { if (--nesting <= 0) SwitchTo(IN_META_"],
                                      $TextCons[
                                       $TextEmbed[AsText[TokenName[#Name]]],
                                       $TextCons[
                                        $TextChars["); } }"],
                                        $TextCons[
                                         $TextBreak["\n"],
                                         $TextCons[
                                          $TextChars["<IN_META_"],
                                          $TextCons[
                                           $TextEmbed[AsText[TokenName[#Name]]],
                                           $TextCons[
                                            $TextChars["> TOKEN : { < T_meta2_"],
                                            $TextCons[
                                             $TextEmbed[AsText[TokenName[#Name]]],
                                             $TextCons[
                                              $TextChars[" : \"\\u27e9\" > { SwitchTo(nestedState); } }"],
                                              $TextCons[
                                               $TextBreak["\n"],
                                               $TextCons[
                                                $TextChars["<IN_META_"],
                                                $TextCons[
                                                 $TextEmbed[AsText[TokenName[#Name]]],
                                                 $TextCons[
                                                  $TextChars[",IN_NESTED_META_"],
                                                  $TextCons[
                                                   $TextEmbed[AsText[TokenName[#Name]]],
                                                   $TextCons[
                                                    $TextChars["> MORE : { < ~[] > }"],
                                                    $TextCons[
                                                     $TextBreak["\n"],
                                                     $TextCons[
                                                      $TextChars["%}"],
                                                      $TextCons[
                                                       $TextBreak["\n"],
                                                       $TextCons[
                                                        $TextChars["//</META>"],
                                                        $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-Produce[$String, $Numeric, Boolean, $List[PFK_SORT], CONSUMPTION_SORT] :: Text ;
  PG-Produce-1 :
    {#ND}
    PG-Produce[#SortName, #Prec, #Last?, #PFKs, C_LEFTRECURSIVE[#SortName9, #Prec9]]
    →
    {#ND}
    PG-ProduceBody[
     #PFKs,
     1,
     (),
     (),
     C_LEFTRECURSIVE[#SortName9, #Prec9],
     in_26 after_49 .
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["<"],
        $TextCons[
         $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
         $TextCons[
          $TextChars["> ::= "],
          $TextCons[
           $TextIndent[
            $TextCons[
             $TextEmbed[AsText[{#ND}PG-MetaHead[#Last?, #SortName, #SortName, B_TRUE, #Prec]]],
             $TextCons[$TextEmbed[AsText[in_26]], $TextNil]]],
           $TextCons[
            $TextChars[" ."],
            $TextCons[
             $TextBreak["\n"],
             $TextCons[
              $TextEmbed[AsText[{#ND}PG-MetaTail[#Last?, #SortName, #SortName]]],
              $TextCons[$TextEmbed[AsText[TextFoldMap[after_49, $TextCons[$TextBreak["\n"], $TextNil]]]], $TextNil]]]]]]]]]]
   ;
  PG-Produce-2[Data[#consumer]] :
    {#ND}
    PG-Produce[#SortName, #Prec, #Last?, #PFKs, $[NotMatch, C_LEFTRECURSIVE[#_SortName, #_Prec], #consumer]]
    →
    {#ND}
    PG-ProduceBody[
     #PFKs,
     1,
     (),
     (),
     #consumer,
     in_77 after_29 .
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["<"],
        $TextCons[
         $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
         $TextCons[
          $TextChars["> ::= "],
          $TextCons[
           $TextIndent[
            $TextCons[
             $TextEmbed[AsText[{#ND}PG-MetaHead[#Last?, #SortName, #SortName, B_FALSE, #Prec]]],
             $TextCons[$TextEmbed[AsText[in_77]], $TextCons[$TextChars[" ."], $TextNil]]]],
           $TextCons[
            $TextChars[" "],
            $TextCons[
             $TextBreak["\n"],
             $TextCons[
              $TextEmbed[AsText[{#ND}PG-MetaTail[#Last?, #SortName, #SortName]]],
              $TextCons[$TextEmbed[AsText[TextFoldMap[after_29, $TextCons[$TextBreak["\n"], $TextNil]]]], $TextNil]]]]]]]]]]
   ;
  {$String : SortEntry}PG-ProduceBody[
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_27 : Text after_41 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBody-1[Data[#PFKs]] :
    {#ND}
    PG-ProduceBody[#PFKs, #n, #terms, #words, #consumer, in_94 after_20 . #[in_94, after_20]]
    →
    {#ND}
    PG-ProduceBody1[#PFKs, #n, #terms, #words, #consumer, in_35 after_73 . #[in_35, after_73]]
   ;
  {$String : SortEntry}PG-ProduceBody1[
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_71 : Text after_83 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBody1-1 :
    {#ND}
    PG-ProduceBody1[(), #n, #terms, #words, #consumer, in_59 after_59 . #[in_59, after_59]]
    →
    #[$TextNil, EmptyTextMap]
   ;
  PG-ProduceBody1-2 :
    {#ND}
    PG-ProduceBody1[
     (PFK[RAW-ParsedFormWord[#word, #ParsedForm], #Kind]; #Rest),
     #n,
     #terms,
     #words,
     #consumer,
     in_8 after_43 . #[in_8, after_43]]
    →
    {#ND}
    PG-ProduceBodyWord1[
     #Rest,
     (),
     #word,
     (PFK[#ParsedForm, #Kind]; ),
     #n,
     #terms,
     #words,
     #consumer,
     in_93 after_35 . #[in_93, after_35]]
   ;
  PG-ProduceBody1-3 :
    {#ND}
    PG-ProduceBody1[
     (PFK[RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#ScopeSort, #Prec, #Repeat], #ParsedForm], #Kind]; #Rest),
     #n,
     #terms,
     #words,
     #consumer,
     in_133 after_70 . #[in_133, after_70]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     #Rest,
     (),
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     (PFK[#ParsedForm, #Kind]; ),
     #n,
     #terms,
     #words,
     #consumer,
     in_48 after_27 . #[in_48, after_27]]
   ;
  PG-ProduceBody1-4 :
    {#ND}
    PG-ProduceBody1[
     (PFK[RAW-ParsedFormSpace[#space, #ParsedForm], #Kind]; #Rest),
     #n,
     #terms,
     #words,
     #consumer,
     in_78 after_61 . #[in_78, after_61]]
    →
    {#ND}
    PG-ProduceBody1[(PFK[#ParsedForm, #Kind]; #Rest), #n, #terms, #words, #consumer, in_17 after_97 . #[in_17, after_97]]
   ;
  PG-ProduceBody1-5 :
    {#ND}
    PG-ProduceBody1[
     (PFK[RAW-ParsedFormDone, #Kind]; #Rest),
     #n,
     #terms,
     #words,
     C_BUFFER[#SortName, #Prec],
     in_67 after_66 . #[in_67, after_66]]
    →
    {#ND}
    PG-ProduceBody2[
     #Rest,
     #n,
     #terms,
     #words,
     C_BUFFER[#SortName, #Prec],
     in_15 after_271 . #[in_15, after_271],
     PG-AttributeCollection[#Kind, #SortName, #Prec, ProductionConstruction[#SortName, #Prec, #Kind, #words, #terms], B_FALSE],
     PG-AttributeProduction[#Kind, #SortName, #Prec, B_FALSE]]
   ;
  PG-ProduceBody1-6 :
    {#ND}
    PG-ProduceBody1[
     (PFK[RAW-ParsedFormDone, #Kind]; #Rest),
     #n,
     #terms,
     #words,
     C_LEFTRECURSIVE[#SortName, #Prec],
     in_58 after_87 . #[in_58, after_87]]
    →
    {#ND}
    PG-ProduceBody2[
     #Rest,
     #n,
     #terms,
     #words,
     C_LEFTRECURSIVE[#SortName, #Prec],
     in_31 after_40 . #[in_31, after_40],
     PG-AttributeCollection[#Kind, #SortName, #Prec, ProductionConstruction[#SortName, #Prec, #Kind, #words, #terms], B_TRUE],
     PG-AttributeProduction[#Kind, #SortName, #Prec, B_TRUE]]
   ;
  {$String : SortEntry}PG-ProduceBody2[
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_231 : Text after_13 : TextMapSort . Text,
     Text,
     TextMapSort]
    ::
    Text
   ;
  PG-ProduceBody2-1[Data[#in2, #after2]] :
    {#ND}
    PG-ProduceBody2[#Rest, #n, #terms, #words, #consumer, in_2 after_78 . #[in_2, after_78], #in2, #after2]
    →
    {#ND}
    PG-ProduceBody1[
     #Rest,
     #n,
     #terms,
     #words,
     #consumer,
     in_79 after_12 .
      #[$TextCons[$TextEmbed[AsText[#in2]], $TextCons[$TextEmbed[AsText[in_79]], $TextNil]], JoinTextMaps[#after2, after_12]]]
   ;
  {$String : SortEntry}PG-ProduceBodyTerm1[
     $List[PFK_SORT],
     $List[PFK_SORT],
     RawScopeSort,
     $Numeric,
     RawRepeat,
     FormKind,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_128 : Text after_82 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyTerm1-1 :
    {#ND}
    PG-ProduceBodyTerm1[
     (PFK[RAW-ParsedFormWord[#word1, #ParsedForm1], #Kind1]; #Rest),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_1 after_99 . #[in_1, after_99]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     #Rest,
     Append[#Failed, (PFK[RAW-ParsedFormWord[#word1, #ParsedForm1], #Kind1]; )],
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_97 after_90 . #[in_97, after_90]]
   ;
  PG-ProduceBodyTerm1-2 :
    {#ND}
    PG-ProduceBodyTerm1[
     (PFK[RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#ScopeSort1, #Prec1, #Repeat1], #ParsedForm1], #Kind1]; #Rest),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_29 after_71 . #[in_29, after_71]]
    →
    {#ND}
    PG-ProduceBodyTerm1x[
     SameScopeSort[#ScopeSort1, #Prec1, #Repeat1, #ScopeSort, #Prec, #Repeat],
     #ScopeSort1,
     #Prec1,
     #Repeat1,
     #ParsedForm1,
     #Kind1,
     #Rest,
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_99 after_21 . #[in_99, after_21]]
   ;
  PG-ProduceBodyTerm1-3 :
    {#ND}
    PG-ProduceBodyTerm1[
     (PFK[RAW-ParsedFormSpace[#space1, #ParsedForm1], #Kind1]; #Rest),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_101 after_7 . #[in_101, after_7]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     (PFK[#ParsedForm1, #Kind1]; #Rest),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_165 after_39 . #[in_165, after_39]]
   ;
  PG-ProduceBodyTerm1-4 :
    {#ND}
    PG-ProduceBodyTerm1[
     (PFK[RAW-ParsedFormDone, #Kind1]; #Rest),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_113 after_65 . #[in_113, after_65]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     #Rest,
     Append[#Failed, (PFK[RAW-ParsedFormDone, #Kind1]; )],
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_159 after_45 . #[in_159, after_45]]
   ;
  PG-ProduceBodyTerm1-5 :
    {#ND}
    PG-ProduceBodyTerm1[
     (),
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_32 after_19 . #[in_32, after_19]]
    →
    {#ND}
    PG-ProduceBodyTerm2[
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_63 after_46 . #[in_63, after_46]]
   ;
  {$String : SortEntry}PG-ProduceBodyTerm1x[
     Boolean,
     RawScopeSort,
     $Numeric,
     RawRepeat,
     RawParsedForm,
     FormKind,
     $List[PFK_SORT],
     $List[PFK_SORT],
     RawScopeSort,
     $Numeric,
     RawRepeat,
     FormKind,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_69 : Text after_171 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyTerm1x-1 :
    {#ND}
    PG-ProduceBodyTerm1x[
     B_FALSE,
     #ScopeSort1,
     #Prec1,
     #Repeat1,
     #ParsedForm1,
     #Kind1,
     #Rest,
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_3 after_42 . #[in_3, after_42]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     #Rest,
     Append[
      #Failed,
      (PFK[RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#ScopeSort1, #Prec1, #Repeat1], #ParsedForm1], #Kind1]; )],
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_85 after_11 . #[in_85, after_11]]
   ;
  PG-ProduceBodyTerm1x-2 :
    {#ND}
    PG-ProduceBodyTerm1x[
     B_TRUE,
     #ScopeSort1,
     #Prec1,
     #Repeat1,
     #ParsedForm1,
     #Kind1,
     #Rest,
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_120 after_36 . #[in_120, after_36]]
    →
    {#ND}
    PG-ProduceBodyTerm1[
     #Rest,
     #Failed,
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     Append[#nonterminalPFKs, (PFK[#ParsedForm1, #Kind1]; )],
     #n,
     #terms,
     #words,
     #consumer,
     in_86 after_130 . #[in_86, after_130]]
   ;
  {$String : SortEntry}PG-ProduceBodyTerm2[
     $List[PFK_SORT],
     RawScopeSort,
     $Numeric,
     RawRepeat,
     FormKind,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_95 : Text after_53 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyTerm2-1 :
    {#ND}
    PG-ProduceBodyTerm2[
     (),
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_57 after_153 . #[in_57, after_153]]
    →
    {#ND}
    PG-ProduceBodyTerm3[
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_30 after_94 . #[in_30, after_94]]
   ;
  PG-ProduceBodyTerm2-2 :
    {#ND}
    PG-ProduceBodyTerm2[
     (#PFK1; #PFKs),
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_11 after_106 . #[in_11, after_106]]
    →
    {#ND}
    PG-ProduceBodyTerm3[
     #ScopeSort,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in1 after1 .
      {#ND}
      PG-ProduceBody[
       (#PFK1; #PFKs),
       #n,
       #terms,
       #words,
       #consumer,
       in2 after2 .
        #[$TextCons[
          $TextChars["("],
          $TextCons[
           $TextEmbed[AsText[in1]],
           $TextCons[
            $TextBreak["\n"],
            $TextCons[$TextChars["| "], $TextCons[$TextEmbed[AsText[in2]], $TextCons[$TextChars[")"], $TextNil]]]]]],
JoinTextMaps[after1, after2]]]]
   ;
  {$String : SortEntry}PG-ProduceBodyTerm3[
     RawScopeSort,
     $Numeric,
     RawRepeat,
     FormKind,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_166 : Text after_72 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyTerm3-1 :
    {#ND}
    PG-ProduceBodyTerm3[
     RAW-ScopeSortBinder[#Variable#, #Sort#],
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_74 after_25 . #[in_74, after_25]]
    →
    IfSingletonRepeat[
     #Repeat,
     {#ND}
     PG-ProduceBody[
      #nonterminalPFKs,
      #n,
      #terms,
      Append[#words, ($TextCons[$TextChars[SortVar[#Sort#]], $TextNil]; )],
      #consumer,
      in_46 after_58 .
       #[$TextCons[
         $TextIndent[
          $TextCons[
           $TextChars[" <"],
           $TextCons[
            $TextEmbed[AsText[ProductionNameWithPrec[SortName[#Sort#], #Prec]]],
            $TextCons[
             $TextChars[">^"],
             $TextCons[
              $TextChars[#Variable#],
              $TextCons[
               $TextChars[" "],
               $TextCons[$TextIndent[$TextCons[$TextEmbed[AsText[in_46]], $TextNil]], $TextCons[$TextChars[" "], $TextNil]]]]]]]],
         $TextNil],
after_58]],
     CookError["Cannot use repeat specification on binder"]]
   ;
  PG-ProduceBodyTerm3-2 :
    {#ND}
    PG-ProduceBodyTerm3[
     RAW-ScopeSort[#Sort#, #Repeat#, #SubstituteSorts#],
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_22 after_95 . #[in_22, after_95]]
    →
    {#ND}
    PG-ProduceBodyTerm4[
     #Sort#,
     #SubstituteSorts#,
     ProductionNameWithPrecRepeat[SortName[#Sort#], #Prec, NestedRepeat[#Repeat#, #Repeat]],
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_55 after_163 . #[in_55, after_163]]
   ;
  {$String : SortEntry}PG-ProduceBodyTerm4[
     RawSort,
     $List[RawSubstituteSort],
     Text,
     $Numeric,
     RawRepeat,
     FormKind,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_25 : Text after_22 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyTerm4-1[Data[#consumer]] :
    {#ND}
    PG-ProduceBodyTerm4[
     #Sort#,
     #SubstituteSorts#,
     #ProductionName,
     #Prec,
     #Repeat,
     #Kind,
     #nonterminalPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_40 after_37 . #[in_40, after_37]]
    →
    {#ND}
    PG-ProduceBody[
     #nonterminalPFKs,
     $[Plus, #n, 1],
     Append[#terms, ($TextCons[$TextChars[SortMetaVar[#Sort#, #n]], $TextNil]; )],
     Append[#words, ($TextCons[$TextChars[SortName[#Sort#]], $TextNil]; )],
     #consumer,
     in_186 after_86 .
      #[$TextCons[
        $TextIndent[
         $TextCons[
          $TextChars[" <"],
          $TextCons[
           $TextEmbed[AsText[#ProductionName]],
           $TextCons[
            $TextChars[">"],
            $TextCons[
             $TextEmbed[
              AsText[
               WrappedTextFold[
                Map[s_188 . ExtractSubstitutedSort[s_188], #SubstituteSorts#],
                $TextCons[$TextChars["["], $TextNil],
                $TextCons[$TextChars[","], $TextNil],
                $TextCons[$TextChars["]"], $TextNil]]]],
             $TextCons[
              $TextEmbed[
               AsText[
                VariableMarker[#Kind, $TextCons[$TextChars[":"], $TextCons[$TextChars[SortMetaVar[#Sort#, #n]], $TextNil]]]]],
              $TextCons[
               $TextChars[" "],
               $TextCons[$TextIndent[$TextCons[$TextEmbed[AsText[in_186]], $TextNil]], $TextCons[$TextChars[" "], $TextNil]]]]]]]]],
        $TextNil],
after_86]]
   ;
  {$String : SortEntry}PG-ProduceBodyWord1[
     $List[PFK_SORT],
     $List[PFK_SORT],
     $String,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_19 : Text after_10 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyWord1-1[Data[#word1, #word], Share[#ParsedForm1, #Kind1, #Rest, #wordPFKs, #n, #terms, #words, #consumer]] :
    {#ND}
    PG-ProduceBodyWord1[
     (PFK[RAW-ParsedFormWord[#word1, #ParsedForm1], #Kind1]; #Rest),
     #Failed,
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_49 after_115 . #[in_49, after_115]]
    →
    $[
     If,
     $[Equal, #word, #word1],
     {#ND}
     PG-ProduceBodyWord1[
      #Rest,
      #Failed,
      #word,
      Append[#wordPFKs, (PFK[#ParsedForm1, #Kind1]; )],
      #n,
      #terms,
      #words,
      #consumer,
      in_38 after_88 . #[in_38, after_88]],
     {#ND}
     PG-ProduceBodyWord1[
      #Rest,
      Append[#Failed, (PFK[RAW-ParsedFormWord[#word1, #ParsedForm1], #Kind1]; )],
      #word,
      #wordPFKs,
      #n,
      #terms,
      #words,
      #consumer,
      in_43 after_172 . #[in_43, after_172]]]
   ;
  PG-ProduceBodyWord1-2 :
    {#ND}
    PG-ProduceBodyWord1[
     (PFK[RAW-ParsedFormTerm[#ScopeSortPrecRepeat1, #ParsedForm1], #Kind]; #Rest),
     #Failed,
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_173 after_85 . #[in_173, after_85]]
    →
    {#ND}
    PG-ProduceBodyWord1[
     #Rest,
     Append[#Failed, (PFK[RAW-ParsedFormTerm[#ScopeSortPrecRepeat1, #ParsedForm1], #Kind]; )],
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_210 after_147 . #[in_210, after_147]]
   ;
  PG-ProduceBodyWord1-3 :
    {#ND}
    PG-ProduceBodyWord1[
     (PFK[RAW-ParsedFormSpace[#space1, #ParsedForm1], #Kind1]; #Rest),
     #Failed,
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_98 after_2 . #[in_98, after_2]]
    →
    {#ND}
    PG-ProduceBodyWord1[
     (PFK[#ParsedForm1, #Kind1]; #Rest),
     #Failed,
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_7 after_162 . #[in_7, after_162]]
   ;
  PG-ProduceBodyWord1-4 :
    {#ND}
    PG-ProduceBodyWord1[
     (PFK[RAW-ParsedFormDone, #Kind]; #Rest),
     #Failed,
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_204 after_234 . #[in_204, after_234]]
    →
    {#ND}
    PG-ProduceBodyWord1[
     #Rest,
     Append[#Failed, (PFK[RAW-ParsedFormDone, #Kind]; )],
     #word,
     #wordPFKs,
     #n,
     #terms,
     #words,
     #consumer,
     in_12 after_123 . #[in_12, after_123]]
   ;
  PG-ProduceBodyWord1-5 :
    {#ND}
    PG-ProduceBodyWord1[(), #Failed, #word, #wordPFKs, #n, #terms, #words, #consumer, in_84 after_93 . #[in_84, after_93]]
    →
    {#ND}
    PG-ProduceBodyWord2[#Failed, #word, #wordPFKs, #n, #terms, #words, #consumer, in_90 after_38 . #[in_90, after_38]]
   ;
  {$String : SortEntry}PG-ProduceBodyWord2[
     $List[PFK_SORT],
     $String,
     $List[PFK_SORT],
     $Numeric,
     $List[Text],
     $List[Text],
     CONSUMPTION_SORT,
     in_150 : Text after_154 : TextMapSort . Text]
    ::
    Text
   ;
  PG-ProduceBodyWord2-1 :
    {#ND}
    PG-ProduceBodyWord2[(), #word, #wordPFKs, #n, #terms, #words, #consumer, in_65 after_122 . #[in_65, after_122]]
    →
    {#ND}
    PG-ProduceBody[
     #wordPFKs,
     #n,
     #terms,
     Append[#words, ($TextCons[$TextChars[$[Mangle, #word]], $TextNil]; )],
     #consumer,
     in1_64 after1_29 .
      #[$TextCons[
        $TextEmbed[AsText[ProductionWord[#word]]],
        $TextCons[$TextIndent[$TextCons[$TextEmbed[AsText[in1_64]], $TextNil]], $TextNil]],
after1_29]]
   ;
  PG-ProduceBodyWord2-2 :
    {#ND}
    PG-ProduceBodyWord2[(#PFK1; #PFKs), #word, #wordPFKs, #n, #terms, #words, #consumer, in_6 after_30 . #[in_6, after_30]]
    →
    {#ND}
    PG-ProduceBody[
     #wordPFKs,
     #n,
     #terms,
     Append[#words, ($TextCons[$TextChars[$[Mangle, #word]], $TextNil]; )],
     #consumer,
     in1_28 after1_99 .
      {#ND}
      PG-ProduceBody[
       (#PFK1; #PFKs),
       #n,
       #terms,
       #words,
       #consumer,
       in2_0 after2_41 .
        #[$TextCons[
          $TextChars["("],
          $TextCons[
           $TextEmbed[AsText[ProductionWord[#word]]],
           $TextCons[
            $TextEmbed[AsText[in1_28]],
            $TextCons[
             $TextBreak["\n"],
             $TextCons[$TextChars["| "], $TextCons[$TextEmbed[AsText[in2_0]], $TextCons[$TextChars[")"], $TextNil]]]]]]],
JoinTextMaps[after1_99, after2_41]]]]
   ;
  PG-ProduceDerived[DERIVED_SORT] :: TextMapSort ;
  PG-ProduceDerived-1 :
    PG-ProduceDerived[DERIVED[#SortName, #Prec, #Repeat]]
    →
    PG-ProduceRepeat[#Repeat, #SortName, #Prec, ProductionNameWithPrecRepeat[#SortName, #Prec, #Repeat]]
   ;
  PG-ProduceRepeat[RawRepeat, $String, $Numeric, Text] :: TextMapSort ;
  PG-ProduceRepeat-1 : PG-ProduceRepeat[RAW-RepeatSingle, #s, #p, #name] → EmptyTextMap ;
  PG-ProduceRepeat-2[Data[#s]] :
    PG-ProduceRepeat[RAW-RepeatMaybe, #s, #p, #name]
    →
    SingletonTextMap[
     TextToString[#name],
     $TextCons[
      $TextBreak["\n"],
      $TextCons[
       $TextChars["<"],
       $TextCons[
        $TextEmbed[AsText[#name]],
        $TextCons[
         $TextChars["> ::= "],
         $TextCons[
          $TextEmbed[AsText[PG-MetaHead[B_TRUE, $[':', #s, "?"], TextToString[#name], B_FALSE, 0]]],
          $TextCons[
           $TextChars["( <"],
           $TextCons[
            $TextEmbed[AsText[ProductionNameWithPrec[#s, #p]]],
            $TextCons[
             $TextChars[">:#1 {{ $Cons[#1,$Nil] }} | {{ $Nil }} )."],
             $TextCons[
              $TextBreak["\n"],
              $TextCons[$TextEmbed[AsText[PG-MetaTail[B_TRUE, $[':', #s, "?"], TextToString[#name]]]], $TextNil]]]]]]]]]]]
   ;
  PG-ProduceRepeat-3[Data[#s]] :
    PG-ProduceRepeat[RAW-RepeatMaybeSome, #s, #p, #name]
    →
    SingletonTextMap[
     TextToString[#name],
     $TextCons[
      $TextBreak["\n"],
      $TextCons[
       $TextChars["<"],
       $TextCons[
        $TextEmbed[AsText[#name]],
        $TextCons[
         $TextChars["> ::= "],
         $TextCons[
          $TextEmbed[AsText[PG-MetaHead[B_TRUE, $[':', #s, "*"], TextToString[#name], B_FALSE, 0]]],
          $TextCons[
           $TextChars["( <"],
           $TextCons[
            $TextEmbed[AsText[ProductionNameWithPrec[#s, #p]]],
            $TextCons[
             $TextChars[">:#1 <"],
             $TextCons[
              $TextEmbed[AsText[#name]],
              $TextCons[
               $TextChars[">:#2 {{ $Cons[#1,#2] }} | {{ $Nil }} )."],
               $TextCons[
                $TextBreak["\n"],
                $TextCons[$TextEmbed[AsText[PG-MetaTail[B_TRUE, $[':', #s, "*"], TextToString[#name]]]], $TextNil]]]]]]]]]]]]]
   ;
  PG-ProduceRepeat-4[Data[#s]] :
    PG-ProduceRepeat[RAW-RepeatSome, #s, #p, #name]
    →
    SingletonTextMap[
     TextToString[#name],
     $TextCons[
      $TextBreak["\n"],
      $TextCons[
       $TextChars["<"],
       $TextCons[
        $TextEmbed[AsText[#name]],
        $TextCons[
         $TextChars["> ::= "],
         $TextCons[
          $TextEmbed[AsText[PG-MetaHead[B_TRUE, $[':', #s, "+"], TextToString[#name], B_FALSE, 0]]],
          $TextCons[
           $TextChars[" <"],
           $TextCons[
            $TextEmbed[AsText[ProductionNameWithPrec[#s, #p]]],
            $TextCons[
             $TextChars[">:#1 ( <"],
             $TextCons[
              $TextEmbed[AsText[#name]],
              $TextCons[
               $TextChars[">:#2 {{ $Cons[#1,#2] }} | {{ $Cons[#1,$Nil] }} ) ."],
               $TextCons[
                $TextBreak["\n"],
                $TextCons[$TextEmbed[AsText[PG-MetaTail[B_TRUE, $[':', #s, "+"], TextToString[#name]]]], $TextNil]]]]]]]]]]]]]
   ;
  PG-ProduceRepeat-5[Data[#s]] :
    PG-ProduceRepeat[RAW-RepeatSomeSep[#RegExpLeaf#], #s, #p, #name]
    →
    SingletonTextMap[
     TextToString[#name],
     $TextCons[
      $TextBreak["\n"],
      $TextCons[
       $TextChars["<"],
       $TextCons[
        $TextEmbed[AsText[#name]],
        $TextCons[
         $TextChars["> ::= "],
         $TextCons[
          $TextEmbed[
           AsText[PG-MetaHead[B_TRUE, RegExpLeafSuffix[#RegExpLeaf#, $[':', #s, "+_"]], TextToString[#name], B_FALSE, 0]]],
          $TextCons[
           $TextChars[" <"],
           $TextCons[
            $TextEmbed[AsText[ProductionNameWithPrec[#s, #p]]],
            $TextCons[
             $TextChars[">:#1 ( "],
             $TextCons[
              $TextEmbed[AsText[PG-InlineRegExpSimple[#RegExpLeaf#, ""]]],
              $TextCons[
               $TextChars[" <"],
               $TextCons[
                $TextEmbed[AsText[#name]],
                $TextCons[
                 $TextChars[">:#2 {{ $Cons[#1,#2] }} | {{ $Cons[#1,$Nil] }} ) ."],
                 $TextCons[
                  $TextBreak["\n"],
                  $TextCons[
                   $TextEmbed[
                    AsText[PG-MetaTail[B_TRUE, RegExpLeafSuffix[#RegExpLeaf#, $[':', #s, "+_"]], TextToString[#name]]]],
                   $TextNil]]]]]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-Production[$String] :: Text ;
  PG-Production-1[Data[#SortName]] :
    {#ND}
    PG-Production[#SortName]
    →
    {#ND}
    PG-Production1[$[{#ND}Get, #SortName, SE_NONE]]
   ;
  PG-Production-Attribute[RawAttributeKind, $String, RawAttributeForm, $List[RawAttributeOption]] :: Text ;
  PG-Production-Attribute-1 :
    PG-Production-Attribute[#Kind, #Name, #AttributeForm, #AttributeOptions]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["//<META>"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["<RawAttribute"],
        $TextCons[
         $TextEmbed[AsText[AttributeKindCategory[#Kind]]],
         $TextCons[
          $TextChars["_"],
          $TextCons[
           $TextChars[#Name],
           $TextCons[
            $TextChars["> (RAW) ::= {$Attribute} "],
            $TextCons[
             $TextEmbed[AsText[AttributeKindIndicator[#Kind]]],
             $TextCons[
              $TextChars[" (RAW_TOKEN_"],
              $TextCons[
               $TextChars[#Name],
               $TextCons[
                $TextChars["$) "],
                $TextCons[
                 $TextEmbed[AsText[AttributeFormSyntax[#AttributeForm, #AttributeOptions]]],
                 $TextCons[
                  $TextChars[" ."],
                  $TextCons[
                   $TextBreak["\n"],
                   $TextCons[
                    $TextChars["token RAW_TOKEN_"],
                    $TextCons[
                     $TextChars[#Name],
                     $TextCons[
                      $TextChars[" (RAW) ::= \""],
                      $TextCons[
                       $TextChars[#Name],
                       $TextCons[
                        $TextChars["\" . "],
                        $TextCons[$TextBreak["\n"], $TextCons[$TextChars["//</META>"], $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-Production-Defines[$List[Define], $String, $Numeric, $List[PFK_SORT]] :: Text ;
  PG-Production-Defines-1 : {#ND}PG-Production-Defines[(), #SortName, #Prec, ()] → $TextNil ;
  PG-Production-Defines-2 :
    {#ND}
    PG-Production-Defines[(), #SortName, #Prec, (#PFK1; #PFKs)]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["/* Productions for "],
      $TextCons[
       $TextChars[#SortName],
       $TextCons[
        $TextChars[" sort with (highest) precedence "],
        $TextCons[
         $TextChars[$[FormatNumber, #Prec]],
         $TextCons[
          $TextChars[". */"],
          $TextCons[
           $TextBreak["\n"],
           $TextCons[$TextEmbed[AsText[{#ND}PG-Expand[(#PFK1; #PFKs), #SortName, #Prec, B_TRUE]]], $TextNil]]]]]]]]
   ;
  PG-Production-Defines-3 :
    {#ND}
    PG-Production-Defines[((D_ABSTRACTION a_76 . #Define1[a_76]); #Defines), #SortName, #Prec, #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines[(#Define1[dummy]; #Defines), #SortName, #Prec, #PrecPFKs]
   ;
  PG-Production-Defines-4 :
    {#ND}
    PG-Production-Defines[(D_RULE[#Rule, #RuleSort, #IsData]; #Defines), #SortName, #Prec, #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines[#Defines, #SortName, #Prec, #PrecPFKs]
   ;
  PG-Production-Defines-5 :
    {#ND}
    PG-Production-Defines[(D_FORM[#Form1, #Kind1]; #Defines), #SortName, #Prec, #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines2[#Form1, #Kind1, #Defines, #SortName, #Prec, #PrecPFKs]
   ;
  PG-Production-Defines-6 :
    {#ND}
    PG-Production-Defines[(D_SYNTHESIZES[#AttributeName1]; #Defines), #SortName, #Prec, #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines[#Defines, #SortName, #Prec, #PrecPFKs]
   ;
  {$String : SortEntry}PG-Production-Defines2[RawForm, FormKind, $List[Define], $String, $Numeric, $List[PFK_SORT]]
    ::
    Text
   ;
  PG-Production-Defines2-1 :
    {#ND}
    PG-Production-Defines2[
     RAW-FormParsedSorted[#Sort1, #ParsedForm1, #Prec1, #InheritedRefs],
     #Kind1,
     #Defines,
     #SortName,
     #Prec,
     #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines3[#ParsedForm1, #Prec1, #Kind1, #Defines, #SortName, #Prec, #PrecPFKs]
   ;
  PG-Production-Defines2-2 :
    {#ND}
    PG-Production-Defines2[RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs], #Kind1, #Defines, #SortName, #Prec, #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines3[#ParsedForm1, #Prec1, #Kind1, #Defines, #SortName, #Prec, #PrecPFKs]
   ;
  PG-Production-Defines2-3 :
    {#ND}
    PG-Production-Defines2[
     RAW-FormConstruction[#Constructor, #ScopeSortList, #InheritedRefs],
     #Kind1,
     #Defines,
     #SortName,
     #Prec,
     #PrecPFKs]
    →
    {#ND}
    PG-Production-Defines[#Defines, #SortName, #Prec, #PrecPFKs]
   ;
  {$String : SortEntry}PG-Production-Defines3[RawParsedForm, $Numeric, FormKind, $List[Define], $String, $Numeric, $List[PFK_SORT]]
    ::
    Text
   ;
  PG-Production-Defines3-1[Data[#Prec1, #Prec], Share[#ParsedForm1, #Kind1, #Defines]] :
    {#ND}
    PG-Production-Defines3[#ParsedForm1, #Prec1, #Kind1, #Defines, #SortName, #Prec, ()]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec],
     {#ND}
     PG-Production-Defines[#Defines, #SortName, #Prec, (PFK[#ParsedForm1, #Kind1]; )],
     $TextCons[
      $TextBreak["\n"],
      $TextCons[
       $TextChars["<"],
       $TextCons[
        $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
        $TextCons[
         $TextChars["> ::= <"],
         $TextCons[
          $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec1]]],
          $TextCons[
           $TextChars["> ."],
           $TextCons[
            $TextBreak["\n"],
            $TextCons[
             $TextEmbed[AsText[{#ND}PG-Production-Defines[#Defines, #SortName, #Prec1, (PFK[#ParsedForm1, #Kind1]; )]]],
             $TextNil]]]]]]]]]
   ;
  PG-Production-Defines3-2[Data[#Prec1, #Prec], Share[#ParsedForm1, #Kind1, #Defines, #PFK, #PFKs]] :
    {#ND}
    PG-Production-Defines3[#ParsedForm1, #Prec1, #Kind1, #Defines, #SortName, #Prec, (#PFK; #PFKs)]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec],
     {#ND}
     PG-Production-Defines[#Defines, #SortName, #Prec, Append[(#PFK; #PFKs), (PFK[#ParsedForm1, #Kind1]; )]],
     $TextCons[
      $TextChars["/* Productions for "],
      $TextCons[
       $TextChars[#SortName],
       $TextCons[
        $TextChars[" sort with precedence "],
        $TextCons[
         $TextChars[$[FormatNumber, #Prec]],
         $TextCons[
          $TextChars[". */"],
          $TextCons[
           $TextBreak["\n"],
           $TextCons[
            $TextEmbed[AsText[{#ND}PG-Expand[(#PFK; #PFKs), #SortName, #Prec, B_FALSE]]],
            $TextCons[
             $TextBreak["\n"],
             $TextCons[
              $TextEmbed[AsText[{#ND}PG-Production-Defines[#Defines, #SortName, #Prec1, (PFK[#ParsedForm1, #Kind1]; )]]],
              $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-Production-RawDefines[$List[Define], $String] :: Text ;
  PG-Production-RawDefines-1 :
    {#ND; $ParsePrefix : #ParsePrefix}
    PG-Production-RawDefines[#Defines, #SortName]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["//<META>"],
      $TextCons[
       $TextBreak["\n"],
       $TextCons[
        $TextChars["/* Raw terms of "],
        $TextCons[
         $TextChars[#SortName],
         $TextCons[
          $TextChars[" production sort. */"],
          $TextCons[
           $TextBreak["\n"],
           $TextCons[
            $TextChars["<Raw_"],
            $TextCons[
             $TextChars[#SortName],
             $TextCons[
              $TextChars["> (RAW) ::= (RAW_TOKEN_"],
              $TextCons[
               $TextChars[#SortName],
               $TextCons[
                $TextChars[")?  <RawPresorted_"],
                $TextCons[
                 $TextChars[#SortName],
                 $TextCons[
                  $TextChars["> ."],
                  $TextCons[
                   $TextBreak["\n"],
                   $TextCons[
                    $TextChars["<RawSorted_"],
                    $TextCons[
                     $TextChars[#SortName],
                     $TextCons[
                      $TextChars["> (RAW) ::= RAW_TOKEN_"],
                      $TextCons[
                       $TextChars[#SortName],
                       $TextCons[
                        $TextChars[" <RawPresorted_"],
                        $TextCons[
                         $TextChars[#SortName],
                         $TextCons[
                          $TextChars["> ."],
                          $TextCons[
                           $TextBreak["\n"],
                           $TextCons[
                            $TextChars["<RawPresorted_"],
                            $TextCons[
                             $TextChars[#SortName],
                             $TextCons[
                              $TextChars["> (RAW) ::="],
                              $TextCons[
                               $TextBreak["\n"],
                               $TextCons[
                                $TextChars["  {RAW-VariableUseSorted} ({"],
                                $TextCons[
                                 $TextChars[#SortName],
                                 $TextCons[
                                  $TextChars["}) ({RAW-RepeatSingle}) RAW_VARIABLE$ <RawAttributes>"],
                                  $TextCons[
                                   $TextBreak["\n"],
                                   $TextCons[
                                    $TextChars["| {RAW-MetaApplicationSorted} ({"],
                                    $TextCons[
                                     $TextChars[#SortName],
                                     $TextCons[
                                      $TextChars[
                                       "}) ({RAW-RepeatSingle}) RAW_META_VARIABLE$ ( RAW_LBRACKET <RawTerms>  RAW_RBRACKET | {$Nil} ) <RawAttributes>"],
                                      $TextCons[
                                       $TextBreak["\n"],
                                       $TextCons[
                                        $TextChars["| <Parsed {{\""],
                                        $TextCons[
                                         $TextChars[#SortName],
                                         $TextCons[
                                          $TextChars["\"}}>"],
                                          $TextCons[
                                           $TextBreak["\n"],
                                           $TextCons[
                                            $TextEmbed[AsText[{#ND}PG-Production-RawDefines1[#Defines, #SortName]]],
                                            $TextCons[
                                             $TextChars[" )."],
                                             $TextCons[
                                              $TextBreak["\n"],
                                              $TextCons[
                                               $TextChars["token RAW_TOKEN_"],
                                               $TextCons[
                                                $TextChars[#SortName],
                                                $TextCons[
                                                 $TextChars[" (RAW) ::= \""],
                                                 $TextCons[
                                                  $TextChars[#SortName],
                                                  $TextCons[
                                                   $TextChars["\" ."],
                                                   $TextCons[
                                                    $TextBreak["\n"],
                                                    $TextCons[
                                                     $TextEmbed[
                                                      AsText[{#ND}PG-Production-RawDefinesTokens[#Defines, #SortName]]],
                                                     $TextCons[
                                                      $TextBreak["\n"],
                                                      $TextCons[
                                                       $TextChars["//</META>"],
                                                       $TextCons[$TextBreak["\n\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  {$String : SortEntry}PG-Production-RawDefines1[$List[Define], $String] :: Text ;
  PG-Production-RawDefines1-1 :
    {#ND}
    PG-Production-RawDefines1[((D_ABSTRACTION a_83 . #Define1[a_83]); #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefines1[(#Define1[dummy]; #Defines), #SortName]
   ;
  PG-Production-RawDefines1-2 :
    {#ND}
    PG-Production-RawDefines1[(D_RULE[#Rule, #RuleSort, #IsData]; #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefines1[#Defines, #SortName]
   ;
  PG-Production-RawDefines1-3 :
    {#ND}
    PG-Production-RawDefines1[(D_FORM[#Form1, #Kind1]; #Defines), #SortName]
    →
    $TextCons[
     $TextEmbed[AsText[{#ND}PG-Production-RawForm[#Form1, #Kind1, #SortName]]],
     $TextCons[$TextEmbed[AsText[{#ND}PG-Production-RawDefines1[#Defines, #SortName]]], $TextNil]]
   ;
  PG-Production-RawDefines1-4 :
    {#ND}
    PG-Production-RawDefines1[(D_SYNTHESIZES[#AttributeName1]; #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefines1[#Defines, #SortName]
   ;
  PG-Production-RawDefines1-5 : {#ND}PG-Production-RawDefines1[(), #SortName] → $TextNil ;
  {$String : SortEntry}PG-Production-RawDefinesTokens[$List[Define], $String] :: Text ;
  PG-Production-RawDefinesTokens-1 :
    {#ND}
    PG-Production-RawDefinesTokens[((D_ABSTRACTION a_44 . #Define1[a_44]); #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefinesTokens[(#Define1[dummy]; #Defines), #SortName]
   ;
  PG-Production-RawDefinesTokens-2 :
    {#ND}
    PG-Production-RawDefinesTokens[(D_RULE[#Rule, #RuleSort, #IsData]; #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefinesTokens[#Defines, #SortName]
   ;
  PG-Production-RawDefinesTokens-3 :
    {#ND}
    PG-Production-RawDefinesTokens[(D_FORM[#Form1, #Kind1]; #Defines), #SortName]
    →
    $TextCons[
     $TextEmbed[AsText[{#ND}PG-Production-RawFormToken[#Form1, #Kind1, #SortName]]],
     $TextCons[$TextEmbed[AsText[{#ND}PG-Production-RawDefinesTokens[#Defines, #SortName]]], $TextNil]]
   ;
  PG-Production-RawDefinesTokens-4 :
    {#ND}
    PG-Production-RawDefinesTokens[(D_SYNTHESIZES[#AttributeName1]; #Defines), #SortName]
    →
    {#ND}
    PG-Production-RawDefinesTokens[#Defines, #SortName]
   ;
  PG-Production-RawDefinesTokens-5 : {#ND}PG-Production-RawDefinesTokens[(), #SortName] → $TextNil ;
  {$String : SortEntry}PG-Production-RawForm[RawForm, FormKind, $String] :: Text ;
  PG-Production-RawForm-1 :
    {#ND}
    PG-Production-RawForm[RAW-FormParsedSorted[#Sort1, #ParsedForm1, #Prec1, #InheritedRefs], #Kind1, #SortName]
    →
    $TextNil
   ;
  PG-Production-RawForm-2 :
    {#ND}
    PG-Production-RawForm[RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs], #Kind1, #SortName]
    →
    $TextNil
   ;
  PG-Production-RawForm-3 :
    {#ND}
    PG-Production-RawForm[RAW-FormConstruction[#Constructor, #ScopeSortList, #InheritedRefs], #Kind1, #SortName]
    →
    $TextCons[
     $TextChars["| RAW_TOKEN_"],
     $TextCons[
      $TextChars[#Constructor],
      $TextCons[
       $TextChars["$ "],
       $TextCons[
        $TextEmbed[
         AsText[
          IfEmpty[
           #ScopeSortList,
           $TextCons[$TextChars["( RAW_LPAREN RAW_RPAREN )? "], $TextNil],
           $TextCons[
            $TextChars[" RAW_LPAREN "],
            $TextCons[
             $TextEmbed[AsText[{#ND}PG-Production-RawScopeSortList[#ScopeSortList, #SortName, B_TRUE]]],
             $TextCons[$TextChars[" RAW_RPAREN "], $TextNil]]]]]],
        $TextCons[$TextBreak["\n"], $TextNil]]]]]
   ;
  {$String : SortEntry}PG-Production-RawFormToken[RawForm, FormKind, $String] :: Text ;
  PG-Production-RawFormToken-1 :
    {#ND}
    PG-Production-RawFormToken[RAW-FormParsedSorted[#Sort1, #ParsedForm1, #Prec1, #InheritedRefs], #Kind1, #SortName]
    →
    $TextNil
   ;
  PG-Production-RawFormToken-2 :
    {#ND}
    PG-Production-RawFormToken[RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs], #Kind1, #SortName]
    →
    $TextNil
   ;
  PG-Production-RawFormToken-3 :
    {#ND}
    PG-Production-RawFormToken[RAW-FormConstruction[#Constructor, #ScopeSortList, #InheritedRefs], #Kind1, #SortName]
    →
    $TextCons[
     $TextChars["token RAW_TOKEN_"],
     $TextCons[
      $TextChars[#Constructor],
      $TextCons[
       $TextChars[" (RAW) ::= \""],
       $TextCons[$TextChars[#Constructor], $TextCons[$TextChars["\" ."], $TextCons[$TextBreak["\n"], $TextNil]]]]]]
   ;
  {$String : SortEntry}PG-Production-RawScope[$List[RawSubstituteSort], Text, Text, Text, Text] :: Text ;
  PG-Production-RawScope-1 :
    {#ND}
    PG-Production-RawScope[(#SubstituteSort; #SubstituteSorts), #SortRef, #ScopedVars, #sep, #argsep]
    →
    $TextCons[
     $TextChars[" "],
     $TextCons[
      $TextEmbed[AsText[#sep]],
      $TextCons[
       $TextChars[" RAW_VARIABLE^"],
       $TextCons[
        $TextEmbed[AsText[x_3]],
        $TextCons[
         $TextChars[" "],
         $TextCons[
          $TextEmbed[
           AsText[
            {#ND}
            PG-Production-RawScope[
             #SubstituteSorts,
             #SortRef,
             $TextCons[
              $TextEmbed[AsText[#ScopedVars]],
              $TextCons[$TextEmbed[AsText[#argsep]], $TextCons[$TextEmbed[AsText[x_3]], $TextNil]]],
             $TextCons[$TextChars["RAW_COMMA"], $TextNil],
             $TextCons[$TextChars["\270"], $TextNil]]]],
          $TextNil]]]]]]
   ;
  PG-Production-RawScope-2 :
    {#ND}
    PG-Production-RawScope[(), #SortRef, #ScopedVars, #sep, #argsep]
    →
    $TextCons[
     $TextChars[" RAW_RBRACKET "],
     $TextCons[$TextEmbed[AsText[#SortRef]], $TextCons[$TextEmbed[AsText[#ScopedVars]], $TextCons[$TextChars["]"], $TextNil]]]]
   ;
  {$String : SortEntry}PG-Production-RawScopeSort[RawSort, $List[RawSubstituteSort], $String] :: Text ;
  PG-Production-RawScopeSort-1 :
    {#ND}
    PG-Production-RawScopeSort[#Sort#, #SubstituteSorts#, #SortName]
    →
    IfEmpty[
     #SubstituteSorts#,
     $TextCons[$TextChars["<Raw_"], $TextCons[$TextChars[SortName[#Sort#]], $TextCons[$TextChars[">"], $TextNil]]],
     $TextCons[
      $TextEmbed[
       AsText[
        {#ND}
        PG-Production-RawScope[
         #SubstituteSorts#,
         $TextCons[$TextChars["<Raw_"], $TextCons[$TextChars[SortName[#Sort#]], $TextCons[$TextChars[">"], $TextNil]]],
         $TextNil,
         $TextCons[$TextChars["RAW_LBRACKET"], $TextNil],
         $TextCons[$TextChars["["], $TextNil]]]],
      $TextNil]]
   ;
  {$String : SortEntry}PG-Production-RawScopeSortList[$List[RawScopeSort], $String, Boolean] :: Text ;
  PG-Production-RawScopeSortList-1 :
    {#ND}
    PG-Production-RawScopeSortList[(RAW-ScopeSort[#Sort#, #Repeat#, #SubstituteSorts#]; #ScopeSortList), #SortName, #first]
    →
    $TextCons[
     $TextEmbed[AsText[If[#first, $TextNil, $TextCons[$TextChars[" RAW_COMMA "], $TextNil]]]],
     $TextCons[
      $TextEmbed[AsText[{#ND}PG-Production-RawScopeSort[#Sort#, #SubstituteSorts#, #SortName]]],
      $TextCons[$TextEmbed[AsText[{#ND}PG-Production-RawScopeSortList[#ScopeSortList, #SortName, B_FALSE]]], $TextNil]]]
   ;
  PG-Production-RawScopeSortList-2 :
    {#ND}
    PG-Production-RawScopeSortList[(RAW-BinderScopeSort[#Variable#, #Sort#, #BindersScopeSort#]; #ScopeSortList), #SortName, #first]
    →
    {#ND}
    PG-Production-RawScopeSortList[(#BindersScopeSort#; #ScopeSortList), #SortName, #first]
   ;
  PG-Production-RawScopeSortList-3 :
    {#ND}
    PG-Production-RawScopeSortList[(RAW-ScopeSortBinder["v", #Sort#]; #ScopeSortList), #SortName, #first]
    →
    $[Error, "There should not be binder subterm sorts."]
   ;
  PG-Production-RawScopeSortList-4 : {#ND}PG-Production-RawScopeSortList[(), #SortName, #first] → $TextNil ;
  {$String : SortEntry}PG-Production1[SortEntry] :: Text ;
  PG-Production1-1 : {#ND}PG-Production1[SE_NONE] → $TextNil ;
  PG-Production1-2 :
    {#ND; $ParsePrefix : #ParsePrefix}
    PG-Production1[SE_TOKEN[#SortName]]
    →
    $TextCons[
     $TextBreak["\n"],
     $TextCons[
      $TextChars["/* Productions for "],
      $TextCons[
       $TextChars[#SortName],
       $TextCons[
        $TextChars[" token. */"],
        $TextCons[
         $TextBreak["\n"],
         $TextCons[
          $TextChars["<"],
          $TextCons[
           $TextEmbed[AsText[ProductionName[#SortName]]],
           $TextCons[
            $TextChars["> ::= "],
            $TextCons[
             $TextEmbed[AsText[{#ND}PG-MetaHead[B_TRUE, #SortName, #SortName, B_FALSE, 0]]],
             $TextCons[
              $TextEmbed[AsText[TokenName[#SortName]]],
              $TextCons[
               $TextChars["$ ."],
               $TextCons[
                $TextBreak["\n"],
                $TextCons[
                 $TextEmbed[AsText[{#ND}PG-MetaTail[B_TRUE, #SortName, #SortName]]],
                 $TextCons[
                  $TextBreak["\n\n"],
                  $TextCons[
                   $TextChars["//<META>"],
                   $TextCons[
                    $TextBreak["\n"],
                    $TextCons[
                     $TextChars["/* Raw terms of "],
                     $TextCons[
                      $TextChars[#SortName],
                      $TextCons[
                       $TextChars[" token sort. */"],
                       $TextCons[
                        $TextBreak["\n"],
                        $TextCons[
                         $TextChars["<Raw_"],
                         $TextCons[
                          $TextChars[#SortName],
                          $TextCons[
                           $TextChars["> (RAW) ::= (RAW_TOKEN_"],
                           $TextCons[
                            $TextChars[#SortName],
                            $TextCons[
                             $TextChars[")?  <RawPresorted_"],
                             $TextCons[
                              $TextChars[#SortName],
                              $TextCons[
                               $TextChars["> ."],
                               $TextCons[
                                $TextBreak["\n"],
                                $TextCons[
                                 $TextChars["<RawSorted_"],
                                 $TextCons[
                                  $TextChars[#SortName],
                                  $TextCons[
                                   $TextChars["> (RAW) ::= RAW_TOKEN_"],
                                   $TextCons[
                                    $TextChars[#SortName],
                                    $TextCons[
                                     $TextChars[" <RawPresorted_"],
                                     $TextCons[
                                      $TextChars[#SortName],
                                      $TextCons[
                                       $TextChars["> ."],
                                       $TextCons[
                                        $TextBreak["\n"],
                                        $TextCons[
                                         $TextChars["<RawPresorted_"],
                                         $TextCons[
                                          $TextChars[#SortName],
                                          $TextCons[
                                           $TextChars["> (RAW) ::="],
                                           $TextCons[
                                            $TextBreak["\n"],
                                            $TextCons[
                                             $TextChars["  {RAW-VariableUseSorted} ({"],
                                             $TextCons[
                                              $TextChars[#SortName],
                                              $TextCons[
                                               $TextChars["}) ({RAW-RepeatSingle}) RAW_VARIABLE$ <RawAttributes>"],
                                               $TextCons[
                                                $TextBreak["\n"],
                                                $TextCons[
                                                 $TextChars["| {RAW-MetaApplicationSorted} ({"],
                                                 $TextCons[
                                                  $TextChars[#SortName],
                                                  $TextCons[
                                                   $TextChars[
                                                    "}) ({RAW-RepeatSingle}) RAW_META_VARIABLE$ ( RAW_LBRACKET <RawTerms>  RAW_RBRACKET | {$Nil} ) <RawAttributes>"],
                                                   $TextCons[
                                                    $TextBreak["\n"],
                                                    $TextCons[
                                                     $TextChars["| <Concrete {{"],
                                                     $TextCons[
                                                      $TextChars[#SortName],
                                                      $TextCons[
                                                       $TextChars["}}> ."],
                                                       $TextCons[
                                                        $TextBreak["\n"],
                                                        $TextCons[
                                                         $TextChars["token RAW_TOKEN_"],
                                                         $TextCons[
                                                          $TextChars[#SortName],
                                                          $TextCons[
                                                           $TextChars[" (RAW) ::= \""],
                                                           $TextCons[
                                                            $TextChars[#SortName],
                                                            $TextCons[
                                                             $TextChars["\" ."],
                                                             $TextCons[
                                                              $TextBreak["\n"],
                                                              $TextCons[
                                                               $TextChars["//</META>"],
                                                               $TextCons[$TextBreak["\n"], $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  PG-Production1-3 :
    {#ND}
    PG-Production1[SE_ATTRIBUTE[#Kind, #Name, #AttributeForm, #AttributeOptions]]
    →
    PG-Production-Attribute[#Kind, #Name, #AttributeForm, #AttributeOptions]
   ;
  PG-Production1-4 :
    {#ND}
    PG-Production1[SE_SORT[#Defines, #SortName, #Precs, #Wrapper]]
    →
    $TextCons[
     $TextEmbed[AsText[{#ND}PG-Production-Defines[#Defines, #SortName, 0, ()]]],
     $TextCons[$TextEmbed[AsText[{#ND}PG-Production-RawDefines[#Defines, #SortName]]], $TextNil]]
   ;
  {$String : SortEntry}PG-Productions[NameSet] :: Text ;
  PG-Productions-1 : {#ND}PG-Productions[#SortNames] → {#ND}PG-Productions1[HasNames[#SortNames], #SortNames] ;
  {$String : SortEntry}PG-Productions1[Boolean, NameSet] :: Text ;
  PG-Productions1-1 :
    {#ND}
    PG-Productions1[B_TRUE, #SortNames]
    →
    $TextCons[
     $TextEmbed[AsText[{#ND}PG-Production[FirstName[#SortNames]]]],
     $TextCons[$TextEmbed[AsText[{#ND}PG-Productions[RemoveFirstName[#SortNames]]]], $TextNil]]
   ;
  PG-Productions1-2 : {#ND}PG-Productions1[B_FALSE, #SortNames] → $TextNil ;
  PG-isLeftRecursive[$String, $Numeric, PFK_SORT] :: Boolean ;
  PG-isLeftRecursive-1 :
    PG-isLeftRecursive[#SortName, #Prec, PFK[RAW-ParsedFormSpace[#Space, #ParsedForm1], #Kind]]
    →
    PG-isLeftRecursive[#SortName, #Prec, PFK[#ParsedForm1, #Kind]]
   ;
  PG-isLeftRecursive-2 :
    PG-isLeftRecursive[#SortName, #Prec, PFK[RAW-ParsedFormWord[#Word, #ParsedForm1], #Kind]]
    →
    B_FALSE
   ;
  PG-isLeftRecursive-3[Data[#Sort]] :
    PG-isLeftRecursive[
     #SortName,
     #Prec,
     PFK[RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#Sort1, #Prec1, #Repeat1], #ParsedForm1], #Kind]]
    →
    $[If, $[NumericEqual, #Prec, #Prec1], PG-isLeftRecursive1[#SortName, #Sort1], B_FALSE]
   ;
  PG-isLeftRecursive-4 : PG-isLeftRecursive[#SortName, #Prec, PFK[RAW-ParsedFormDone, #Kind]] → B_FALSE ;
  PG-isLeftRecursive1[$String, RawScopeSort] :: Boolean ;
  PG-isLeftRecursive1-1 :
    PG-isLeftRecursive1[#SortName, RAW-ScopeSort[RAW-Sort[RAW-SortName[#SortName1, #_1], ()], RAW-RepeatSingle, ()]]
    →
    SameString[#SortName, #SortName1]
   ;
  PG-isLeftRecursive1-2[Data[#Kind]] :
    PG-isLeftRecursive1[#SortName, $[NotMatch, RAW-ScopeSort[RAW-Sort[RAW-SortName[#SortName1, #_1], ()], RAW-RepeatSingle, ()], #_]]
    →
    B_FALSE
   ;
  PG-stripLeftRecursion[PFK_SORT] :: PFK_SORT ;
  PG-stripLeftRecursion-1 :
    PG-stripLeftRecursion[PFK[RAW-ParsedFormSpace[#Space, #ParsedForm1], #Kind]]
    →
    PG-stripLeftRecursion[PFK[#ParsedForm1, #Kind]]
   ;
  PG-stripLeftRecursion-2 :
    PG-stripLeftRecursion[
     PFK[
      RAW-ParsedFormTerm[
       RAW-ScopeSortPrecRepeat[RAW-ScopeSort[RAW-Sort[RAW-SortName[#SortName, #_], ()], RAW-RepeatSingle, ()], #Prec, #Repeat],
       #ParsedForm],
      #Kind]]
    →
    PFK[#ParsedForm, #Kind]
   ;
  PG1[$String, $List[RawDeclaration]] :: Text ;
  PG1-1 :
    PG1[#Name#, #Declarations#]
    →
    PG2[N-Declarations[#Declarations#, #Name#], FullName[#Name#], ParsePrefix[#Name#], #Declarations#]
   ;
  PG2[NormalizedSortMap, $String, $String, $List[RawDeclaration]] :: Text ;
  PG2-1 :
    PG2[{#ND}NSM[#SortNames], #Name, #ParsePrefix, #Declarations]
    →
    PG3[{#ND}NSM[#SortNames], #Name, #ParsePrefix, #Declarations, {#ND}DerivedSorts[#SortNames]]
   ;
  PG3[NormalizedSortMap, $String, $String, $List[RawDeclaration], $List[DERIVED_SORT]] :: Text ;
  PG3-1[Data[#Name, #ParsePrefix, #Declarations, #Derived]] :
    PG3[{#ND}NSM[#SortNames], #Name, #ParsePrefix, #Declarations, #Derived]
    →
    $TextCons[
     $TextChars["/** PG Grammar for HACS module "],
     $TextCons[
      $TextChars[#Name],
      $TextCons[
       $TextChars["."],
       $TextCons[
        $TextBreak["\n"],
        $TextCons[
         $TextChars[" * @version $Id: CookPG.crs,v 1.48 2014/01/26 21:14:39 krisrose Exp $"],
         $TextCons[
          $TextBreak["\n"],
          $TextCons[
           $TextChars[" */"],
           $TextCons[
            $TextBreak["\n\n"],
            $TextCons[
             $TextChars["class "],
             $TextCons[
              $TextChars[#Name],
              $TextCons[
               $TextChars["Parser : "],
               $TextCons[
                $TextIndent[
                 $TextCons[
                  $TextEmbed[
                   AsText[
                    TextFold[
                     Map[
                      s_33 . $TextCons[$TextChars["<"], $TextCons[$TextChars[s_33], $TextCons[$TextChars[">"], $TextNil]]],
                      {#ND}
                      ProductionNames[{#ND}SortNameList]],
                     $TextCons[$TextChars[","], $TextNil]]]],
                  $TextCons[
                   $TextBreak["\n"],
                   $TextCons[
                    $TextChars["//<META>"],
                    $TextCons[
                     $TextBreak["\n"],
                     $TextCons[
                      $TextChars[",<RawTerm>, <RawSortedTerms>, <RawSortedTerm>, <RawVariableUse>, <RawMetaApplication>"],
                      $TextCons[
                       $TextBreak["\n"],
                       $TextCons[
                        $TextEmbed[
                         AsText[
                          TextFold[
                           Map[
                            s_57 .
                             $TextCons[
                              $TextChars[", <Raw_"],
                              $TextCons[
                               $TextChars[s_57],
                               $TextCons[
                                $TextChars[">, <RawSorted_"],
                                $TextCons[
                                 $TextChars[s_57],
                                 $TextCons[
                                  $TextChars[">, <RawPresorted_"],
                                  $TextCons[$TextChars[s_57], $TextCons[$TextChars[">"], $TextNil]]]]]]],
                            {#ND}
                            SortNameList],
                           $TextNil]]],
                        $TextCons[
                         $TextBreak["\n"],
                         $TextCons[
                          $TextEmbed[
                           AsText[
                            TextFold[
                             Map[
                              s_99 .
                               $TextCons[
                                $TextChars[", <Raw_"],
                                $TextCons[
                                 $TextChars[s_99],
                                 $TextCons[
                                  $TextChars[">, <RawSorted_"],
                                  $TextCons[
                                   $TextChars[s_99],
                                   $TextCons[
                                    $TextChars[">, <RawPresorted_"],
                                    $TextCons[$TextChars[s_99], $TextCons[$TextChars[">"], $TextNil]]]]]]],
                              {#ND}
                              TokenNameList],
                             $TextNil]]],
                          $TextCons[
                           $TextBreak["\n"],
                           $TextCons[
                            $TextChars["//</META>"],
                            $TextCons[
                             $TextBreak["\n"],
                             $TextCons[
                              $TextEmbed[
                               AsText[
                                TextFold[
                                 Map[
                                  p .
                                   $TextCons[$TextChars[", <"], $TextCons[$TextChars[p], $TextCons[$TextChars[">"], $TextNil]]],
                                  NameSetList[
                                   Fold[
                                    x_22 z_57 . AddName[z_57, x_22],
                                    Map[d . TextToString[ProductionNameDerived[d]], #Derived],
                                    NoNames]]],
                                 $TextNil]]],
                              $TextNil]]]]]]]]]]]]]],
                $TextCons[
                 $TextBreak["\n\n"],
                 $TextCons[
                  $TextChars["prefix "],
                  $TextCons[
                   $TextChars[#ParsePrefix],
                   $TextCons[
                    $TextBreak["\n\n"],
                    $TextCons[
                     $TextChars["//<META>"],
                     $TextCons[
                      $TextBreak["\n"],
                      $TextCons[
                       $TextChars["declarations"],
                       $TextCons[
                        $TextBreak["\n"],
                        $TextCons[
                         $TextChars["%{"],
                         $TextCons[
                          $TextBreak["\n"],
                          $TextCons[
                           $TextChars["static String unmeta(String s) {return s.substring(1, s.length()-1).trim();}"],
                           $TextCons[
                            $TextBreak["\n"],
                            $TextCons[
                             $TextChars["%}"],
                             $TextCons[
                              $TextBreak["\n"],
                              $TextCons[
                               $TextChars["//</META>"],
                               $TextCons[
                                $TextBreak["\n\n"],
                                $TextCons[
                                 $TextChars["/* GRAMMAR. */"],
                                 $TextCons[
                                  $TextBreak["\n"],
                                  $TextCons[
                                   $TextEmbed[AsText[{#ND; $ParsePrefix : #ParsePrefix}PG-Productions[#SortNames]]],
                                   $TextCons[
                                    $TextBreak["\n\n"],
                                    $TextCons[
                                     $TextChars["//<META>"],
                                     $TextCons[
                                      $TextBreak["\n"],
                                      $TextCons[
                                       $TextChars["/* Raw term entry points."],
                                       $TextCons[
                                        $TextBreak["\n"],
                                        $TextCons[
                                         $TextChars[" * (1) a term is \'sorted\'"],
                                         $TextCons[
                                          $TextBreak["\n"],
                                          $TextCons[
                                           $TextChars[" */"],
                                           $TextCons[
                                            $TextBreak["\n"],
                                            $TextCons[
                                             $TextChars["<RawTerms> (RAW) ::= {$Cons} <RawTerm> <RawTermsTail> | {$Nil} ."],
                                             $TextCons[
                                              $TextBreak["\n"],
                                              $TextCons[
                                               $TextChars[
                                                "<RawTermsTail> (RAW) ::= {$Cons} RAW_COMMA <RawTerm> <RawTermsTail> | {$Nil} ."],
                                               $TextCons[
                                                $TextBreak["\n"],
                                                $TextCons[
                                                 $TextChars[
                                                  "<RawTerm> (RAW) ::= <RawSortedTerm> | <RawVariableUse> | <RawMetaApplication> ."],
                                                 $TextCons[
                                                  $TextBreak["\n"],
                                                  $TextCons[
                                                   $TextChars["<RawSortedTerm> (RAW) ::= "],
                                                   $TextCons[
                                                    $TextEmbed[
                                                     AsText[
                                                      TextFold[
                                                       Map[
                                                        s_46 .
                                                         $TextCons[
                                                          $TextChars["<RawSorted_"],
                                                          $TextCons[$TextChars[s_46], $TextCons[$TextChars[">"], $TextNil]]],
                                                        {#ND}
                                                        SortNameList],
                                                       $TextCons[$TextChars[" | "], $TextNil]]]],
                                                    $TextCons[
                                                     $TextChars[" ."],
                                                     $TextCons[
                                                      $TextBreak["\n"],
                                                      $TextCons[
                                                       $TextChars[
                                                        "<RawVariableUse> (RAW) ::= {RAW-VariableUse} RAW_VARIABLE$ <RawAttributes> ."],
                                                       $TextCons[
                                                        $TextBreak["\n"],
                                                        $TextCons[
                                                         $TextChars[
                                                          "<RawMetaApplication> (RAW) ::= {RAW-MetaApplication} RAW_META_VARIABLE$ ( RAW_LBRACKET <RawTerms>  RAW_RBRACKET | {$Nil} ) <RawAttributes> ."],
                                                         $TextCons[
                                                          $TextBreak["\n"],
                                                          $TextCons[
                                                           $TextChars[
                                                            "<RawAttributes> (RAW) ::= {$Cons} <RawAttribute> ( <RawAttributes> | {$Nil} ) ."],
                                                           $TextCons[
                                                            $TextBreak["\n"],
                                                            $TextCons[
                                                             $TextChars["<RawAttribute> (RAW) ::="],
                                                             $TextCons[
                                                              $TextBreak["\n"],
                                                              $TextCons[
                                                               $TextChars["  RAW_UP ( "],
                                                               $TextCons[
                                                                $TextEmbed[
                                                                 AsText[
                                                                  TextFold[
                                                                   Map[
                                                                    a_222 .
                                                                     $TextCons[
                                                                      $TextChars["<RawAttributeSynthesized_"],
                                                                      $TextCons[
                                                                       $TextChars[a_222],
                                                                       $TextCons[$TextChars[">"], $TextNil]]],
                                                                    NameSetList[{#ND}SynthesizedNames]],
                                                                   $TextCons[$TextChars[" | "], $TextNil]]]],
                                                                $TextCons[
                                                                 $TextChars[" )"],
                                                                 $TextCons[
                                                                  $TextBreak["\n"],
                                                                  $TextCons[
                                                                   $TextChars["| RAW_DOWN ( "],
                                                                   $TextCons[
                                                                    $TextEmbed[
                                                                     AsText[
                                                                      TextFold[
                                                                       Map[
                                                                        a_20 .
                                                                         $TextCons[
                                                                          $TextChars["<RawAttributeInherited_"],
                                                                          $TextCons[
                                                                           $TextChars[a_20],
                                                                           $TextCons[$TextChars[">"], $TextNil]]],
                                                                        NameSetList[{#ND}InheritedNames]],
                                                                       $TextCons[$TextChars[" | "], $TextNil]]]],
                                                                    $TextCons[
                                                                     $TextChars[" ) ."],
                                                                     $TextCons[
                                                                      $TextBreak["\n\n"],
                                                                      $TextCons[
                                                                       $TextChars["%{"],
                                                                       $TextCons[
                                                                        $TextBreak["\n"],
                                                                        $TextCons[
                                                                         $TextChars[
                                                                          "net.sf.crsx.Sink N_Parsed(net.sf.crsx.Sink sink, net.sf.crsx.util.ExtensibleMap<String, net.sf.crsx.Variable> env, net.sf.crsx.util.Buffer b__C) :"],
                                                                         $TextCons[
                                                                          $TextBreak["\n"],
                                                                          $TextCons[
                                                                           $TextChars["{"],
                                                                           $TextCons[
                                                                            $TextBreak["\n"],
                                                                            $TextCons[
                                                                             $TextChars["\tToken t = null;"],
                                                                             $TextCons[
                                                                              $TextBreak["\n"],
                                                                              $TextCons[
                                                                               $TextChars["\tString concrete =null;"],
                                                                               $TextCons[
                                                                                $TextBreak["\n"],
                                                                                $TextCons[
                                                                                 $TextChars["}"],
                                                                                 $TextCons[
                                                                                  $TextBreak["\n"],
                                                                                  $TextCons[
                                                                                   $TextChars["{"],
                                                                                   $TextCons[
                                                                                    $TextBreak["\n"],
                                                                                    $TextCons[
                                                                                     $TextChars["\t ( "],
                                                                                     $TextCons[
                                                                                      $TextBreak["\n"],
                                                                                      $TextCons[
                                                                                       $TextChars["\tt=<T_RAW_CONCRETE>"],
                                                                                       $TextCons[
                                                                                        $TextBreak["\n"],
                                                                                        $TextCons[
                                                                                         $TextChars["\t{"],
                                                                                         $TextCons[
                                                                                          $TextBreak["\n"],
                                                                                          $TextCons[
                                                                                           $TextChars[
                                                                                            "\t\tconcrete = unembed(t.toString());"],
                                                                                           $TextCons[
                                                                                            $TextBreak["\n"],
                                                                                            $TextCons[
                                                                                             $TextChars[
                                                                                              "\t\tif (factory.defined(\"concrete-prefix\"))"],
                                                                                             $TextCons[
                                                                                              $TextBreak["\n"],
                                                                                              $TextCons[
                                                                                               $TextChars["\t\t{"],
                                                                                               $TextCons[
                                                                                                $TextBreak["\n"],
                                                                                                $TextCons[
                                                                                                 $TextChars[
                                                                                                  "\t\t\tString sort = net.sf.crsx.util.Util.symbol(b__C.term(false));"],
                                                                                                 $TextCons[
                                                                                                  $TextBreak["\n"],
                                                                                                  $TextCons[
                                                                                                   $TextChars[
                                                                                                    "\t\t\tString category = net.sf.crsx.util.Util.symbol(factory.get(\"concrete-prefix\")) + sort; "],
                                                                                                   $TextCons[
                                                                                                    $TextBreak["\n"],
                                                                                                    $TextCons[
                                                                                                     $TextChars[
                                                                                                      "\t\t\tnet.sf.crsx.Term term = null;"],
                                                                                                     $TextCons[
                                                                                                      $TextBreak["\n"],
                                                                                                      $TextCons[
                                                                                                       $TextChars["\t\t\ttry {"],
                                                                                                       $TextCons[
                                                                                                        $TextBreak["\n"],
                                                                                                        $TextCons[
                                                                                                         $TextChars[
                                                                                                          "\t\t\t\tsink = parse(sink, category, new java.io.StringReader(concrete), unit, t.beginLine, t.beginColumn+1, env);"],
                                                                                                         $TextCons[
                                                                                                          $TextBreak["\n"],
                                                                                                          $TextCons[
                                                                                                           $TextChars["\t\t\t}"],
                                                                                                           $TextCons[
                                                                                                            $TextBreak["\n"],
                                                                                                            $TextCons[
                                                                                                             $TextChars[
                                                                                                              "\t\t\tcatch (java.io.IOException e) {throw new ParseException(e.getMessage());}"],
                                                                                                             $TextCons[
                                                                                                              $TextBreak["\n"],
                                                                                                              $TextCons[
                                                                                                               $TextChars[
                                                                                                                "\t\t\tcatch (net.sf.crsx.CRSException e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}"],
                                                                                                               $TextCons[
                                                                                                                $TextBreak["\n"],
                                                                                                                $TextCons[
                                                                                                                 $TextChars[
                                                                                                                  "\t\t}"],
                                                                                                                 $TextCons[
                                                                                                                  $TextBreak[
                                                                                                                   "\n"],
                                                                                                                  $TextCons[
                                                                                                                   $TextChars[
                                                                                                                    "\t\telse"],
                                                                                                                   $TextCons[
                                                                                                                    $TextBreak[
                                                                                                                     "\n"],
                                                                                                                    $TextCons[
                                                                                                                     $TextChars[
                                                                                                                      "\t\t{"],
                                                                                                                     $TextCons[
                                                                                                                      $TextBreak[
                                                                                                                       "\n"],
                                                                                                                      $TextCons[
                                                                                                                       $TextChars[
                                                                                                                        "\t\t\tsink = sink.start(sink.makeConstructor(\"Raw$Unparsed\"));"],
                                                                                                                       $TextCons[
                                                                                                                        $TextBreak[
                                                                                                                         "\n"],
                                                                                                                        $TextCons[
                                                                                                                         $TextChars[
                                                                                                                          "\t\t\tsink = sink.start(sink.makeLiteral(concrete.substring(1, concrete.length()-1), net.sf.crsx.CRS.STRING_SORT)).end();"],
                                                                                                                         $TextCons[
                                                                                                                          $TextBreak[
                                                                                                                           "\n"],
                                                                                                                          $TextCons[
                                                                                                                           $TextChars[
                                                                                                                            "\t\t\tsink = sink.end();"],
                                                                                                                           $TextCons[
                                                                                                                            $TextBreak[
                                                                                                                             "\n"],
                                                                                                                            $TextCons[
                                                                                                                             $TextChars[
                                                                                                                              "\t\t}"],
                                                                                                                             $TextCons[
                                                                                                                              $TextBreak[
                                                                                                                               "\n"],
                                                                                                                              $TextCons[
                                                                                                                               $TextChars[
                                                                                                                                "\t}"],
                                                                                                                               $TextCons[
                                                                                                                                $TextBreak[
                                                                                                                                 "\n"],
                                                                                                                                $TextCons[
                                                                                                                                 $TextChars[
                                                                                                                                  "\t ) "],
                                                                                                                                 $TextCons[
                                                                                                                                  $TextBreak[
                                                                                                                                   "\n"],
                                                                                                                                  $TextCons[
                                                                                                                                   $TextChars[
                                                                                                                                    "\t{return sink;}"],
                                                                                                                                   $TextCons[
                                                                                                                                    $TextBreak[
                                                                                                                                     "\n"],
                                                                                                                                    $TextCons[
                                                                                                                                     $TextChars[
                                                                                                                                      "}"],
                                                                                                                                     $TextCons[
                                                                                                                                      $TextBreak[
                                                                                                                                       "\n\n"],
                                                                                                                                      $TextCons[
                                                                                                                                       $TextChars[
                                                                                                                                        "%}"],
                                                                                                                                       $TextCons[
                                                                                                                                        $TextBreak[
                                                                                                                                         "\n"],
                                                                                                                                        $TextCons[
                                                                                                                                         $TextChars[
                                                                                                                                          "//</META>"],
                                                                                                                                         $TextCons[
                                                                                                                                          $TextBreak[
                                                                                                                                           "\n\n"],
                                                                                                                                          $TextCons[
                                                                                                                                           $TextEmbed[
                                                                                                                                            AsText[
                                                                                                                                             TextFoldMap[
                                                                                                                                              JoinMappedTextMaps[
                                                                                                                                               d_82 .
                                                                                                                                                PG-ProduceDerived[
                                                                                                                                                 d_82],
                                                                                                                                               #Derived],
                                                                                                                                              $TextCons[
                                                                                                                                               $TextBreak[
                                                                                                                                                "\n"],
                                                                                                                                               $TextNil]]]],
                                                                                                                                           $TextCons[
                                                                                                                                            $TextBreak[
                                                                                                                                             "\n"],
                                                                                                                                            $TextCons[
                                                                                                                                             $TextChars[
                                                                                                                                              "/* TOKENS. */"],
                                                                                                                                             $TextCons[
                                                                                                                                              $TextBreak[
                                                                                                                                               "\n\n"],
                                                                                                                                              $TextCons[
                                                                                                                                               $TextChars[
                                                                                                                                                "%{"],
                                                                                                                                               $TextCons[
                                                                                                                                                $TextBreak[
                                                                                                                                                 "\n"],
                                                                                                                                                $TextCons[
                                                                                                                                                 $TextChars[
                                                                                                                                                  "TOKEN_MGR_DECLS : { int nesting; int nestedState;} /* Used by all nesting constructs. */"],
                                                                                                                                                 $TextCons[
                                                                                                                                                  $TextBreak[
                                                                                                                                                   "\n"],
                                                                                                                                                  $TextCons[
                                                                                                                                                   $TextChars[
                                                                                                                                                    "%}"],
                                                                                                                                                   $TextCons[
                                                                                                                                                    $TextBreak[
                                                                                                                                                     "\n\n"],
                                                                                                                                                    $TextCons[
                                                                                                                                                     $TextEmbed[
                                                                                                                                                      AsText[
                                                                                                                                                       PG-Lexical[
                                                                                                                                                        #Declarations]]],
                                                                                                                                                     $TextCons[
                                                                                                                                                      $TextBreak[
                                                                                                                                                       "\n\n"],
                                                                                                                                                      $TextCons[
                                                                                                                                                       $TextChars[
                                                                                                                                                        "//<META>"],
                                                                                                                                                       $TextCons[
                                                                                                                                                        $TextBreak[
                                                                                                                                                         "\n"],
                                                                                                                                                        $TextCons[
                                                                                                                                                         $TextChars[
                                                                                                                                                          "/* Tokens for Raw mode. */"],
                                                                                                                                                         $TextCons[
                                                                                                                                                          $TextBreak[
                                                                                                                                                           "\n"],
                                                                                                                                                          $TextCons[
                                                                                                                                                           $TextChars[
                                                                                                                                                            "token RAW_VARIABLE (RAW) ::= [a-z] [A-Za-z0-9_$]* ."],
                                                                                                                                                           $TextCons[
                                                                                                                                                            $TextBreak[
                                                                                                                                                             "\n"],
                                                                                                                                                            $TextCons[
                                                                                                                                                             $TextChars[
                                                                                                                                                              "token RAW_META_VARIABLE (RAW) ::= [#] [A-Za-z0-9_$]* ."],
                                                                                                                                                             $TextCons[
                                                                                                                                                              $TextBreak[
                                                                                                                                                               "\n"],
                                                                                                                                                              $TextCons[
                                                                                                                                                               $TextChars[
                                                                                                                                                                "token RAW_LPAREN (RAW) ::= \'(\' ."],
                                                                                                                                                               $TextCons[
                                                                                                                                                                $TextBreak[
                                                                                                                                                                 "\n"],
                                                                                                                                                                $TextCons[
                                                                                                                                                                 $TextChars[
                                                                                                                                                                  "token RAW_RPAREN (RAW) ::= \')\' ."],
                                                                                                                                                                 $TextCons[
                                                                                                                                                                  $TextBreak[
                                                                                                                                                                   "\n"],
                                                                                                                                                                  $TextCons[
                                                                                                                                                                   $TextChars[
                                                                                                                                                                    "token RAW_LBRACKET (RAW) ::= \'[\' ."],
                                                                                                                                                                   $TextCons[
                                                                                                                                                                    $TextBreak[
                                                                                                                                                                     "\n"],
                                                                                                                                                                    $TextCons[
                                                                                                                                                                     $TextChars[
                                                                                                                                                                      "token RAW_RBRACKET (RAW) ::= \']\' ."],
                                                                                                                                                                     $TextCons[
                                                                                                                                                                      $TextBreak[
                                                                                                                                                                       "\n"],
                                                                                                                                                                      $TextCons[
                                                                                                                                                                       $TextChars[
                                                                                                                                                                        "token RAW_LBRACE (RAW) ::= \'{\' ."],
                                                                                                                                                                       $TextCons[
                                                                                                                                                                        $TextBreak[
                                                                                                                                                                         "\n"],
                                                                                                                                                                        $TextCons[
                                                                                                                                                                         $TextChars[
                                                                                                                                                                          "token RAW_RBRACE (RAW) ::= \'}\' ."],
                                                                                                                                                                         $TextCons[
                                                                                                                                                                          $TextBreak[
                                                                                                                                                                           "\n"],
                                                                                                                                                                          $TextCons[
                                                                                                                                                                           $TextChars[
                                                                                                                                                                            "token RAW_COMMA (RAW) ::= \',\' ."],
                                                                                                                                                                           $TextCons[
                                                                                                                                                                            $TextBreak[
                                                                                                                                                                             "\n"],
                                                                                                                                                                            $TextCons[
                                                                                                                                                                             $TextChars[
                                                                                                                                                                              "token RAW_COLON (RAW) ::= \':\' ."],
                                                                                                                                                                             $TextCons[
                                                                                                                                                                              $TextBreak[
                                                                                                                                                                               "\n"],
                                                                                                                                                                              $TextCons[
                                                                                                                                                                               $TextChars[
                                                                                                                                                                                "token RAW_UP (RAW) ::= \\u2191 . // \u2191"],
                                                                                                                                                                               $TextCons[
                                                                                                                                                                                $TextBreak[
                                                                                                                                                                                 "\n"],
                                                                                                                                                                                $TextCons[
                                                                                                                                                                                 $TextChars[
                                                                                                                                                                                  "token RAW_DOWN (RAW) ::= \\u2193 . // \u2193"],
                                                                                                                                                                                 $TextCons[
                                                                                                                                                                                  $TextBreak[
                                                                                                                                                                                   "\n"],
                                                                                                                                                                                  $TextCons[
                                                                                                                                                                                   $TextChars[
                                                                                                                                                                                    "token RAW_NOT (RAW) ::= \\u00ac . // \254"],
                                                                                                                                                                                   $TextCons[
                                                                                                                                                                                    $TextBreak[
                                                                                                                                                                                     "\n"],
                                                                                                                                                                                    $TextCons[
                                                                                                                                                                                     $TextChars[
                                                                                                                                                                                      "%{"],
                                                                                                                                                                                     $TextCons[
                                                                                                                                                                                      $TextBreak[
                                                                                                                                                                                       "\n"],
                                                                                                                                                                                      $TextCons[
                                                                                                                                                                                       $TextChars[
                                                                                                                                                                                        "/* Nested concrete token. */"],
                                                                                                                                                                                       $TextCons[
                                                                                                                                                                                        $TextBreak[
                                                                                                                                                                                         "\n"],
                                                                                                                                                                                        $TextCons[
                                                                                                                                                                                         $TextChars[
                                                                                                                                                                                          "<RAW> MORE : { \"\\u27e6\" { nesting = 0; nestedState = curLexState; } : RAW_CONCRETE }"],
                                                                                                                                                                                         $TextCons[
                                                                                                                                                                                          $TextBreak[
                                                                                                                                                                                           "\n"],
                                                                                                                                                                                          $TextCons[
                                                                                                                                                                                           $TextChars[
                                                                                                                                                                                            "<RAW_CONCRETE> MORE : { \"\\u27e6\" { nesting = 1; } : NESTED_RAW_CONCRETE }"],
                                                                                                                                                                                           $TextCons[
                                                                                                                                                                                            $TextBreak[
                                                                                                                                                                                             "\n"],
                                                                                                                                                                                            $TextCons[
                                                                                                                                                                                             $TextChars[
                                                                                                                                                                                              "<NESTED_RAW_CONCRETE> MORE : { \"\\u27e6\" { nesting++; } }"],
                                                                                                                                                                                             $TextCons[
                                                                                                                                                                                              $TextBreak[
                                                                                                                                                                                               "\n"],
                                                                                                                                                                                              $TextCons[
                                                                                                                                                                                               $TextChars[
                                                                                                                                                                                                "<NESTED_RAW_CONCRETE> MORE : { \"\\u27e7\" { if (--nesting <= 0) SwitchTo(RAW_CONCRETE); } }"],
                                                                                                                                                                                               $TextCons[
                                                                                                                                                                                                $TextBreak[
                                                                                                                                                                                                 "\n"],
                                                                                                                                                                                                $TextCons[
                                                                                                                                                                                                 $TextChars[
                                                                                                                                                                                                  "<RAW_CONCRETE> TOKEN : { <T_RAW_CONCRETE : \"\\u27e7\"> { SwitchTo(nestedState); } }"],
                                                                                                                                                                                                 $TextCons[
                                                                                                                                                                                                  $TextBreak[
                                                                                                                                                                                                   "\n"],
                                                                                                                                                                                                  $TextCons[
                                                                                                                                                                                                   $TextChars[
                                                                                                                                                                                                    "<RAW_CONCRETE,NESTED_RAW_CONCRETE> MORE : { < ~[] > }"],
                                                                                                                                                                                                   $TextCons[
                                                                                                                                                                                                    $TextBreak[
                                                                                                                                                                                                     "\n"],
                                                                                                                                                                                                    $TextCons[
                                                                                                                                                                                                     $TextChars[
                                                                                                                                                                                                      "%}"],
                                                                                                                                                                                                     $TextCons[
                                                                                                                                                                                                      $TextBreak[
                                                                                                                                                                                                       "\n"],
                                                                                                                                                                                                      $TextCons[
                                                                                                                                                                                                       $TextChars[
                                                                                                                                                                                                        "skip (RAW) ::= [\\ \\t\\n] ."],
                                                                                                                                                                                                       $TextCons[
                                                                                                                                                                                                        $TextBreak[
                                                                                                                                                                                                         "\n"],
                                                                                                                                                                                                        $TextCons[
                                                                                                                                                                                                         $TextChars[
                                                                                                                                                                                                          "//</META>"],
                                                                                                                                                                                                         $TextCons[
                                                                                                                                                                                                          $TextBreak[
                                                                                                                                                                                                           "\n"],
                                                                                                                                                                                                          $TextNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
   ;
  ParsePrefix[$String] :: $String ;
  CookBase-ParsePrefix-1[Data[#Name], Copy[#Name]] :
    ParsePrefix[#Name]
    →
    $[If, $[Contains, #Name, "."], ParsePrefix[$[AfterFirst, #Name, "."]], $[DownCase, $[Replace, #Name, "\"", ""]]]
   ;
  ProductionConstruction[$String, $Numeric, FormKind, $List[Text], $List[Text]] :: Text ;
  ProductionConstruction-1[Data[#SortName, #Prec, #words]] :
    ProductionConstruction[#SortName, #Prec, FK_SCHEME[#Inh], #words, #terms]
    →
    $TextCons[
     $TextIndent[
      $TextCons[
       $TextChars[" {{ "],
       $TextCons[
        $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
        $TextCons[
         $TextEmbed[
          AsText[
           IfEmpty[#words, $TextCons[$TextChars["EMPTY"], $TextNil], TextFold1[#words, $TextCons[$TextChars["_"], $TextNil]]]]],
         $TextCons[
          $TextEmbed[
           AsText[
            WrappedTextFold[
             #terms,
             $TextCons[$TextChars["["], $TextNil],
             $TextCons[$TextChars[", "], $TextNil],
             $TextCons[$TextChars["]"], $TextNil]]]],
          $TextCons[$TextChars["}}"], $TextNil]]]]]],
     $TextNil]
   ;
  ProductionConstruction-2[Data[#SortName, #Prec, #Kind, #words]] :
    ProductionConstruction[#SortName, #Prec, $[NotMatch, FK_SCHEME[#Inh], #Kind], #words, #terms]
    →
    IfAliasKind[
     #Kind,
     WrappedTextFold[
      #terms,
      $TextCons[$TextChars[" {{"], $TextNil],
      $TextCons[$TextChars[" "], $TextNil],
      $TextCons[$TextChars["}}"], $TextNil]],
     $TextCons[
      $TextIndent[
       $TextCons[
        $TextChars[" {{"],
        $TextCons[
         $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
         $TextCons[
          $TextEmbed[
           AsText[
            IfEmpty[
             #words,
             $TextCons[$TextChars["EMPTY"], $TextNil],
             TextFold1[#words, $TextCons[$TextChars["_"], $TextNil]]]]],
          $TextCons[
           $TextEmbed[
            AsText[
             WrappedTextFold[
              #terms,
              $TextCons[$TextChars["["], $TextNil],
              $TextCons[$TextChars[", "], $TextNil],
              $TextCons[$TextChars["]"], $TextNil]]]],
           $TextCons[$TextChars["}}"], $TextNil]]]]]],
      $TextNil]]
   ;
  ProductionName[$String] :: Text ;
  CookBase-ProductionName-1[Data[#SortName]] : ProductionName[#SortName] → $TextCons[$TextChars[#SortName], $TextNil]
   ;
  ProductionNameDerived[DERIVED_SORT] :: Text ;
  CookN-ProductionNameDerived-1 :
    ProductionNameDerived[DERIVED[#Name, #Prec, #Repeat]]
    →
    ProductionNameWithPrecRepeat[#Name, #Prec, #Repeat]
   ;
  ProductionNameWithPrec[$String, $Numeric] :: Text ;
  CookBase-ProductionNameWithPrec-1[Data[#SortName, #Prec], Copy[#SortName, #Prec]] :
    ProductionNameWithPrec[#SortName, #Prec]
    →
    ProductionName[$[If, $[NumericEqual, #Prec, 0], #SortName, $[':', #SortName, $[FormatNumber, #Prec]]]]
   ;
  ProductionNameWithPrecRepeat[$String, $Numeric, RawRepeat] :: Text ;
  CookBase-ProductionNameWithPrecRepeat-1 :
    ProductionNameWithPrecRepeat[#SortName, #Prec, RAW-RepeatSingle]
    →
    ProductionNameWithPrec[#SortName, #Prec]
   ;
  CookBase-ProductionNameWithPrecRepeat-2 :
    ProductionNameWithPrecRepeat[#SortName, #Prec, RAW-RepeatMaybe]
    →
    $TextCons[$TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]], $TextCons[$TextChars["_Maybe"], $TextNil]]
   ;
  CookBase-ProductionNameWithPrecRepeat-3 :
    ProductionNameWithPrecRepeat[#SortName, #Prec, RAW-RepeatMaybeSome]
    →
    $TextCons[$TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]], $TextCons[$TextChars["_MaybeSome"], $TextNil]]
   ;
  CookBase-ProductionNameWithPrecRepeat-4[Data[#RegExpSimple#]] :
    ProductionNameWithPrecRepeat[#SortName, #Prec, RAW-RepeatSome]
    →
    $TextCons[$TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]], $TextCons[$TextChars["_Some"], $TextNil]]
   ;
  CookBase-ProductionNameWithPrecRepeat-5[Data[#RegExpLeaf#]] :
    ProductionNameWithPrecRepeat[#SortName, #Prec, RAW-RepeatSomeSep[#RegExpLeaf#]]
    →
    $TextCons[
     $TextEmbed[AsText[ProductionNameWithPrec[#SortName, #Prec]]],
     $TextCons[$TextEmbed[AsText[RegExpLeafName["", #RegExpLeaf#]]], $TextNil]]
   ;
  {$String : SortEntry}ProductionNames[$List[$String]] :: $List[$String] ;
  ProductionNames-1 : {#ND}ProductionNames[()] → () ;
  ProductionNames-2 :
    {#ND}
    ProductionNames[(#1; #s)]
    →
    {#ND}
    ProductionNames2[$[{#ND}Get[SortEntry], #1, SE_NONE], #1, #s]
   ;
  {$String : SortEntry}ProductionNames2[SortEntry, $String, $List[$String]] :: $List[$String] ;
  ProductionNames2-1 : {#ND}ProductionNames2[SE_NONE, #1, #s] → {#ND}ProductionNames[#s] ;
  ProductionNames2-2 : {#ND}ProductionNames2[SE_TOKEN[#SortName], #1, #s] → (#1; {#ND}ProductionNames[#s]) ;
  ProductionNames2-3 :
    {#ND}
    ProductionNames2[SE_ATTRIBUTE[#Kind, #Name, #AttributeForm, #AttributeOptions], #1, #s]
    →
    {#ND}
    ProductionNames[#s]
   ;
  ProductionNames2-4 :
    {#ND}
    ProductionNames2[SE_SORT[#Defines, #SortName, #Precs, #Wrapper], #1, #s]
    →
    {#ND}
    ProductionNames3[#Defines, #1, #s]
   ;
  {$String : SortEntry}ProductionNames3[$List[Define], $String, $List[$String]] :: $List[$String] ;
  ProductionNames3-1 :
    {#ND}
    ProductionNames3[((D_ABSTRACTION a_22 . #Define1[a_22]); #Defines), #1, #s]
    →
    {#ND}
    ProductionNames3[(#Define1[dummy]; #Defines), #1, #s]
   ;
  ProductionNames3-2 :
    {#ND}
    ProductionNames3[(D_RULE[#Rule, #RuleSort, #IsData]; #Defines), #1, #s]
    →
    {#ND}
    ProductionNames3[#Defines, #1, #s]
   ;
  ProductionNames3-3 :
    {#ND}
    ProductionNames3[(D_FORM[#Form1, #Kind1]; #Defines), #1, #s]
    →
    {#ND}
    ProductionNames4[#Form1, #Defines, #1, #s]
   ;
  ProductionNames3-4 : {#ND}ProductionNames3[(D_NONE; #Defines), #1, #s] → {#ND}ProductionNames3[#Defines, #1, #s] ;
  ProductionNames3-5 : {#ND}ProductionNames3[(), #1, #s] → {#ND}ProductionNames[#s] ;
  {$String : SortEntry}ProductionNames4[RawForm, $List[Define], $String, $List[$String]] :: $List[$String] ;
  ProductionNames4-1 :
    {#ND}
    ProductionNames4[RAW-FormParsedSorted[#Sort1, #ParsedForm1, #Prec1, #InheritedRefs], #Defines, #1, #s]
    →
    (#1; {#ND}ProductionNames[#s])
   ;
  ProductionNames4-2 :
    {#ND}
    ProductionNames4[RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs], #Defines, #1, #s]
    →
    (#1; {#ND}ProductionNames[#s])
   ;
  ProductionNames4-3 :
    {#ND}
    ProductionNames4[RAW-FormConstruction[#Constructor, #ScopeSortList, #InheritedRefs], #Defines, #1, #s]
    →
    {#ND}
    ProductionNames3[#Defines, #1, #s]
   ;
  ProductionWord[$String] :: Text ;
  ProductionWord-1 : ProductionWord[#word] → $TextCons[$TextChars[Stringify[#word]], $TextNil] ;
  RegExpLeafName[$String, RawRegExpSimple] :: Text ;
  CookBase-RegExpLeafName-1[Data[#SortName, #String#]] :
    RegExpLeafName[#SortName, RAW-RegExpString[#String#]]
    →
    $TextCons[$TextChars[#SortName], $TextCons[$TextChars["_SomeS"], $TextCons[$TextChars[$[Mangle, #String#]], $TextNil]]]
   ;
  CookBase-RegExpLeafName-2[Data[#SortName, #Word#]] :
    RegExpLeafName[#SortName, RAW-RegExpWord[#Word#]]
    →
    $TextCons[$TextChars[#SortName], $TextCons[$TextChars["_SomeW"], $TextCons[$TextChars[$[Mangle, #Word#]], $TextNil]]]
   ;
  RegExpLeafSuffix[RawRegExpSimple, $String] :: $String ;
  CookBase-RegExpLeafSuffix-1[Data[#String#]] :
    RegExpLeafSuffix[RAW-RegExpString[#String#], #prefix]
    →
    $[':', #prefix, #String#]
   ;
  CookBase-RegExpLeafSuffix-2[Data[#Word#]] :
    RegExpLeafSuffix[RAW-RegExpWord[#Word#], #prefix]
    →
    $[':', #prefix, #Word#]
   ;
  RegExpLeafWord[RawRegExpSimple] :: $String ;
  CookBase-RegExpLeafWord-1[Data[#String#]] : RegExpLeafWord[RAW-RegExpString[#String#]] → $[Rescape, #String#] ;
  CookBase-RegExpLeafWord-2[Data[#Word#]] : RegExpLeafWord[RAW-RegExpWord[#Word#]] → #Word# ;
  RemoveFirstName[NameSet] :: NameSet ;
  Prelude-RemoveFirstName-1[Data[#Names]] :
    RemoveFirstName[NAME_SET[#Names]]
    →
    NAME_SET[$[FromFirst, $[AfterFirst, #Names, ";"], ";"]]
   ;
  RemoveName[NameSet, $String] :: NameSet ;
  Prelude-RemoveName-1[Data[#Names, #Name]] :
    RemoveName[NAME_SET[#Names], #Name]
    →
    RemoveName1[#Names, $[':', ";", #Name, ";"]]
   ;
  RemoveName1[$String, $String] :: NameSet ;
  Prelude-RemoveName1-1[Copy[#Names, #NamePattern]] :
    RemoveName1[#Names, #NamePattern]
    →
    NAME_SET[$[If, $[Contains, #Names, #NamePattern], $[Replace, #Names, #NamePattern, ";"], #Names]]
   ;
  RuleTopSort[RawRule, $String] :: $String ;
  CookBase-RuleTopSort-1 :
    RuleTopSort[RAW-Rule[#Priority#, #Construction1#, #Construction2#, #Term#], #FallBack]
    →
    TermTopSort[#Construction2#, #FallBack]
   ;
  SamePrec[$Numeric, $Numeric] :: Boolean ;
  SamePrec-1[Data[#Prec1, #Prec2]] :
    SamePrec[#Prec1, #Prec2]
    →
    $[If, $[NumericEqual, #Prec1, #Prec2], B_TRUE, B_FALSE]
   ;
  SameScopeSort[RawScopeSort, $Numeric, RawRepeat, RawScopeSort, $Numeric, RawRepeat] :: Boolean ;
  SameScopeSort-1 :
    SameScopeSort[#Sort1, #Prec1, #Repeat1, #Sort2, #Prec2, #Repeat2]
    →
    SameScopeSort2[#Sort1, #Sort2, #Prec1, #Repeat1, #Prec2, #Repeat2]
   ;
  SameScopeSort2[RawScopeSort, RawScopeSort, $Numeric, RawRepeat, $Numeric, RawRepeat] :: Boolean ;
  SameScopeSort2-1 :
    SameScopeSort2[
     RAW-ScopeSort[#Sort1#, RAW-RepeatSingle, #SubstituteSorts1#],
     RAW-ScopeSort[#Sort2#, RAW-RepeatSingle, #SubstituteSorts2#],
     #Prec1,
     #Repeat1,
     #Prec2,
     #Repeat2]
    →
    And[SameSort[#Sort1#, #Sort2#], And[SamePrec[#Prec1, #Prec2], SubRepeat[#Repeat1, #Repeat2]]]
   ;
  SameScopeSort2-2 :
    SameScopeSort2[
     RAW-ScopeSortBinder[#Variable1#, #Sort1#],
     RAW-ScopeSort[#Sort2#, RAW-RepeatSingle, #SubstituteSorts2#],
     #P1,
     #R1,
     #P2,
     #R2]
    →
    B_FALSE
   ;
  SameScopeSort2-3 :
    SameScopeSort2[
     RAW-ScopeSort[#Sort1#, RAW-RepeatSingle, #SubstituteSorts1#],
     RAW-ScopeSortBinder[#Variable2#, #Sort2#],
     #P1,
     #R1,
     #P2,
     #R2]
    →
    B_FALSE
   ;
  SameScopeSort2-4 :
    SameScopeSort2[RAW-ScopeSortBinder[#Variable1#, #Sort1#], RAW-ScopeSortBinder[#Variable2#, #Sort2#], #P1, #R1, #P2, #R2]
    →
    SameSort[#Sort1#, #Sort2#]
   ;
  SameSort[RawSort, RawSort] :: Boolean ;
  SameSort-1[Data[#1, #2]] : SameSort[#1, #2] → SameSort2[#1, #2] ;
  SameSort2[RawSort, RawSort] :: Boolean ;
  SameSort2-1[Data[#SortName1#, #SortName2#]] :
    SameSort2[
     RAW-Sort[RAW-SortName[#SortName1#, #MetaVariables1#], #SimpleSorts1#],
     RAW-Sort[RAW-SortName[#SortName2#, #MetaVariables2#], #SimpleSorts2#]]
    →
    $[If, $[Equal, #SortName1#, #SortName2#], B_TRUE, B_FALSE]
   ;
  SameSort2-2 :
    SameSort2[$[NotMatch, RAW-Sort[RAW-SortName[#SortName1#, #MetaVariables1#], #SimpleSorts1#], #1], #2]
    →
    B_FALSE
   ;
  SameSort2-3 :
    SameSort2[#1, $[NotMatch, RAW-Sort[RAW-SortName[#SortName2#, #MetaVariables2#], #SimpleSorts2#], #2]]
    →
    B_FALSE
   ;
  SameString[$String, $String] :: Boolean ;
  Prelude-SameString-1[Data[#1, #2]] : SameString[#1, #2] → $[If, $[Equal, #1, #2], B_TRUE, B_FALSE] ;
  ScopeSortMetaVar[RawScopeSort, $Numeric] :: $String ;
  CookBase-ScopeSortMetaVar-1[Discard[#SubstituteSorts#]] :
    ScopeSortMetaVar[RAW-ScopeSort[#Sort#, RAW-RepeatSingle, #SubstituteSorts#], #n]
    →
    SortMetaVar[#Sort#, #n]
   ;
  CookBase-ScopeSortMetaVar-2 :
    ScopeSortMetaVar[RAW-ScopeSortBinder[#Variable#, #Sort#], #n]
    →
    SortMetaVar[#Sort#, #n]
   ;
  ScopeSortName[RawScopeSort] :: $String ;
  CookBase-ScopeSortName-1[Discard[#SubstituteSorts#]] :
    ScopeSortName[RAW-ScopeSort[#Sort#, #Repeat#, #SubstituteSorts#]]
    →
    SortNameWithRepeat[#Sort#, #Repeat#]
   ;
  CookBase-ScopeSortName-2 : ScopeSortName[RAW-ScopeSortBinder[#Variable#, #Sort#]] → SortName[#Sort#] ;
  SingletonTextMap[$String, Text] :: TextMapSort ;
  Prelude-SingletonTextMap-1[Data[#Key]] : SingletonTextMap[#Key, #Value] → {#Key : #Value}TEXT_MAP[(#Key; )] ;
  SortMetaVar[RawSort, $Numeric] :: $String ;
  CookBase-SortMetaVar-1[Data[#Sort]] : SortMetaVar[#Sort, #n] → SortMetaVar2[#Sort, #n] ;
  SortMetaVar2[RawSort, $Numeric] :: $String ;
  CookBase-SortMetaVar2-1 :
    SortMetaVar2[RAW-Sort[RAW-SortName[#SortName#, (#MetaVariable#; )], #SimpleSorts#], #n]
    →
    #MetaVariable#
   ;
  CookBase-SortMetaVar2-2 :
    SortMetaVar2[RAW-Sort[RAW-SortName[#SortName#, ()], #SimpleSorts#], #n]
    →
    $[':', "#_", #SortName#, "_", $[FormatNumber, #n]]
   ;
  CookBase-SortMetaVar2-3 :
    SortMetaVar2[$[NotMatch, RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#], #], #n]
    →
    "#bad"
   ;
  SortName[RawSort] :: $String ;
  CookBase-SortName-1[Data[#Sort]] : SortName[#Sort] → SortName2[#Sort] ;
  SortName1[$String] :: $String ;
  CookBase-SortName1-1 : SortName1[#SortName] → #SortName ;
  SortName2[RawSort] :: $String ;
  CookBase-SortName2-1 :
    SortName2[RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#]]
    →
    SortName1[#SortName#]
   ;
  CookBase-SortName2-2 :
    SortName2[$[NotMatch, RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#], #]]
    →
    $[Show, #]
   ;
  {$String : SortEntry}SortNameList :: $List[$String] ;
  CookN-SortNameList-1 : {#ND}SortNameList → {#ND}SortNameList2[$[{#ND}Keys[$String]]] ;
  {$String : SortEntry}SortNameList2[$List[$String]] :: $List[$String] ;
  CookN-SortNameList2-1 : {#ND}SortNameList2[()] → () ;
  CookN-SortNameList2-2 : {#ND; #Name : #Entry}SortNameList2[(#Name; #Names)] → {#ND}SortNameList3[#Entry, #Names] ;
  {$String : SortEntry}SortNameList3[SortEntry, $List[$String]] :: $List[$String] ;
  CookN-SortNameList3-1 :
    {#ND}
    SortNameList3[SE_SORT[#Defines1, #Name1, #Precs1, #Wrapper1], #Names]
    →
    (#Name1; {#ND}SortNameList2[#Names])
   ;
  CookN-SortNameList3-2 :
    {#ND}
    SortNameList3[$[NotMatch, SE_SORT[#Defines1, #Name1, #Precs1, #Wrapper1], #_], #Names]
    →
    {#ND}
    SortNameList2[#Names]
   ;
  SortNameWithRepeat[RawSort, RawRepeat] :: $String ;
  CookBase-SortNameWithRepeat-1 : SortNameWithRepeat[#Sort, #Repeat] → SortNameWithRepeat1[SortName[#Sort], #Repeat] ;
  SortNameWithRepeat1[$String, RawRepeat] :: $String ;
  CookBase-SortNameWithRepeat1-1[Data[#FullSortName]] :
    SortNameWithRepeat1[#FullSortName, #Repeat]
    →
    If[SameString["", #FullSortName], "", SortNameWithRepeat2[#FullSortName, #Repeat]]
   ;
  SortNameWithRepeat2[$String, RawRepeat] :: $String ;
  CookBase-SortNameWithRepeat2-1 : SortNameWithRepeat2[#FullSortName, RAW-RepeatSingle] → #FullSortName ;
  CookBase-SortNameWithRepeat2-2 :
    SortNameWithRepeat2[#FullSortName, RAW-RepeatMaybe]
    →
    $[':', #FullSortName, "_Maybe"]
   ;
  CookBase-SortNameWithRepeat2-3 :
    SortNameWithRepeat2[#FullSortName, RAW-RepeatMaybeSome]
    →
    $[':', #FullSortName, "_MaybeSome"]
   ;
  CookBase-SortNameWithRepeat2-4 :
    SortNameWithRepeat2[#FullSortName, RAW-RepeatSome]
    →
    $[':', #FullSortName, "_Some"]
   ;
  CookBase-SortNameWithRepeat2-5 :
    SortNameWithRepeat2[#FullSortName, RAW-RepeatSomeSep[#RegExpLeaf#]]
    →
    RegExpLeafSuffix[#RegExpLeaf#, $[':', #FullSortName, "_Some_"]]
   ;
  SortRepeatString[$String, RawRepeat] :: $String ;
  CookBase-SortRepeatString-1[Data[#SortName]] :
    SortRepeatString[#SortName, #Repeat]
    →
    $[IfEmpty, #SortName, "", SortRepeatString2[#SortName, #Repeat]]
   ;
  SortRepeatString2[$String, RawRepeat] :: $String ;
  CookBase-SortRepeatString2-1 : SortRepeatString2[#SortName, RAW-RepeatSingle] → #SortName ;
  CookBase-SortRepeatString2-2 : SortRepeatString2[#SortName, RAW-RepeatMaybe] → $[':', #SortName, "?"] ;
  CookBase-SortRepeatString2-3 : SortRepeatString2[#SortName, RAW-RepeatMaybeSome] → $[':', #SortName, "*"] ;
  CookBase-SortRepeatString2-4 : SortRepeatString2[#SortName, RAW-RepeatSome] → $[':', #SortName, "+"] ;
  CookBase-SortRepeatString2-5 :
    SortRepeatString2[#SortName, RAW-RepeatSomeSep[#RegExpLeaf#]]
    →
    RegExpLeafSuffix[#RegExpLeaf#, $[':', #SortName, "+_"]]
   ;
  SortVar[RawSort] :: $String ;
  CookBase-SortVar-1[Data[#Sort]] : SortVar[#Sort] → SortVar2[#Sort] ;
  SortVar2[RawSort] :: $String ;
  CookBase-SortVar2-1[Data[#SortName]] :
    SortVar2[RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#]]
    →
    SortVar3[#SortName#, #MetaVariables#]
   ;
  CookBase-SortVar2-2 :
    SortVar2[$[NotMatch, RAW-Sort[RAW-SortName[#SortName#, #MetaVariables#], #SimpleSorts#], #]]
    →
    "bad"
   ;
  SortVar3[$String, $List[$String]] :: $String ;
  CookBase-SortVar3-1 : SortVar3[#SortName, ()] → $[':', "v", #SortName] ;
  CookBase-SortVar3-2 : SortVar3[#SortName, (#MetaVar; )] → $[':', "v", #SortName, $[Replace, #MetaVar, "#", ""]] ;
  (∀ a_73 . {$String : $StringEntry}Special_error[Text] :: a_73 );
  Prelude-Special_error-1[Data[#text]] :
    {#L}
    Special_error[#text]
    →
    Special_error-2[$[{#L}Get[$String], "$$Location", "?"], TextToString[#text]]
   ;
  (∀ a_46 . Special_error-2[$String, $String] :: a_46 );
  Prelude-Special_error-2-1[Data[#loc, #mess]] :
    {#L}
    Special_error-2[#loc, #mess]
    →
    $[Error, $[':', "Error@", #loc, ": ", #mess]]
   ;
  (∀ a_122 . {$String : $StringEntry}Special_message[Text] :: a_122 );
  Prelude-Special_message-1[Data[#text]] : {#L}Special_message[#text] → Special_message-2[TextToString[#text]] ;
  (∀ a_103 . Special_message-2[$String] :: a_103 );
  Prelude-Special_message-2-1[Data[#mess]] : {#L}Special_message-2[#mess] → $[Echo, #mess] ;
  StringToText[$String] :: Text ;
  Prelude-StringToText-1 : StringToText[#] → $TextCons[$TextChars[#], $TextNil] ;
  Stringify[$String] :: $String ;
  Prelude-Stringify-1[Data[#]] : Stringify[#] → $[Escape, #] ;
  SubRepeat[RawRepeat, RawRepeat] :: Boolean ;
  SubRepeat-many-many : SubRepeat[RAW-RepeatMaybeSome, RAW-RepeatMaybeSome] → B_TRUE ;
  SubRepeat-many-other[Data[#_]] : SubRepeat[RAW-RepeatMaybeSome, $[NotMatch, RAW-RepeatMaybeSome, #_]] → B_FALSE ;
  SubRepeat-maybe-many : SubRepeat[RAW-RepeatMaybe, RAW-RepeatMaybeSome] → B_TRUE ;
  SubRepeat-maybe-maybe : SubRepeat[RAW-RepeatMaybe, RAW-RepeatMaybe] → B_TRUE ;
  SubRepeat-maybe-single : SubRepeat[RAW-RepeatMaybe, RAW-RepeatSingle] → B_FALSE ;
  SubRepeat-maybe-some : SubRepeat[RAW-RepeatMaybe, RAW-RepeatSome] → B_FALSE ;
  SubRepeat-maybe-somesep : SubRepeat[RAW-RepeatMaybe, RAW-RepeatSomeSep[#RegExpLeaf2#]] → B_FALSE ;
  SubRepeat-single : SubRepeat[RAW-RepeatSingle, #Repeat2] → B_TRUE ;
  SubRepeat-some-many : SubRepeat[RAW-RepeatSome, RAW-RepeatMaybeSome] → B_TRUE ;
  SubRepeat-some-maybe : SubRepeat[RAW-RepeatSome, RAW-RepeatMaybe] → B_FALSE ;
  SubRepeat-some-single : SubRepeat[RAW-RepeatSome, RAW-RepeatSingle] → B_FALSE ;
  SubRepeat-some-some : SubRepeat[RAW-RepeatSome, RAW-RepeatSome] → B_TRUE ;
  SubRepeat-some-somesep : SubRepeat[RAW-RepeatSome, RAW-RepeatSomeSep[#RegExpLeaf2#]] → B_FALSE ;
  SubRepeat-somesep-many : SubRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatMaybeSome] → B_FALSE ;
  SubRepeat-somesep-maybe : SubRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatMaybe] → B_FALSE ;
  SubRepeat-somesep-single : SubRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatSingle] → B_FALSE ;
  SubRepeat-somesep-some : SubRepeat[RAW-RepeatSomeSep[#RegExpLeaf1#], RAW-RepeatSome] → B_FALSE ;
  SubRepeat-somesep-string-string :
    SubRepeat[RAW-RepeatSomeSep[RAW-RegExpString[#String1#]], RAW-RepeatSomeSep[RAW-RegExpString[#String2#]]]
    →
    SameString[UnString[#String1#], UnString[#String2#]]
   ;
  SubRepeat-somesep-string-word :
    SubRepeat[RAW-RepeatSomeSep[RAW-RegExpString[#String1#]], RAW-RepeatSomeSep[RAW-RegExpWord[#Word2#]]]
    →
    SameString[UnString[#String1#], #Word2#]
   ;
  SubRepeat-somesep-word-string :
    SubRepeat[RAW-RepeatSomeSep[RAW-RegExpWord[#Word1#]], RAW-RepeatSomeSep[RAW-RegExpString[#String2#]]]
    →
    SameString[#Word1#, UnString[#String2#]]
   ;
  SubRepeat-somesep-word-word :
    SubRepeat[RAW-RepeatSomeSep[RAW-RegExpWord[#Word1#]], RAW-RepeatSomeSep[RAW-RegExpWord[#Word2#]]]
    →
    SameString[#Word1#, #Word2#]
   ;
  {$String : SortEntry}SynthesizedMapNames :: NameSet ;
  CookN-SynthesizedMapNames-1 :
    {#ND}
    SynthesizedMapNames
    →
    FoldWhen[ok_86 k_75 ns_53 . {#ND}KeepSynthesizedMapEntry[ok_86, k_75, ns_53], $[{#ND}Keys], NoNames]
   ;
  {$String : SortEntry}SynthesizedNames :: NameSet ;
  CookN-SynthesizedNames-1 :
    {#ND}
    SynthesizedNames
    →
    FoldWhen[ok_2 k_28 ns_70 . {#ND}KeepSynthesizedEntry[ok_2, k_28, ns_70], $[{#ND}Keys[$String]], NoNames]
   ;
  TermTopSort[RawTerm, $String] :: $String ;
  CookBase-TermTopSort-1 :
    TermTopSort[RAW-VariableUse[#Variable#, #Attributes#], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  CookBase-TermTopSort-10 :
    TermTopSort[RAW-Special[#Variable, #Concrete], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  CookBase-TermTopSort-2 :
    TermTopSort[RAW-VariableUseSorted[#Constructor1#, #Repeat1#, #Variable#, #Attributes#], #FallbackSortName]
    →
    SortRepeatString[#Constructor1#, #Repeat1#]
   ;
  CookBase-TermTopSort-3 :
    TermTopSort[RAW-Parsed[#Parsed, #Attributes], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  CookBase-TermTopSort-4 :
    TermTopSort[RAW-ParsedSorted[#SortName, #Repeat, #Parsed, #Attributes#], #FallbackSortName]
    →
    SortName1[#SortName]
   ;
  CookBase-TermTopSort-5 :
    TermTopSort[RAW-Construction[#Constructor#, #Scopes#, #Attributes#], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  CookBase-TermTopSort-6 :
    TermTopSort[RAW-ConstructionSorted[#Constructor1#, #Repeat1#, #Constructor2#, #Scopes#, #Attributes#], #FallbackSortName]
    →
    SortRepeatString[#Constructor1#, #Repeat1#]
   ;
  CookBase-TermTopSort-7 :
    TermTopSort[RAW-MetaApplication[#MetaVariable#, #Terms#, #Attributes#], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  CookBase-TermTopSort-8 :
    TermTopSort[RAW-MetaApplicationSorted[#Constructor1#, #Repeat1#, #MetaVariable#, #Terms#, #Attributes#], #FallbackSortName]
    →
    SortRepeatString[#Constructor1#, #Repeat1#]
   ;
  CookBase-TermTopSort-9 :
    TermTopSort[RAW-Literal[#Literal#, #Attributes#], #FallbackSortName]
    →
    SortName1[CheckString[#FallbackSortName]]
   ;
  TextFold[$List[Text], Text] :: Text ;
  Prelude-TextFold-1[Discard[#sep]] : TextFold[(), #sep] → $TextNil ;
  Prelude-TextFold-2 :
    TextFold[(#1; #s), #sep]
    →
    $TextCons[$TextEmbed[AsText[#1]], $TextCons[$TextEmbed[AsText[TextFold1[#s, #sep]]], $TextNil]]
   ;
  TextFold1[$List[Text], Text] :: Text ;
  Prelude-TextFold1-1[Discard[#sep]] : TextFold1[(), #sep] → $TextNil ;
  Prelude-TextFold1-2[Copy[#sep]] :
    TextFold1[(#1; #s), #sep]
    →
    $TextCons[
     $TextEmbed[AsText[#sep]],
     $TextCons[$TextEmbed[AsText[#1]], $TextCons[$TextEmbed[AsText[TextFold1[#s, #sep]]], $TextNil]]]
   ;
  TextFoldMap[TextMapSort, Text] :: Text ;
  Prelude-TextFoldMap-1 :
    TextFoldMap[{#map}TEXT_MAP[#Keys], #sep]
    →
    TextFold[MapWhen[ok_54 k_51 . {#map}TextLookup[ok_54, k_51], #Keys], #sep]
   ;
  {$String : Text}TextLookup[Ok, $String] :: Text ;
  Prelude-TextLookup-1[Data[#Key]] : {#map}TextLookup[OK, #Key] → $[{#map}Get[Text], #Key, $TextNil] ;
  TextPartToString[Text-Part] :: $String ;
  Prelude-TextPartToString-1 : TextPartToString[$TextChars[#String]] → #String ;
  Prelude-TextPartToString-2 : TextPartToString[$TextBreak[#String]] → #String ;
  Prelude-TextPartToString-3 : TextPartToString[$TextSeparator] → "" ;
  Prelude-TextPartToString-4 : TextPartToString[$TextGroup[#Text]] → TextToString[#Text] ;
  Prelude-TextPartToString-5 : TextPartToString[$TextIndent[#Text]] → TextToString[#Text] ;
  Prelude-TextPartToString-6 : TextPartToString[$TextEmbed[#Text]] → TextToString[#Text] ;
  TextToString[Text] :: $String ;
  Prelude-TextToString-1 :
    TextToString[$TextCons[#Part, #Text]]
    →
    TextToString2[TextPartToString[#Part], TextToString[#Text]]
   ;
  Prelude-TextToString-2 : TextToString[$TextNil] → "" ;
  Prelude-TextToString-3 : TextToString[v] → $[Show, v] ;
  TextToString2[$String, $String] :: $String ;
  Prelude-TextToString2-1[Data[#1, #2]] : TextToString2[#1, #2] → $[':', #1, #2] ;
  Then-DerivedSorts-Defines[Ok, Define, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-Then-DerivedSorts-Defines-1 :
    Then-DerivedSorts-Defines[OK, (D_ABSTRACTION a_23 . #Define[a_23]), #derived]
    →
    Then-DerivedSorts-Defines[OK, #Define[dummy], #derived]
   ;
  CookN-Then-DerivedSorts-Defines-2 :
    Then-DerivedSorts-Defines[OK, D_FORM[#Form, #Kind], #derived]
    →
    DerivedSorts-Form[#Form, #derived]
   ;
  CookN-Then-DerivedSorts-Defines-3 :
    Then-DerivedSorts-Defines[OK, D_RULE[#Rule, #SortName, #IsDataEquivalence], #derived]
    →
    DerivedSorts-Rule[#Rule, #derived]
   ;
  CookN-Then-DerivedSorts-Defines-4 :
    Then-DerivedSorts-Defines[OK, D_SYNTHESIZES[#AttributeName], #derived]
    →
    #derived
   ;
  CookN-Then-DerivedSorts-Defines-5 : Then-DerivedSorts-Defines[OK, D_NONE, #derived] → #derived ;
  Then-DerivedSorts-Scope[Ok, RawScope, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-Then-DerivedSorts-Scope-1 :
    Then-DerivedSorts-Scope[OK, RAW-Scope[#Variables, #Term], #derived]
    →
    DerivedSorts-Term[#Term, #derived]
   ;
  Then-DerivedSorts-Term[Ok, RawTerm, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-Then-DerivedSorts-Term-1 : Then-DerivedSorts-Term[OK, #Term, #derived] → DerivedSorts-Term[#Term, #derived] ;
  {$String : SortEntry}Then-DerivedSorts2[Ok, $String, $List[DERIVED_SORT]] :: $List[DERIVED_SORT] ;
  CookN-Then-DerivedSorts2-1 :
    {#ND}
    Then-DerivedSorts2[OK, #name, #derived]
    →
    DerivedSorts2[$[{#ND}Get[SortEntry], #name, SE_NONE], #derived]
   ;
  (∀ a_88 . ThenAsText[Ok, a_88] :: Text );
  Prelude-ThenAsText-1[Data[#text]] : ThenAsText[OK, #text] → #text ;
  ThenRemoveAttributeName[Ok, RawAttribute, NameSet] :: NameSet ;
  CookN-ThenRemoveAttributeName-1 :
    ThenRemoveAttributeName[OK, RAW-Attribute[#AttributeKind#, #AttributeName#, #AttributeValue#], #MapNames]
    →
    RemoveName[#MapNames, #AttributeName#]
   ;
  ThenRemoveName[Ok, NameSet, $String] :: NameSet ;
  Prelude-ThenRemoveName-1 : ThenRemoveName[OK, #NameSet, #Name] → RemoveName[#NameSet, #Name] ;
  (∀ a_185 . Tl[$List[a_185]] :: $List[a_185] );
  Prelude-Tl-1 : Tl[(#; ##)] → ## ;
  Prelude-Tl-2 : Tl[()] → $[Error, "Tl of empty list"] ;
  TokenName[$String] :: Text ;
  CookBase-TokenName-1[Data[#SortName]] :
    TokenName[#SortName]
    →
    $TextCons[$TextChars["T"], $TextCons[$TextChars[$[Mangle, $[Trim, #SortName]]], $TextNil]]
   ;
  {$String : SortEntry}TokenNameList :: $List[$String] ;
  CookN-TokenNameList-1 : {#ND}TokenNameList → {#ND}TokenNameList2[$[{#ND}Keys[$String]]] ;
  {$String : SortEntry}TokenNameList2[$List[$String]] :: $List[$String] ;
  CookN-TokenNameList2-1 : {#ND}TokenNameList2[()] → () ;
  CookN-TokenNameList2-2 :
    {#ND; #Name : #Entry}
    TokenNameList2[(#Name; #Names)]
    →
    {#ND}
    TokenNameList3[#Entry, #Name, #Names]
   ;
  {$String : SortEntry}TokenNameList3[SortEntry, $String, $List[$String]] :: $List[$String] ;
  CookN-TokenNameList3-1 :
    {#ND}
    TokenNameList3[SE_TOKEN[#String1], #Name, #Names]
    →
    (#Name; {#ND}TokenNameList2[#Names])
   ;
  CookN-TokenNameList3-2 :
    {#ND}
    TokenNameList3[$[NotMatch, SE_TOKEN[#String1], #_], #Name, #Names]
    →
    {#ND}
    TokenNameList2[#Names]
   ;
  Trim[$String] :: $String ;
  Prelude-Trim-1[Data[#]] : Trim[#] → $[Trim, #] ;
  (∀ a_42 . UnLift[Lifted[a_42]] :: a_42 );
  Prelude-UnLift-1 : UnLift[LIFTED[#]] → # ;
  UnString[$String] :: $String ;
  Prelude-UnString-1[Data[#]] : UnString[#] → $[Rescape, #] ;
  UnionNames[NameSet, NameSet] :: NameSet ;
  Prelude-UnionNames-1[Data[#Names1, #Names2]] :
    UnionNames[#Names1, #Names2]
    →
    UnionNames1[#Names1, FoldNamesWhen[ok_180 a_1 bs . ThenRemoveName[ok_180, bs, a_1], #Names1, #Names2]]
   ;
  UnionNames1[NameSet, NameSet] :: NameSet ;
  Prelude-UnionNames1-1 : UnionNames1[NAME_SET[#1], NAME_SET[#2]] → NAME_SET[$[':', #1, $[AfterFirst, #2, ";"]]] ;
  VariableMarker[FormKind, Text] :: Text ;
  VariableMarker-1[Data[#Kind]] : VariableMarker[#Kind, #Other] → VariableMarker2[#Kind, #Other] ;
  VariableMarker2[FormKind, Text] :: Text ;
  VariableMarker2-1 :
    VariableMarker2[FK_SYMBOL[$False], #Other]
    →
    $TextCons[$TextChars["!!!"], $TextCons[$TextEmbed[AsText[#Other]], $TextNil]]
   ;
  VariableMarker2-2 :
    VariableMarker2[FK_SYMBOL[$True], #Other]
    →
    $TextCons[$TextChars["!!"], $TextCons[$TextEmbed[AsText[#Other]], $TextNil]]
   ;
  VariableMarker2-3 : VariableMarker2[$[NotMatch, FK_SYMBOL[#IsStatic], #Kind], #Other] → #Other ;
  (∀ a_38 . {$String : $StringEntry}When[Ok, a_38] :: a_38 );
  Prelude-When-1 : {#E}When[OK, #] → {#E}# ;
  (∀ b_46 a_28 . WrappedTextFold[$List[Text], a_28, Text, b_46] :: Text );
  Prelude-WrappedTextFold-1[Discard[#open, #sep, #close]] : WrappedTextFold[(), #open, #sep, #close] → $TextNil ;
  Prelude-WrappedTextFold-2 :
    WrappedTextFold[(#1; #s), #open, #sep, #close]
    →
    $TextCons[
     $TextEmbed[AsText[#open]],
     $TextCons[
      $TextEmbed[AsText[#1]],
      $TextCons[$TextEmbed[AsText[TextFold1[#s, #sep]]], $TextCons[$TextEmbed[AsText[#close]], $TextNil]]]]
   ;
  _DefineLessEqual[Define, Define] :: Boolean ;
  CookN-DLE-Abstraction-Form : _DefineLessEqual[(D_ABSTRACTION a_13 . #D1[a_13]), D_FORM[#F2, #K2]] → B_TRUE ;
  CookN-DLE-Abstraction-Rule : _DefineLessEqual[(D_ABSTRACTION a_118 . #D1[a_118]), D_RULE[#R2, #S2, #D2]] → B_TRUE ;
  CookN-DLE-Abstraction-Synthesizes :
    _DefineLessEqual[(D_ABSTRACTION a_123 . #D1[a_123]), D_SYNTHESIZES[#A2]]
    →
    B_TRUE
   ;
  CookN-DLE-Form-Abstraction : _DefineLessEqual[D_FORM[#F1, #K1], (D_ABSTRACTION a_84 . #D2[a_84])] → B_FALSE ;
  CookN-DLE-Form-Form : _DefineLessEqual[D_FORM[#F1, #FK1], D_FORM[#F2, #FK2]] → _FormLess[#F1, #F2] ;
  CookN-DLE-Form-Rule : _DefineLessEqual[D_FORM[#F1, #K1], D_RULE[#R2, #S2, #D2]] → B_TRUE ;
  CookN-DLE-Form-Synthesizes : _DefineLessEqual[D_FORM[#F1, #K1], D_SYNTHESIZES[#A2]] → B_TRUE ;
  CookN-DLE-Rule-Abstraction : _DefineLessEqual[D_RULE[#R1, #S1, #D1], (D_ABSTRACTION a_154 . #D2[a_154])] → B_FALSE ;
  CookN-DLE-Rule-Form : _DefineLessEqual[D_RULE[#R1, #S1, #D1], D_FORM[#F2, #K2]] → B_FALSE ;
  CookN-DLE-Rule-Rule : _DefineLessEqual[D_RULE[#R1, #S1, #D1], D_RULE[#R2, #S2, #D2]] → B_FALSE ;
  CookN-DLE-Rule-Synthesizes : _DefineLessEqual[D_RULE[#R1, #S1, #D1], D_SYNTHESIZES[#A2]] → B_FALSE ;
  CookN-DLE-Syntesizes-Synthesizes : _DefineLessEqual[D_SYNTHESIZES[#A1], D_SYNTHESIZES[#A2]] → B_FALSE ;
  CookN-DLE-Synthesizes-Abstraction : _DefineLessEqual[D_SYNTHESIZES[#A1], (D_ABSTRACTION a_7 . #D2[a_7])] → B_FALSE ;
  CookN-DLE-Synthesizes-Form : _DefineLessEqual[D_SYNTHESIZES[#A1], D_FORM[#F2, #K2]] → B_FALSE ;
  CookN-DLE-Synthesizes-Rule : _DefineLessEqual[D_SYNTHESIZES[#A1], D_RULE[#R2, #S2, #D2]] → B_TRUE ;
  'CookN-_DefineLessEqual-1' :
    _DefineLessEqual[(D_ABSTRACTION a_47 . #Define1[a_47]), (D_ABSTRACTION a_92 . #Define2[a_92])]
    →
    (_DefineLessEqual2 a_4 . _DefineLessEqual[#Define1[a_4], #Define2[a_4]])
   ;
  (_DefineLessEqual2 a_86 : RawSortParam . Boolean) :: Boolean ;
  'CookN-_DefineLessEqual2-1' : (_DefineLessEqual2 a_243 . B_TRUE) → B_TRUE ;
  'CookN-_DefineLessEqual2-2' : (_DefineLessEqual2 a_57 . B_FALSE) → B_FALSE ;
  _DefinePrec[Define] :: $Numeric ;
  'CookN-_DefinePrec-1' : _DefinePrec[(D_ABSTRACTION a_8 . #Define[a_8])] → _DefinePrec[#Define[dummy]] ;
  'CookN-_DefinePrec-2' :
    _DefinePrec[D_FORM[RAW-FormParsedSorted[#Name, #ParsedForm, #Precedence, #InheritedRefs], #Kind]]
    →
    #Precedence
   ;
  'CookN-_DefinePrec-3' :
    _DefinePrec[D_FORM[RAW-FormParsedUnsorted[#ParsedForm, #Precedence, #InheritedRefs], #Kind]]
    →
    #Precedence
   ;
  'CookN-_DefinePrec-4' :
    _DefinePrec[D_FORM[RAW-FormConstruction[#Constructor, #ScopeSorts, #InheritedRefs], #Kind]]
    →
    0
   ;
  'CookN-_DefinePrec-5' : _DefinePrec[D_SYNTHESIZES[#AttributeName]] → 0 ;
  'CookN-_DefinePrec-6' : _DefinePrec[D_RULE[#Rule, #SortName, #IsData]] → 0 ;
  _DefineWrapper[Define, $String, Wrapper] :: Wrapper ;
  'CookN-_DefineWrapper-1' :
    _DefineWrapper[(D_ABSTRACTION a_78 . #Define[a_78]), #Name, #Wrapper]
    →
    _DefineWrapper[#Define[dummy], #Name, #Wrapper]
   ;
  'CookN-_DefineWrapper-2' :
    _DefineWrapper[D_FORM[RAW-FormParsedSorted[#Name, #ParsedForm, #Prec, #InheritedRefs], #Kind], #Name, #Wrapper]
    →
    _DefineWrapperForm[#ParsedForm, #Prec, #Kind, #Name, #Wrapper]
   ;
  'CookN-_DefineWrapper-3' :
    _DefineWrapper[D_FORM[RAW-FormParsedUnsorted[#ParsedForm, #Prec, #InheritedRefs], #Kind], #Name, #Wrapper]
    →
    _DefineWrapperForm[#ParsedForm, #Prec, #Kind, #Name, #Wrapper]
   ;
  'CookN-_DefineWrapper-4' :
    _DefineWrapper[D_FORM[RAW-FormConstruction[#Constructor, #ScopeSorts, #InheritedRefs], #Kind], #Name, #Wrapper]
    →
    #Wrapper
   ;
  'CookN-_DefineWrapper-5' : _DefineWrapper[D_SYNTHESIZES[#AttributeName], #Name, #Wrapper] → #Wrapper ;
  'CookN-_DefineWrapper-6' : _DefineWrapper[D_RULE[#Rule, #SortName, #IsData], #Name, #Wrapper] → #Wrapper ;
  _DefineWrapperForm[RawParsedForm, $Numeric, FormKind, $String, Wrapper] :: Wrapper ;
  'CookN-_DefineWrapperForm-1' :
    _DefineWrapperForm[#ParsedForm, #Prec, FK_SUGAR[#Term], #Name, #OldWrapper]
    →
    _DefineWrapperSugar[#ParsedForm, $False, #ParsedForm, #Prec, #Term, #Name, #OldWrapper]
   ;
  'CookN-_DefineWrapperForm-2' :
    _DefineWrapperForm[#ParsedForm, #Prec, $[NotMatch, FK_SUGAR[#Term], #Kind], #Name, #OldWrapper]
    →
    #OldWrapper
   ;
  _DefineWrapperSugar[RawParsedForm, $Boolean, RawParsedForm, $Numeric, RawTerm, $String, Wrapper] :: Wrapper ;
  'CookN-_DefineWrapperSugar-1'[Data[#Prec1, #Prec]] :
    _DefineWrapperSugar[
     RAW-ParsedFormTerm[RAW-ScopeSortPrecRepeat[#ScopeSort1, #Prec1, #Repeat1], #ParsedForm1],
     #Candidate,
     #TopParsedForm,
     #TopPrec,
     #TopTerm,
     #Name,
     #OldWrapper]
    →
    $[
     If,
     #Candidate,
     #OldWrapper,
     $[
      If,
      $[LessThan, #TopPrec, #Prec1],
      #OldWrapper,
      _DefineWrapperSugar[#ParsedForm1, $True, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]]]
   ;
  'CookN-_DefineWrapperSugar-2' :
    _DefineWrapperSugar[RAW-ParsedFormWord[#Word, #ParsedForm], #Candidate, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
    →
    _DefineWrapperSugar[#ParsedForm, #Candidate, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
   ;
  'CookN-_DefineWrapperSugar-3' :
    _DefineWrapperSugar[RAW-ParsedFormSpace[#Space, #ParsedForm], #Candidate, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
    →
    _DefineWrapperSugar[#ParsedForm, #Candidate, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
   ;
  'CookN-_DefineWrapperSugar-4' :
    _DefineWrapperSugar[RAW-ParsedFormDone, $False, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
    →
    #OldWrapper
   ;
  'CookN-_DefineWrapperSugar-5' :
    _DefineWrapperSugar[RAW-ParsedFormDone, $True, #TopParsedForm, #TopPrec, #TopTerm, #Name, #OldWrapper]
    →
    Wrapper[#TopParsedForm]
   ;
  _FormLess[RawForm, RawForm] :: Boolean ;
  'CookN-_FormLess-1'[Data[#Prec1, #Prec2]] :
    _FormLess[
     RAW-FormParsedSorted[#Name1, #ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormParsedSorted[#Name2, #ParsedForm2, #Prec2, #InheritedRefs2]]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec2],
     _ParsedFormLess[#ParsedForm1, #ParsedForm2],
     $[If, $[LessThan, #Prec1, #Prec2], B_TRUE, B_FALSE]]
   ;
  'CookN-_FormLess-2'[Data[#Prec1, #Prec2]] :
    _FormLess[
     RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormParsedSorted[#Name2, #ParsedForm2, #Prec2, #InheritedRefs2]]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec2],
     _ParsedFormLess[#ParsedForm1, #ParsedForm2],
     $[If, $[LessThan, #Prec1, #Prec2], B_TRUE, B_FALSE]]
   ;
  'CookN-_FormLess-3'[Data[#Prec1, #Prec2]] :
    _FormLess[
     RAW-FormParsedSorted[#Name1, #ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormParsedUnsorted[#ParsedForm2, #Prec2, #InheritedRefs2]]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec2],
     _ParsedFormLess[#ParsedForm1, #ParsedForm2],
     $[If, $[LessThan, #Prec1, #Prec2], B_TRUE, B_FALSE]]
   ;
  'CookN-_FormLess-4'[Data[#Prec1, #Prec2]] :
    _FormLess[
     RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormParsedUnsorted[#ParsedForm2, #Prec2, #InheritedRefs2]]
    →
    $[
     If,
     $[NumericEqual, #Prec1, #Prec2],
     _ParsedFormLess[#ParsedForm1, #ParsedForm2],
     $[If, $[LessThan, #Prec1, #Prec2], B_TRUE, B_FALSE]]
   ;
  'CookN-_FormLess-5' :
    _FormLess[RAW-FormConstruction[#Constructor1, #ScopeSorts1, #InheritedRefs1], #Form2]
    →
    B_FALSE
   ;
  'CookN-_FormLess-6' :
    _FormLess[
     RAW-FormParsedSorted[#Name1, #ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormConstruction[#Constructor2, #ScopeSorts2, #InheritedRefs2]]
    →
    B_TRUE
   ;
  'CookN-_FormLess-7' :
    _FormLess[
     RAW-FormParsedUnsorted[#ParsedForm1, #Prec1, #InheritedRefs1],
     RAW-FormConstruction[#Constructor2, #ScopeSorts2, #InheritedRefs2]]
    →
    B_TRUE
   ;
  {$String : SortEntry}_InsertDefine[Define, $String, NameSet, ¹ok_30 : Ok s_50 : $String ss_33 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_InsertDefine-1'[Data[#Name], Share[#Define, #]] :
    {#ND}
    _InsertDefine[#Define, #Name, #Names, ¹ok_74 s_20 ss_71 . #[¹ok_74, s_20, ss_71]]
    →
    {#ND}
    _InsertDefine1[$[{#ND}Get[SortEntry], #Name, SE_NONE], #Define, #Name, #Names, ¹ok_12 s_88 ss_26 . #[¹ok_12, s_88, ss_26]]
   ;
  {$String : SortEntry}_InsertDefine1[SortEntry, Define, $String, NameSet, ¹ok_66 : Ok s_93 : $String ss_19 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_InsertDefine1-1' :
    {#ND}
    _InsertDefine1[
     SE_SORT[#existingDefines1, #Name1, #Precs1, #Wrapper1],
     #newDefine,
     #Name,
     #Names,
     ¹ok_155 s_183 ss_39 . #[¹ok_155, s_183, ss_39]]
    →
    {#ND}
    _InsertDefine4[
     _InsertDefine2[#existingDefines1, #newDefine],
     AddNameNumber[#Precs1, _DefinePrec[#newDefine]],
     #Name1,
     #Names,
     _DefineWrapper[#newDefine, #Name, #Wrapper1],
     ¹ok_65 s_315 ss_25 . #[¹ok_65, s_315, ss_25]]
   ;
  'CookN-_InsertDefine1-2' :
    {#ND}
    _InsertDefine1[SE_NONE, #newDefine, #Name, #Names, ¹ok_48 s_11 ss_173 . #[¹ok_48, s_11, ss_173]]
    →
    {#ND}
    _InsertDefine1b[
     #Name,
     #Names,
     #newDefine,
     AddNameNumber[NoNames, _DefinePrec[#newDefine]],
     _DefineWrapper[#newDefine, #Name, NoWrapper],
     ¹ok_56 s_48 ss_8 . #[¹ok_56, s_48, ss_8]]
   ;
  {$String : SortEntry}_InsertDefine1b[$String, NameSet, Define, NameSet, Wrapper, ¹ok_33 : Ok s_150 : $String ss_175 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_InsertDefine1b-1'[Data[#newDefine, #Name, #Precs, #Wrapper]] :
    {#ND}
    _InsertDefine1b[#Name, #Names, #newDefine, #Precs, #Wrapper, ¹ok_149 s_38 ss_74 . #[¹ok_149, s_38, ss_74]]
    →
    {#ND; #Name : SE_SORT[(#newDefine; ), #Name, #Precs, #Wrapper]}
    #[OK, #Name, AddName[#Names, #Name]]
   ;
  _InsertDefine2[$List[Define], Define] :: $List[Define] ;
  'CookN-_InsertDefine2-1' : _InsertDefine2[(), #newDefine] → (#newDefine; ) ;
  'CookN-_InsertDefine2-2' :
    _InsertDefine2[(#Define1; #Defines), #newDefine]
    →
    _InsertDefine3[_DefineLessEqual[#newDefine, #Define1], #newDefine, #Define1, #Defines]
   ;
  _InsertDefine3[Boolean, Define, Define, $List[Define]] :: $List[Define] ;
  'CookN-_InsertDefine3-1' :
    _InsertDefine3[B_TRUE, #newDefine, #Define1, #Defines]
    →
    (#newDefine; #Define1; #Defines)
   ;
  'CookN-_InsertDefine3-2' :
    _InsertDefine3[B_FALSE, #newDefine, #Define1, #Defines]
    →
    (#Define1; _InsertDefine2[#Defines, #newDefine])
   ;
  {$String : SortEntry}_InsertDefine4[
     $List[Define],
     NameSet,
     $String,
     NameSet,
     Wrapper,
     ¹ok_116 : Ok s_112 : $String ss_52 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_InsertDefine4-1'[Data[#Defines, #Name, #Precs, #Wrapper]] :
    {#ND}
    _InsertDefine4[#Defines, #Precs, #Name, #Names, #Wrapper, ¹ok_19 s_1 ss_60 . #[¹ok_19, s_1, ss_60]]
    →
    {#ND; #Name : SE_SORT[#Defines, #Name, #Precs, #Wrapper]}
    #[OK, #Name, #Names]
   ;
  {$String : SortEntry}_InsertDefines[$List[Define], $String, NameSet, ¹ok_5 : Ok s_25 : $String ss_13 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_InsertDefines-1' :
    {#ND}
    _InsertDefines[(), #Name, #Names, ¹ok_14 s_49 ss_80 . #[¹ok_14, s_49, ss_80]]
    →
    {#ND}
    #[OK, #Name, #Names]
   ;
  'CookN-_InsertDefines-2' :
    {#ND}
    _InsertDefines[(#Define; #Defines), #Name, #Names, ¹ok_49 s_288 ss_70 . #[¹ok_49, s_288, ss_70]]
    →
    {#ND}
    _InsertDefine[
     #Define,
     #Name,
     #Names,
     ¹ok1 s1 ss1 . '_then-InsertDefines'[¹ok1, #Defines, s1, ss1, ¹ok2_82 s2_51 ss2_98 . #[¹ok2_82, s2_51, ss2_98]]]
   ;
  _ParsedFormLess[RawParsedForm, RawParsedForm] :: Boolean ;
  'CookN-_ParsedFormLess-1' : _ParsedFormLess[RAW-ParsedFormDone, #PF2] → B_FALSE ;
  'CookN-_ParsedFormLess-2' : _ParsedFormLess[#PF1, RAW-ParsedFormDone] → B_TRUE ;
  'CookN-_ParsedFormLess-3' :
    _ParsedFormLess[RAW-ParsedFormWord[#W1, #PF1], RAW-ParsedFormTerm[#SSPR2, #PF2]]
    →
    B_TRUE
   ;
  'CookN-_ParsedFormLess-4' :
    _ParsedFormLess[RAW-ParsedFormTerm[#SSPR1, #PF1], RAW-ParsedFormWord[#W2, #PF2]]
    →
    B_FALSE
   ;
  'CookN-_ParsedFormLess-5'[Data[#W1, #W2]] :
    _ParsedFormLess[RAW-ParsedFormWord[#W1, #PF1], RAW-ParsedFormWord[#W2, #PF2]]
    →
    $[If, $[Equal, #W1, #W2], _ParsedFormLess[#PF1, #PF2], $[If, $[StringLessThan, #W1, #W2], B_TRUE, B_FALSE]]
   ;
  'CookN-_ParsedFormLess-6' :
    _ParsedFormLess[RAW-ParsedFormTerm[#SSPR1, #PF1], RAW-ParsedFormTerm[#SSPR2, #PF2]]
    →
    _ParsedFormLess[#PF1, #PF2]
   ;
  'CookN-_ParsedFormLess-7' : _ParsedFormLess[RAW-ParsedFormSpace[#S1, #PF1], #PF2] → _ParsedFormLess[#PF1, #PF2] ;
  'CookN-_ParsedFormLess-8' :
    _ParsedFormLess[$[NotMatch, RAW-ParsedFormSpace[#S1, #_], #PF1], RAW-ParsedFormSpace[#W2, #PF2]]
    →
    _ParsedFormLess[#PF1, #PF2]
   ;
  {$String : SortEntry}'_then-InsertDefines'[Ok, $List[Define], $String, NameSet, ¹ok_63 : Ok s_7 : $String ss_16 : NameSet . NormalizedSortMap]
    ::
    NormalizedSortMap
   ;
  'CookN-_then-InsertDefines-1' :
    {#ND}
    '_then-InsertDefines'[OK, #Defines, #Name, #Names, ¹ok_21 s_83 ss_14 . #[¹ok_21, s_83, ss_14]]
    →
    {#ND}
    _InsertDefines[#Defines, #Name, #Names, ¹ok_268 s_120 ss_88 . #[¹ok_268, s_120, ss_88]]
   ;
  )]