/* Generated By:JavaCC: Do not edit this line. ClassicParserConstants.java */
package net.sf.crsx.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ClassicParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int HASHBANG = 12;
  /** RegularExpression Id. */
  int DOT = 13;
  /** RegularExpression Id. */
  int COLON = 14;
  /** RegularExpression Id. */
  int COMMA = 15;
  /** RegularExpression Id. */
  int SEMI = 16;
  /** RegularExpression Id. */
  int LROUND = 17;
  /** RegularExpression Id. */
  int RROUND = 18;
  /** RegularExpression Id. */
  int LCURLY = 19;
  /** RegularExpression Id. */
  int RCURLY = 20;
  /** RegularExpression Id. */
  int LSQUARE = 21;
  /** RegularExpression Id. */
  int RSQUARE = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int VARIABLE = 24;
  /** RegularExpression Id. */
  int METAVARIABLE = 25;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 26;
  /** RegularExpression Id. */
  int LINEAR = 27;
  /** RegularExpression Id. */
  int QUOTED_VARIABLE = 28;
  /** RegularExpression Id. */
  int QUOTED_METAVARIABLE = 29;
  /** RegularExpression Id. */
  int VARIABLE_PREFIX = 30;
  /** RegularExpression Id. */
  int METAVARIABLE_PREFIX = 31;
  /** RegularExpression Id. */
  int CONSTRUCTOR_PREFIX = 32;
  /** RegularExpression Id. */
  int PART = 33;
  /** RegularExpression Id. */
  int UPPER = 34;
  /** RegularExpression Id. */
  int LOWER = 35;
  /** RegularExpression Id. */
  int DIGIT = 36;
  /** RegularExpression Id. */
  int ALPHANUMERIC = 37;
  /** RegularExpression Id. */
  int CONNECTOR = 38;
  /** RegularExpression Id. */
  int OTHER = 39;
  /** RegularExpression Id. */
  int PERCENT_NAME = 40;
  /** RegularExpression Id. */
  int STRING = 41;
  /** RegularExpression Id. */
  int ATOM = 42;
  /** RegularExpression Id. */
  int NUMERIC = 43;
  /** RegularExpression Id. */
  int EMBEDDED = 47;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVA_COMMENT = 1;
  /** Lexical state. */
  int IN_SGML_COMMENT = 2;
  /** Lexical state. */
  int EMBEDDED_IN = 3;
  /** Lexical state. */
  int EMBEDDED_END = 4;
  /** Lexical state. */
  int EMBEDDED_OVERFLOW = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "<token of kind 7>",
    "\"*/\"",
    "\"<!--\"",
    "<token of kind 10>",
    "\"-->\"",
    "<HASHBANG>",
    "\".\"",
    "\":\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<NOT>",
    "<VARIABLE>",
    "<METAVARIABLE>",
    "<CONSTRUCTOR>",
    "<LINEAR>",
    "<QUOTED_VARIABLE>",
    "<QUOTED_METAVARIABLE>",
    "<VARIABLE_PREFIX>",
    "<METAVARIABLE_PREFIX>",
    "<CONSTRUCTOR_PREFIX>",
    "<PART>",
    "<UPPER>",
    "<LOWER>",
    "<DIGIT>",
    "<ALPHANUMERIC>",
    "<CONNECTOR>",
    "<OTHER>",
    "<PERCENT_NAME>",
    "<STRING>",
    "<ATOM>",
    "<NUMERIC>",
    "\"\\u00ab\"",
    "\"\\u00ab\"",
    "\"\\u00bb\"",
    "\"\"",
    "\"? Overflow of EMBEDDED\"",
    "\"\\u2039\"",
    "\"\\u2039\"",
    "\"\\u203a\"",
    "\"\\u2768\"",
    "\"\\u2768\"",
    "\"\\u2769\"",
    "\"\\u27e6\"",
    "\"\\u27e6\"",
    "\"\\u27e7\"",
    "\"\\u27e8\"",
    "\"\\u27e8\"",
    "\"\\u27e9\"",
    "\"\\u27ea\"",
    "\"\\u27ea\"",
    "\"\\u27eb\"",
    "\"\\u2983\"",
    "\"\\u2983\"",
    "\"\\u2984\"",
    "<token of kind 67>",
  };

}
