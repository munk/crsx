/* Generated By:JavaCC: Do not edit this line. PGParser.java */
package net.sf.crsx.pg;

import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.crsx.CRSException;
import net.sf.crsx.Constructor;
import net.sf.crsx.Factory;
import net.sf.crsx.Kind;
import net.sf.crsx.Maker;
import net.sf.crsx.Parser;
import net.sf.crsx.Sink;
import net.sf.crsx.SourceBuilder;
import net.sf.crsx.Term;
import net.sf.crsx.Variable;
import net.sf.crsx.generic.GenericFactory;
import net.sf.crsx.util.Buffer;
import net.sf.crsx.util.ExpandingJavaSink;
import net.sf.crsx.util.ExtensibleMap;
import net.sf.crsx.util.FormattingAppendable;
import net.sf.crsx.util.LinkedExtensibleMap;
import net.sf.crsx.util.PlainJavaSink;
import net.sf.crsx.util.PlainSourceBuilder;
import net.sf.crsx.util.Triple;
import net.sf.crsx.util.Util;

/**
 * Generated JavaCC parser to generate JavaCC parser for populating CRS structure.
 *
 * @author <a href="http://www.research.ibm.com/people/k/krisrose">Kristoffer Rose</a>.
 * @version $Id: PGParser.jj,v 3.15 2013/12/12 08:04:39 krisrose Exp $
 */
class PGParser implements PGParserConstants {
        // Static.

        /** Class name of {@link Kind}. */
        private static final String KIND = Kind.class.getCanonicalName();
        /** Class name of {@link Term}. */
        private static final String TERM = Term.class.getCanonicalName();
        /** Class name of {@link Constructor}. */
        private static final String CONSTRUCTOR = Constructor.class.getCanonicalName();
        /** Class name of {@link Variable}. */
        private static final String VARIABLE = Variable.class.getCanonicalName();
        /** Class name of {@link Sink}. */
        private static final String SINK = Sink.class.getCanonicalName();
        /** Class name of {@link Maker}. */
        private static final String MAKER = Maker.class.getCanonicalName();
        /** Class name of {@link Buffer}. */
        private static final String BUFFER = Buffer.class.getCanonicalName();
        /** Class name of {@link Parser}. */
        private static final String PARSER = Parser.class.getCanonicalName();
        /** Class name of {@link Factory}. */
        private static final String FACTORY = Factory.class.getCanonicalName();
        /** Class name of {@link CRSException}. */
        private static final String CRS_EXCEPTION = CRSException.class.getCanonicalName();
        /** Class name of {@link Util}. */
        private static final String UTIL = Util.class.getCanonicalName();


        /** Class name of {@link ExtensibleMap}. */
        private static final String EXTENSIBLE_MAP = ExtensibleMap.class.getCanonicalName();
        /** Class name of {@link LinkedExtensibleMap}. */
        private static final String LINKED_EXTENSIBLE_MAP = LinkedExtensibleMap.class.getCanonicalName();
        /** Class name of {@link Map} from {@link Variable} to {@link Variable}. */
        private static final String EXTENSIBLE_STRING_TO_VARIABLE = EXTENSIBLE_MAP + "<String, " + VARIABLE + ">";
        /** Class name of {@link Map} from {@link Variable} to {@link Variable}. */
        private static final String STRING_TO_VARIABLE = "java.util.Map<String, " + VARIABLE + ">";

        /** How to mark generation annotations. */
        private static final String HTML_START_A = "<font color=\u005c"red\u005c">";
        /** How to mark generation annotations. */
        private static final String HTML_END_A = "</font>";

        /** Helper to construct Java form of String. */
        private static String q(String s)
        {
                return Util.quoteJava(s);
        }

        /** Helper to convert <STRING> to actual String. */
        private static String unq(String s)
        {
                return Util.unquoteJava(s);
        }

        /** Helper to convert single character code to string with actual unicode character (or surrogate pair). */
        private static String unChar(String code)
        {
                switch (code.charAt(0))
                {
                case '\u005c\u005c' :
                        switch (code.charAt(1))
                        {
                        case '0' : case '1' : case '2' : case '3' : // octal
                                return PlainJavaSink.unicode(Integer.parseInt(code.substring(1), 8));

                        case 'b' : return "\u005cb";
                        case 'f' : return "\u005cf";
                        case 'n' : return "\u005cn";
                        case 'r' : return "\u005cr";
                        case 't' : return "\u005ct";

                        default : return code.substring(1); // permit gratuitous backslash characters

                        case 'u' : case 'x' :
                                // Fall through to do hexadecimal code
                        }
                case '#' : {
                        // Two character unicode prefix (#x or escape-u or escape-x) followed by hexadecimal code.
                        if (code.length() >= 2)
                        {
                                int c = Integer.parseInt(code.substring(2), 16);
                                if (c >= 0) return PlainJavaSink.unicode(c);
                        }
                }
                }
                return code; // sic
        }

        /** Helper to convert arbitrary string to Java identifier. */
        private static String javaq(String s)
        {
                return PlainJavaSink.javaIdentify(s);
        }

        /** Helper to convert string to HTML-printable form. */
        private static String htmlq(String s)
        {
                return s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\u005c\u005c","&#92;");
        }

        /** Helper hack to convert comment with Javadoc stuff to HTML. */
        private static String htmlcommentify(String comment)
        {
                // String manipulation in Java!	 Wee!
                StringBuilder w = new StringBuilder(comment);
                if (w.substring(0,2).equals("/*")) w.delete(0,2);
                while (w.substring(0,1).equals("*")) w.delete(0,1);
                if (w.substring(w.length()-2).equals("*/")) w.delete(w.length()-2,w.length());
                for (int i = w.indexOf("\u005cn * @"); i >= 0; i = w.indexOf("\u005cn * @")) w.replace(i+2, i+5, "<br>");
                for (int i = w.indexOf("\u005cn *"); i >= 0; i = w.indexOf("\u005cn *")) w.delete(i+1, i+3);
                for (int i = w.indexOf("\u005cn*"); i >= 0; i = w.indexOf("\u005cn*")) w.delete(i+1, i+2);
                return "<font size=1>/*<br></font>" + w.toString().replace("*/","* /") + "<font size=1><br>*/</font>";
        }

        /** Helper to remove surrounding {}s. */
        private static String unbrace(String s)
        {
                return s.substring(1, s.length()-1);
        }

        /** Helper to extract embedded term. */
        private static String unembed(String s)
        {
                return s.charAt(0) < '~' ? s.substring(2, s.length()-2) : s.substring(1, s.length()-1);
        }

        /** Helper to add production fragment to top level of production (with access to the sink). */
        private static void top(SourceBuilder production, CharSequence fragment)
        {
                // Make sure sink is available.
                if (production.seeded())
                {
                        if (production.nesting() == 0)
                                production.openBlock("{");
                        production.addStatement(production.wrapExpression("sink =", ";").harvest());
                }
                // Close all actions.
                while (production.nesting() > 0) production.closeBlock("}");

                // Emit production fragment.
                if (fragment.length() > 0)
                        production.addStatement(fragment);
        }

        /** Helper to add statement into production action (with access to the updated sink). */
        private static void action(SourceBuilder production, CharSequence statement)
        {
                // Make sure action has been started.
                if (production.nesting() == 0)
                        production.openBlock("{");

                // Make sure sink is available.
                if (production.seeded())
                        production.wrapExpression("sink =", ";").harvest();

                // Emit action.
                if (statement.length() > 0)
                        production.addStatement(statement);
        }

        /** Helper to drop any current expression.  Use after having generated to foreign sink. */
        private static void drop(SourceBuilder production)
        {
                // Make sure action has been started.
                if (production.nesting() == 0)
                        production.openBlock("{");

                // Make sure sink is available.
                if (production.seeded())
                        production.addStatement(production.wrapExpression("", ";").harvest());
        }

        /** Helper to add local declaration inside local scope in action. The declaration does NOT have access to the updated sink. */
        private static void declare(SourceBuilder production, CharSequence declaration)
        {
                // Make sure we're inside a scope inside an action.
                switch (production.nesting())
                {
                        case 0 :
                                assert !production.seeded() : "declare: Seeded at top?";
                                production.openBlock("{");
                        case 1 :
                                production.openBlock("{");
                }
                // Emit declaration.
                if (declaration.length() > 0)
                        production.addStatement(declaration);
        }

        /** Helper to extend the current sink expression with one more invocation. */
        private static void sink(SourceBuilder production, CharSequence invocation)
        {
                if (!production.seeded()) production.seedExpression("sink");
                production.wrapExpression("", invocation);
        }

        /** Increase JavaCC indentation. */
        private static void in(SourceBuilder production)
        {
                top(production, "");
                production.setPrefix(production.prefix() + "\u005ct");
        }

        /** Decrease JavaCC indentation. */
        private static void out(SourceBuilder production)
        {
                top(production, "");
                String prefix = production.prefix();
                if (prefix.length() > 0)
                        production.setPrefix(prefix.substring(1));
        }

        // State.

        /** For term creation. */
        private Maker maker;

        /** For embedded terms. */
        private Factory<? extends Term> factory = new GenericFactory();

        /** Parser options. */
        private Map<String, String> parserOptions;

        /** Constants. */
        private final List<String> constants = new ArrayList<String>();

        /** Package name. */
        private String packageName;

        /** Category prefix. */
        private String categoryPrefix = "";

        /** Constants class name. */
        private String constantsClass;

        /** Token manager class name. */
        private String tokenManagerClass;

        /** JavaCC output. */
        private PrintStream javacc;

        /** HTML output or null. */
        private Writer html;

        /** Serializer output or null. */
        private Writer serializer;

        /** Java constant constructor string list output or null. */
        private Writer consts;

        /** All defined nonterminals. */
        private final Set<String> definedNonterminals = new HashSet<String>();

        /** All used nonterminals. */
        private final Set<String> usedNonterminals = new HashSet<String>();

        /** All derived nonterminals (with names ending in $[Maybe][Sequence]). */
        private final Set<String> derivedNonterminals = new HashSet<String>();

        /** Collect tokens. */
        private final StringBuilder tokens = new StringBuilder();

        /** Exported names. */
        private final List<String> exportedNames = new ArrayList<String>();

        /** #cast declaration (or null). */
        private String castName, castHead, castOpen = "\u005c"[\u005c"", castClose = "\u005c"]\u005c"";

        /**
	 * If non-null then meta-variables with this production are automatically generated.
	 * The token <PRODUCTION_NAME> is automatically replaced with the production name.
	 */
        private String metaProduction, metaArgumentNonterminal, metaArgumentOpen = "\u005c"[\u005c"", metaArgumentClose = "\u005c"]\u005c"", metaArgumentSep = "\u005c",\u005c"";

        /**
	 * If non-null then inject-tokens with this production are automatically generated.
	 * The token <PRODUCTION_NAME> is automatically replaced with the production name.
	 */
        private String injectProduction, injectArgumentNonterminal, injectArgumentOpen = "\u005c"[\u005c"", injectArgumentClose = "\u005c"]\u005c"";

        /**
	 * Apply "Use" description to specific constant.
	 * @param use Use description
	 * @param name Base name
	 * @param decls accumulator of declarations for header portion of enclosing JavaCC production
	 * @param production under construction
	 * @param endings contains the sink "closing brackets" for open constructions and meta-applications
	 * @param html where the printable version of the production should be appended
	 * @param variable2java maps variables to the name of the Java variable with the variable
	 * @param variables maps variables in term to the parsed variable name
	 * @param metavariables maps meta-variables in term to triples for {@link ExpandingJavaSink}
	 */
        private void useUsage(Usage use, String name, Map<String, String> decls, SourceBuilder production,
                StringBuilder endings, Map<Variable, String> variable2java, Map<String, Variable> variables,
                Map<String, Triple<String, String, String>> metavariables) throws IOException, ParseException
        {
                if (use.embedded) // embedded literal
                {
                        assert !use.definition && !use.use && !use.meta && !use.construct;
                        // Insert canned code to reparse string.
                        String sinkPut = "sink = ", sinkGet = "sink";
                        if (use.buffer)
                        {
                                String b_name = "b_"+name;
                                decls.put(b_name, BUFFER+" "+b_name+" = new "+BUFFER+"("+sinkGet+");");
                                sinkGet = b_name+".sink()";
                                sinkPut = "";
                                metavariables.put(use.name, new Triple<String, String, String>("", ".copy("+b_name+",false)", null));
                        }
                        action(production,
                                "try {"+sinkPut+"factory.parser(factory).parse("+sinkGet+", "+(use.category==null?"null":"\u005c""+use.category+"\u005c"")+", new java.io.StringReader("+use.converted+"), unit, t.beginLine, t.beginColumn+1, env);}\u005cn"+
                                "catch (java.io.IOException e) {throw new ParseException(e.getMessage());}\u005cn"+
                                "catch ("+CRS_EXCEPTION+" e) {Throwable cause = e.getCause(); if (cause instanceof ParseException) throw (ParseException) cause; else throw new ParseException(e.getMessage());}");
                }
                else if (use.definition) // variable definition
                {
                        assert !use.use && !use.meta && !use.construct && !use.embedded;
                        // Generate fresh variable in code, used wherever the alias is used.
                        Variable alias = variables.get(use.name);
                        if (alias == null)
                        {
                                alias = maker.makeVariable(use.name, !use.linear); // reuse variant defined in other nested choice
                                variables.put(use.name, alias);
                        }
                        String s_name = "s_" + name;
                        decls.put(s_name, "String "+s_name+" = null;");
                        action(production, s_name+" = "+use.converted+";");
                        String v_name = "v_" + name;
                        decls.put(v_name, VARIABLE+" "+v_name+" = null;");
                        action(production, v_name+" = sink.makeVariable("+s_name+","+(!use.linear)+");");
                        if (use.buffer)
                        {
                                // Reference as meta-variable.
                                metavariables.put(use.name, new Triple<String, String, String>("", ".use("+v_name+")", ""));
                        }
                        // Keep alias.                        variable2java.put(alias, v_name);
                }
                else if (use.use) // variable use
                {
                        assert !use.meta && !use.construct && !use.embedded;
                        // Generate variable occurrence using variable generated by context (or free, if allowed).
                        String s_name = "s_" + name;
                        decls.put(s_name, "String "+s_name+" = null;");
                        action(production, s_name+" = "+use.converted+";");
                        String v_name = "v_" + name;
                        decls.put(v_name, VARIABLE+" "+v_name+" = null;");

                        if (use.freshVar) // whether variable may be fresh or not
                                action(production, v_name+" = (env.containsKey("+s_name+") ? env.get("+s_name+") : factory.freeVariable("+s_name+", "+(!use.linear)+", true));");
                        else if (use.freeVar) // any predefined variable allowed
                                action(production, v_name+" = (env.containsKey("+s_name+") ? env.get("+s_name+") : factory.freeVariable("+s_name+", "+(!use.linear)+", false));");
                        else // only bound variable
                                action(production, v_name+" = env.get("+s_name+");");
                        action(production, "if ("+v_name+" == null) throw new ParseException(\u005c"Variable \u005c"+"+s_name+"+\u005c" cannot be resolved?\u005c");");

                        if (use.buffer)
                        {
                                // Reference as meta-variable.
                                metavariables.put(use.name, new Triple<String, String, String>("", ".use("+v_name+")", ""));
                        }
                        else
                        {
                                // Emit reference.
                                sink(production, ".use("+v_name+")");
                                if (use.name != null)
                                {
                                        // Permit future use of name.
                                        Variable alias = variables.get(use.name);
                                        if (alias == null)
                                        {
                                                alias = maker.makeVariable(use.name, !use.linear); // reuse variant defined in other nested choice
                                                variables.put(use.name, alias);
                                        }
                                        variable2java.put(alias, v_name);
                                }
                        }
                }
                else if (use.meta) // meta-application
                {
                        assert !use.construct;
                        if (use.buffer)
                        {
                                // Make meta-variable expand to code for meta-application.
                                metavariables.put(use.name, new Triple<String, String, String>("", ".startMetaApplication("+use.converted+")", ".endMetaApplication()"));
                        }
                        else
                        {
                                // Emit meta-variable wrapper.
                                sink(production, ".startMetaApplication("+use.converted+")");
                                endings.insert(0, ".endMetaApplication()");
                        }
                }
                else if (use.literal) // string
                {
                        use.construct = true;
                        if (use.buffer)
                        {
                                // Make meta-variable expand to use constructor on arguments.
                                metavariables.put(use.name,
                                        new Triple<String, String, String>("", ".start(makeTConstructor(sink, t, "+use.converted+", net.sf.crsx.CRS.STRING_SORT))", ".end()"));
                        }
                        else
                        {
                                // Emit construction wrapper.
                                sink(production, ".start(makeTConstructor(sink, t, "+use.converted+", net.sf.crsx.CRS.STRING_SORT))");
                                endings.insert(0, ".end()");
                        }
                }
                else // construction
                {
                        use.construct = true;
                        if (use.buffer)
                        {
                                // Make meta-variable expand to use constructor on arguments.
                                metavariables.put(use.name,
                                        new Triple<String, String, String>("", ".start(makeTConstructor(sink, t, "+use.converted+", null))", ".end()"));
                        }
                        else
                        {
                                // Emit construction wrapper.
                                sink(production, ".start(makeTConstructor(sink, t, "+use.converted+", null))");
                                endings.insert(0, ".end()");
                        }
                }
        }

/**
 * Entire grammar.
 * Print JavaCC file corresponding to the url.
 * Append HTML version of grammar to the html writer when requested.
 * Append Reverse rewrite system to the reverse writer when requested.
 */
  final public void Grammar(Maker maker, String jjcrs, String sourcePrefix, boolean makeHtml,
        boolean makeConstants, boolean makeSerializer, Map<String, String> parserOptions) throws ParseException, IOException {
        String comment = null;
        List<String> comments = new ArrayList<String>();
                this.maker = maker;
                this.parserOptions = parserOptions;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      comment = Comment();
                                   comments.add(comment);
    }
    ClassDirective(comments, jjcrs, sourcePrefix, makeHtml, makeConstants, makeSerializer);
                if (html != null) html.append("<p>\u005cn");
                if (serializer != null) serializer.append(q(jjcrs+"-serializer") + "[(\u005cn");
    Productions(javacc, html, serializer);
                for (String derived : derivedNonterminals)
                {
                        String userName = derived.replace("$MaybeSequence","*").replace("$Maybe","?").replace("$Sequence","+");
                        String stem = derived.replace("$MaybeSequence","").replace("$Maybe","").replace("$Sequence","");
                        String cons = stem + "$Cons";
                        String nil = stem + "$Nil";

                        // Emit extra tokens.
                        // Start production, if needed with meta-variable token.

                        // Tokens for meta-syntax, if any.
                        if (metaProduction != null)
                        {
                                javacc.append("\u005cn/** Special meta-variable for " + userName + " production. */\u005cn"  +
                                        "TOKEN : {<MT_" + derived + " : " + metaProduction.replace("<PRODUCTION_NAME>", userName) + ">}\u005cn");
                        }
                        if (injectProduction != null)
                        {
                                javacc.append("\u005cn/** Special injection token for " + userName + " production. */\u005cn"  +
                                        "TOKEN : {<IT_" + derived + " : " + injectProduction.replace("<PRODUCTION_NAME>", userName) + ">}\u005cn");
                        }

                        // Top-level production, if any.
                        if (exportedNames.contains(derived))
                                javacc.append("\u005cn/** "+userName+" top level. */\u005cn" +
                                        SINK + " N_" + derived + "$WithEOF(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env) :\u005cn" +
                                        "{}\u005cn" +
                                        "{ sink=N_" + derived + "(sink, env)  <EOF> {return sink;} }\u005cn");

                        // Production.
                        javacc.append("\u005cn/** "+userName+". */\u005cn" +
                                SINK + " N_" + derived + "(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env) :\u005cn" +
                                "{ Token t = null; }\u005cn" +
                                "{\u005cn");
                        if (metaProduction != null)
                        {
                                String metaArg = "sink=N_" + metaArgumentNonterminal + "(sink, env)";
                                javacc.append(
                                        "\u005ctt=<MT_"+derived+"> {sink = sink.startMetaApplication(t.toString());}" +
                                                " [ " + metaArgumentOpen + " " + metaArg + "( " + metaArgumentSep + " " + metaArg + ")* " + metaArgumentClose + " ]" +
                                                " {return sink.endMetaApplication();}\u005cn" +
                                        "|\u005cn");
                        }
                        if (injectProduction != null)
                        {
                                javacc.append(
                                        "\u005ct<IT_"+derived+"> " + injectArgumentOpen + " {sink=N_" + injectArgumentNonterminal + "(sink, env);} " + injectArgumentClose +
                                                " {return sink;}\u005cn" +
                                        "|\u005cn");
                        }
                        if (derived.endsWith("$Maybe"))
                        {
                                javacc.append(
                                        "\u005ct(\u005ct{sink=sink.start(makeTConstructor(sink, t, \u005c""+cons+"\u005c", null));} sink=N_"+stem+"(sink,env) {sink=sink.start(makeTConstructor(sink, t, \u005c""+nil+"\u005c", null)).end().end();}\u005cn" +
                                        "\u005ct|\u005ct{sink=sink.start(makeTConstructor(sink, t, \u005c""+nil+"\u005c", null)).end();}\u005cn" +
                                        "\u005ct)\u005cn");
                        }
                        else if (derived.endsWith("$Sequence"))
                        {
                                javacc.append(
                                        "\u005ct{sink=sink.start(makeTConstructor(sink, t, \u005c""+cons+"\u005c", null));} sink=N_"+stem+"(sink,env)\u005cn" +
                                        "\u005ct( sink=N_"+derived+"(sink,env) | {sink=sink.start(makeTConstructor(sink, t, \u005c""+nil+"\u005c", null)).end();} )\u005cn" +
                                        "\u005ct{sink=sink.end();}\u005cn");
                        }
                        else if (derived.endsWith("$MaybeSequence"))
                        {
                                javacc.append(
                                        "\u005ct(\u005ct{sink=sink.start(makeTConstructor(sink, t, \u005c""+cons+"\u005c", null));} sink=N_"+stem+"(sink,env) sink=N_"+derived+"(sink,env) {sink=sink.end();}\u005cn" +
                                        "\u005ct|\u005ct{sink=sink.start(makeTConstructor(sink, t, \u005c""+nil+"\u005c", null)).end();}\u005cn" +
                                        "\u005ct)\u005cn");
                        }
                        else
                        {
                                assert false : "Impossible derived nonterminal: "+derived;
                        }
                        javacc.append("\u005ct{return sink;}\u005cn" + "}\u005cn");
                        definedNonterminals.add(derived);
                        usedNonterminals.add(stem);
                }
                if (castName != null)
                {
                        // Store production...
                        definedNonterminals.add(castName);

                        // Production.
                        javacc.append("\u005cn/** Cast production of all nonterminals. */\u005cn" +
                                SINK + " N_" + castName + "(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env) :\u005cn" +
                                "{}\u005cn" +
                                "{\u005cn" +
                                "\u005ct(");
                        String lead = "";
                        for (String derived : definedNonterminals)
                        {
                                String userName = derived.replace("$MaybeSequence","*").replace("$Maybe","?").replace("$Sequence","+");
                                javacc.append(lead + "\u005ct" + castHead.replace("<PRODUCTION_NAME>", userName) + " " + castOpen + " sink=N_" + derived + "(sink, env) " + castClose.replace("<PRODUCTION_NAME>", userName) + "\u005cn");
                                usedNonterminals.add(derived);
                                lead = "\u005ct|";
                        }
                        javacc.append("\u005ct)\u005cn" + "\u005ct{return sink;}\u005cn" + "}\u005cn");
                }

                javacc.append(tokens);
                javacc.close();
                if (html != null)
                {
                        html.append("<p>\u005cn");
                        html.close();
                }
                if (serializer != null)
                {
                        serializer.append(")]\u005cn");
                        serializer.close();
                }

                // Echo constants.
                if (consts != null)
                {
                        FormattingAppendable c = FormattingAppendable.format(consts, 80, 0, 300);
                        c.append("/* "+constantsClass+": PG-generated JavaCC parser constructor constants. */\u005cn"+
                                "package "+packageName+";\u005cn"+
                                "public class "+constantsClass+"\u005cn");
                        c.open("{");
                        c.append("\u005cn/** Constant list. */\u005cn"+"public static final String[] STRING =");
                        c.open("{");
                        c.append("\u005cnnull");
                        for (String constant : constants)
                                c.append(",\u005cn"+q(constant));
                        c.close("};");
                        c.append("\u005cn\u005cn/* Constants for use in switch statements */\u005cn");
                        for (int i = 0; i < constants.size(); ++i)
                        {
                                String constant = constants.get(i);
                                c.append("public static final int C_"+javaq(constant)+" = "+(i+1)+";\u005cn");
                        }
                        c.close("}");
                        c.append("\u005cn");
                        consts.close();
                }
    jj_consume_token(0);
  }

/**
 * Class directive.
 * Print JavaCC options and parser declaration.
 * Append HTML version of grammar to the html writer when non-null.
 */
  final public void ClassDirective(List<String> comments, String jjcrs, String sourcePrefix,
        boolean makeHtml, boolean makeConstants, boolean makeSerializer) throws ParseException, IOException {
        Token t, o;
        String n;
        String className, s;
        StringBuilder declarations = new StringBuilder();
        StringBuilder imports = new StringBuilder();
        StringBuilder rules = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 1:
      jj_consume_token(1);
      break;
    case 2:
      jj_consume_token(2);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = Name();
                  className = t.toString();
    jj_consume_token(3);
            if (makeHtml)
            {
                        html = new FileWriter(jjcrs + ".html");
                        for (String comment : comments)
                                html.append(htmlcommentify(comment));

                        html.append("<p>" + HTML_START_A + "<b>class</b> "+className+" : ");
                        for (int i = 0; i < exportedNames.size(); ++i)
                                html.append((i>0 ? ", " : "")+"<em>"+exportedNames.get(i)+"</em>");
                }
    n = NonterminalName(html);
                                 exportedNames.add(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(4);
               if (html!=null) html.append(", ");
      n = NonterminalName(html);
                                                                            exportedNames.add(n);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
      case 6:
      case 8:
      case 9:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        jj_consume_token(5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          t = Name();
                            categoryPrefix = t.toString();
          break;
        case STRING:
          t = jj_consume_token(STRING);
                              categoryPrefix = unq(t.toString());
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 6:
        jj_consume_token(6);
        t = Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          jj_consume_token(7);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
          case CONST:
            o = Name();
            break;
          case NUMBER:
            o = jj_consume_token(NUMBER);
            break;
          case STRING:
            o = jj_consume_token(STRING);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                 parserOptions.put(t.toString(), o.toString());
          break;
        default:
          jj_la1[6] = jj_gen;
                                                                                                                    parserOptions.put(t.toString(), "true");
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 4:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          jj_consume_token(4);
          t = Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
            jj_consume_token(7);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
            case CONST:
              o = Name();
              break;
            case NUMBER:
              o = jj_consume_token(NUMBER);
              break;
            case STRING:
              o = jj_consume_token(STRING);
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
                                                                       parserOptions.put(t.toString(), o.toString());
            break;
          default:
            jj_la1[9] = jj_gen;
                                                                                                                          parserOptions.put(t.toString(), "true");
          }
        }
        break;
      case 8:
        jj_consume_token(8);
        t = Name();
                          imports.append("import "+t.toString()+";\u005cn");
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 4:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_5;
          }
          jj_consume_token(4);
          t = Name();
                                imports.append("import "+t.toString()+";\u005cn");
        }
        break;
      case 9:
        jj_consume_token(9);
        t = jj_consume_token(EMBEDDED);
                 s = t.toString(); declarations.append(unembed(s)+"\u005cn");
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {
                // Extract package components.
                int lastDot = className.lastIndexOf('.');
                String p, c;
                if (lastDot < 0)
                {
                        p = null;
                        c = className;
                }
                else
                {
                        p = className.substring(0, lastDot);
                        c = className.substring(lastDot+1);
                }
                packageName = p;

                // Create derived files.
                String prefix = (sourcePrefix == null ? "" : sourcePrefix + "/") + (p == null ? "" : p.replace(".", "/") + "/");

                javacc = new PrintStream(prefix + c + ".jj");
                tokenManagerClass = c + "TokenManager";
                if (makeConstants)
                {
                        constantsClass = c + "ConstructorStrings";
                        consts = new FileWriter(prefix + constantsClass + ".java");
                }
                if (makeSerializer)
                        serializer = new FileWriter(jjcrs + ".serialize.crs");

                // Output header for parser.
                javacc.append("/* "+className+": PG-generated JavaCC parser specification. */\u005cn");

                String docComment = "";
                for (String comment : comments)
                {
                        if (comment.startsWith("/**"))
                                docComment = comment + "\u005cn";
                        else
                                javacc.append(comment);
                }

                parserOptions.put("DEBUG_PARSER", "true");
                javacc.append("\u005cnoptions {\u005cn");
                for (Map.Entry<String, String> option : parserOptions.entrySet())
                        javacc.append("\u005ct"+option.getKey()+" = "+option.getValue()+";\u005cn");
                javacc.append("}\u005cn\u005cn");

                // Parser specification.
                javacc.append("PARSER_BEGIN("+c+")\u005cn");
                if (p != null) javacc.append("package "+p+";\u005cn");
                javacc.append(imports.toString());
                javacc.append("\u005cn"+docComment+
                        "public class "+c+" implements "+PARSER+"\u005cn"+
                        "{\u005cn");

                // State.
                javacc.append(
                        "\u005ct/** Factory. */\u005cn"+
                        "\u005ct"+FACTORY+"<? extends "+TERM+"> factory;\u005cn"+
                        "\u005ct/** Compilation unit name for error messages. */\u005cn"+
                        "\u005ctString unit;\u005cn"+
                        "\u005ct/** Whether the parser should capture token locations. */\u005cn"+
                        "\u005ctboolean captureLocations = true;\u005cn"+
                        "\u005ct/** Constructor with token location information. */\u005cn"+
                        "\u005ctprivate "+CONSTRUCTOR+" makeTConstructor("+SINK+" sink, Token t, Object object, String sort)\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ct"+CONSTRUCTOR+" c = sort == null ? sink.makeConstructor(object) : sink.makeLiteral(object, sort);\u005cn"+
                        "\u005ct\u005ctif (t == null) t = token;\u005cn"+
                        "\u005ct\u005ctif (captureLocations && t != null)\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctif (factory.get(\u005c"meta\u005c") == null)\u005cn"+
                        "\u005ct\u005ct\u005ct\u005ctc = "+UTIL+".wrapWithLocation(sink, c, unit, t.beginLine, t.beginColumn);\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ctreturn c;\u005cn"+
                        "\u005ct}\u005cn\u005cn");

                // State: category actions!
                javacc.append(
                        "\u005ct/** Helper interface with category non-terminal calls. */\u005cn"+
                        "\u005ctabstract class CategoryCall { abstract "+SINK+" call("+SINK+" sink, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws ParseException; }\u005cn"+
                        "\u005ct/** Direct category invocations. */\u005cn"+
                        "\u005ctjava.util.Map<String,CategoryCall> categoryCall = new java.util.HashMap<String,CategoryCall>();\u005cn"+
                        "\u005ct{\u005cn");
                if (categoryPrefix.length() > 0)
                        javacc.append("\u005ct\u005ctcategoryCall.put("+q(categoryPrefix)+", "
                                +"new CategoryCall(){ "+SINK+" call("+SINK+" sink, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws ParseException {return N_"+exportedNames.get(0)+"$WithEOF(sink, bound);} });\u005cn");
                for (String name : exportedNames)
                        javacc.append(
                                "\u005ct\u005ctcategoryCall.put("
                                +q(categoryPrefix+name.replace("$MaybeSequence","*").replace("$Maybe","?").replace("$Sequence","+"))+", "
                                +"new CategoryCall(){ "+SINK+" call("+SINK+" sink, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws ParseException {return N_"+name+"$WithEOF(sink, bound);} });\u005cn");
                javacc.append(
                        "\u005ct}\u005cn\u005cn");

                // Nullary constructor.
                javacc.append(
                        "\u005ct// Constructor.\u005cn\u005cn"+
                        "\u005ct/** Construct dummy instance. */\u005cn"+
                        "\u005ctpublic "+c+"()\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ctthis((java.io.Reader) null);\u005cn"+
                        "\u005ct\u005ctdisable_tracing();\u005cn"+
                        "\u005ct}\u005cn\u005cn");

                // Parser implementation.
                javacc.append(
                        "\u005ct// Parser implementation.\u005cn\u005cn"+
                        "\u005ctpublic "+PARSER+" parser("+FACTORY+"<? extends "+TERM+"> f)\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ctif (factory != null)\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ct"+PARSER+" parser = new "+c+"().parser(f);\u005cn"+
                        "\u005ct\u005ct\u005ctparser.setParserVerbose(trace_enabled); parser.setParserLocation(captureLocations);\u005cn"+
                        "\u005ct\u005ct\u005ctreturn parser;\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ctelse\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctfactory = f;\u005cn"+
                        "\u005ct\u005ct\u005ctassert f != null : \u005c"Or Else!\u005c";\u005cn"+
                        "\u005ct\u005ct\u005ctreturn this;\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic void setParserVerbose(boolean verbose)\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ctif (verbose)\u005cn"+
                        "\u005ct\u005ct\u005ctenable_tracing();\u005cn"+
                        "\u005ct\u005ctelse\u005cn"+
                        "\u005ct\u005ct\u005ctdisable_tracing();\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic void setParserLocation(boolean capture)\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ctcaptureLocations = capture;\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic void setEmbeddedParser("+PARSER+" subparser) throws "+CRS_EXCEPTION+"\u005cn"+
                        "\u005ct{}\u005cn\u005cn"+
                        "\u005ctpublic Iterable<String> categories()\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ctreturn categoryCall.keySet();\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic "+SINK+" parse("+SINK+" sink, String category, java.io.Reader reader, String unit, int firstLine, int firstColumn, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws "+CRS_EXCEPTION+", java.io.IOException\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005cttry\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctthis.unit = unit;\u005cn"+
                        "\u005ct\u005ct\u005ctReInit((java.io.Reader) null);\u005cn"+
                        "\u005ct\u005ct\u005ctjj_input_stream.ReInit(reader, firstLine, firstColumn); token_source = new "+tokenManagerClass+"(jj_input_stream); // hacks to update line and column numbers\u005cn"+
                        "\u005ct\u005ct\u005ctif (bound == null) bound = new "+LINKED_EXTENSIBLE_MAP+"<String, "+VARIABLE+">();\u005cn"+
                        "\u005ct\u005ct\u005ctif (category == null || category.length() == 0) return N_"+exportedNames.get(0)+"(sink, bound);\u005cn"+
                        "\u005ct\u005ct\u005ctelse if (categoryCall.containsKey(category)) return categoryCall.get(category).call(sink, bound);\u005cn"+
                        "\u005ct\u005ct\u005ctelse throw new "+CRS_EXCEPTION+"(\u005c"Parser category '\u005c"+category+\u005c"' not supported!\u005c");\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ctcatch (ParseException e)\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctthrow new "+CRS_EXCEPTION+"(e.getMessage());\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic "+TERM+" parseTerm("+MAKER+" maker, String category, java.io.Reader reader, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws "+CRS_EXCEPTION+", java.io.IOException\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ct"+BUFFER+" buffer = new "+BUFFER+"(maker);\u005cn"+
                        "\u005ct\u005ctfactory.parse(buffer.sink(), category, reader, null, 1, 1, bound);\u005cn"+
                        "\u005ct\u005ctreturn buffer.term(true);\u005cn"+
                        "\u005ct}\u005cn\u005cn"+
                        "\u005ctpublic "+TERM+" parseTerm("+MAKER+" maker, String category, java.io.Reader reader, String unit, int line, int col, "+EXTENSIBLE_STRING_TO_VARIABLE+" bound) throws "+CRS_EXCEPTION+", java.io.IOException\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005ct"+BUFFER+" buffer = new "+BUFFER+"(maker);\u005cn"+
                        "\u005ct\u005ctfactory.parse(buffer.sink(), category, reader, unit, line, col, bound);\u005cn"+
                        "\u005ct\u005ctreturn buffer.term(true);\u005cn"+
                        "\u005ct}\u005cn\u005cn");

                // User additions.
                javacc.append(declarations);

                // Main function.
                javacc.append(
                        "\u005ct/**\u005cn"+
                        "\u005ct * Run the parser and print the resulting term.\u005cn"+
                        "\u005ct * @param args should contain two strings: the category and an input file name\u005cn"+
                        "\u005ct */\u005cn"+
                        "\u005ctpublic static void main(String[] args)\u005cn"+
                        "\u005ct{\u005cn"+
                        "\u005ct\u005cttry\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctif (args.length != 2)\u005cn"+
                        "\u005ct\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ct\u005ctSystem.err.println(\u005c"Usage: "+c+" category input\u005c");\u005cn"+
                        "\u005ct\u005ct\u005ct\u005ctSystem.exit(2);\u005cn"+
                        "\u005ct\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ct\u005ctString category = args[0];\u005cn"+
                        "\u005ct\u005ct\u005ctjava.io.Reader reader = new java.io.FileReader(args[1]);\u005cn"+
                        "\u005ct\u005ct\u005ctnet.sf.crsx.Factory<net.sf.crsx.generic.GenericTerm> factory = new net.sf.crsx.generic.GenericFactory();\u005cn"+
                        "\u005ct\u005ct\u005ctnet.sf.crsx.Parser parser = new "+c+"();\u005cn"+
                        "\u005ct\u005ct\u005ctnet.sf.crsx.Sink sink = factory.sink(System.out);\u005cn"+
                        "\u005ct\u005ct\u005ctparser.parser(factory).parse(sink, category, reader, null, 1, 1, null);\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ctcatch (net.sf.crsx.CRSException e)\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctSystem.err.println(\u005c"CRS error: \u005c"+e);\u005cn"+
                        "\u005ct\u005ct\u005ctSystem.exit(1);\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct\u005ctcatch (java.io.IOException e)\u005cn"+
                        "\u005ct\u005ct{\u005cn"+
                        "\u005ct\u005ct\u005ctSystem.err.println(\u005c"I/O error: \u005c"+e);\u005cn"+
                        "\u005ct\u005ct\u005ctSystem.exit(1);\u005cn"+
                        "\u005ct\u005ct}\u005cn"+
                        "\u005ct}\u005cn\u005cn");

                // End of parser declaration.
                javacc.append(
                        "}\u005cn"+
                        "PARSER_END("+c+")\u005cn"
                );

                // Productions for top-level productions (include EOF).
                //for (String name : exportedNames)
                //{
                //	javacc.append("\n" +
                //		"/** <em>" + name + "$WithEOF</em> ::= <em>" + name + "</em> EOF . */\n" +
                //		SINK + " N_" + name + "$WithEOF(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env) :\n" +
                //		"{}\n" +
                //		"{ sink=N_" + name + "(sink, env) <EOF> {return sink;} }\n");
                //}
                usedNonterminals.addAll(exportedNames); // exported names are implicitly used

                if (html != null)
                {
                        if (categoryPrefix.length() > 0)
                                html.append("<br><b>prefix</b> " + categoryPrefix + "\u005cn");

                        if (parserOptions.size() > 0)
                                html.append("<br><b>options</b> " + unbrace(parserOptions.toString()) + "\u005cn");

                        if (declarations.length() > 0)
                                html.append("<br><b>declarations</b><br>%{<pre>\u005cn" + declarations.toString().trim() + "\u005cn</pre>%}<br>");

                        if (rules.length() > 0)
                                html.append("<br><b>rules</b><blockquote>" + rules.toString().trim() + "</blockquote>");

                        html.append(HTML_END_A+"</p>\u005cn");
                }

                // TODO: Parse rules!
        }
  }

/**
 * Actual productions and directives.
 * Print JavaCC options and parser declaration.
 * Append HTML version of grammar to the html writer when non-null.
 */
  final public void Productions(Appendable javacc, Appendable html, Appendable serializer) throws ParseException, IOException {
        String comment, docComment = null;
         if (html != null) html.append("<blockquote>\u005cn");
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 18:
      case 19:
      case 20:
      case 23:
      case 24:
      case 25:
      case 26:
      case 32:
      case 39:
      case LANGLE:
      case COMMENT:
      case EMBEDDED:
      case VAR:
      case CONST:
      case METAVAR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment = Comment();
                        if (comment.startsWith("/**"))
                                docComment=comment;
                        else
                        {
                                javacc.append("\u005cn"+comment+"\u005cn");
                                if (html != null) html.append("</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn");
                        }
        break;
      case 17:
      case 18:
      case 19:
      case 20:
      case 23:
      case 24:
      case 25:
      case 26:
      case 32:
      case 39:
      case LANGLE:
      case EMBEDDED:
      case VAR:
      case CONST:
      case METAVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
        case LANGLE:
        case METAVAR:
          Structural(docComment, javacc, html, serializer);
                                                                          docComment = null;
          break;
        case 17:
        case 18:
        case VAR:
        case CONST:
          Lexical(docComment, javacc, html);
                                                           docComment = null;
          break;
        case 19:
          Skip(docComment, html);
                                                docComment = null;
          break;
        case 20:
          Cast(docComment, javacc, html);
                                                        docComment = null;
          break;
        case 23:
        case 24:
        case 25:
        case 26:
          Meta(docComment, javacc, html);
                                                        docComment = null;
          break;
        case EMBEDDED:
          Copy(docComment, javacc);
                                                  docComment = null;
          break;
        case 32:
          Include(docComment, javacc, html, serializer);
                                                                       docComment = null;
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                 if (html != null) html.append("<p>\u005cn");
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         if (html != null) html.append("</blockquote>\u005cn");
  }

/**
 * Structural (normal) production.
 * Prints the production in JavaCC form to javacc.
 * @param html where the HTML summary is appended, or null if none is needed
 * @return HTML summary of production
 */
  final public void Structural(String comment, Appendable javacc, Appendable html, Appendable serializer) throws ParseException, IOException {
        Token t; // scratch token
        String name; // production name
        String arg = "", extraArgs = "", htmlArgs = "";
        Map<String, Triple<String, String, String>> globalMetavariables = new HashMap<String, Triple<String, String, String>>();
        Map<String, String> decls = new HashMap<String, String>(); // production declared variable accumulator
        StringBuilder body = new StringBuilder(); // production body text accumulator
        StringBuilder localHtml = new StringBuilder();
        String topConstructor = null, pre = "";
        List<String> states = new ArrayList<String>();
        Reverser.Builder rev, rev2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case METAVAR:
      // New style.
                t = MetaVar();
                       name = t.toString().replace("#", ""); definedNonterminals.add(name);
      break;
    case LANGLE:
      jj_consume_token(LANGLE);
      t = Name();
                name = t.toString();
                definedNonterminals.add(name);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case VAR:
      case CONST:
      case METAVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          t = Name();
                            arg = t.toString();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        t = MetaVar();
                              arg = arg + t.toString();
                  {
                        String b = "b_" + arg.replace("#", "_");
                        extraArgs = extraArgs + ", " + BUFFER + " " + b;
                        htmlArgs = htmlArgs + HTML_START_A + arg + HTML_END_A;
                        // Use of the argument in subsequent embedded terms should copy the buffer.
                        globalMetavariables.put(arg, new Triple<String, String, String>("", ".copy("+b+", false)", null));
                 }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 39:
          case VAR:
          case CONST:
          case METAVAR:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VAR:
          case CONST:
            t = Name();
                                    arg = t.toString();
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
          t = MetaVar();
                                     arg = arg + t.toString();
                         {
                                String b = "b_" + arg.replace("#", "_");
                                extraArgs = extraArgs + ", " + BUFFER + " " + b;
                                htmlArgs = htmlArgs + "," + HTML_START_A + arg + HTML_END_A;
                                // Use of the argument in subsequent embedded terms should copy the buffer.
                                globalMetavariables.put(arg, new Triple<String, String, String>("", ".copy("+b+", false)", null));
                        }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RANGLE);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
    case 10:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        jj_consume_token(10);
               topConstructor = "";
        break;
      case 3:
        jj_consume_token(3);
        t = Name();
                    topConstructor = t.toString();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case VAR:
      case CONST:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          Names(states);
                                         pre = states.toString().replace("[","<").replace("]",">").trim()+" ";
          break;
        case 12:
          jj_consume_token(12);
                             pre = "<*> ";
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(13);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(14);
    rev = TopConcatenation(name, topConstructor, globalMetavariables, decls, body, localHtml);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(15);
                     body.append(" |\u005cn"); localHtml.append(" <br>\u005cn | ");
      rev2 = TopConcatenation(name, topConstructor, globalMetavariables, decls, body, localHtml);
                 rev = rev.choice(rev2);
    }
    jj_consume_token(16);
         {
                // Production for top-level (include EOF) if exported.
                if (exportedNames.contains(name))
                {
                        String stateset = "";
                        if (!pre.isEmpty())
                                stateset = " {token_source.SwitchTo("+states.get(0)+");}";
                        javacc.append("\u005cn" +
                                "/** <em>" + name + "$WithEOF</em> ::= <em>" + name + "</em> EOF . */\u005cn" +
                                SINK + " N_" + name + "$WithEOF(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env) :\u005cn" +
                                "{}\u005cn" +
                                "{{int savedState = token_source.curLexState;} "+stateset+" sink=N_" + name + "(sink, env) {token_source.SwitchTo(savedState);} <EOF> {return sink;} }\u005cn");
                }

                // If needed then create meta-variable and inject tokens.
                decls.put("t", "Token t = null;");
                if (metaProduction != null)
                {
                        javacc.append("\u005cn" +
                                "/** Special meta-variable for " + name + " production. */\u005cn"  +
                                pre + "TOKEN : {<MT_" + name + " : " + metaProduction.replace("<PRODUCTION_NAME>", name)+">}\u005cn");
                }
                if (injectProduction != null)
                {
                        javacc.append("\u005cn" +
                                "/** Special inject token " + name + " production. */\u005cn"  +
                                pre + "TOKEN : {<IT_" + name + " : " + injectProduction.replace("<PRODUCTION_NAME>", name)+">}\u005cn");
                }

                // Documentation.
                if (html != null)
                {
                        html.append((comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<u><a name=\u005c"N_"+name+"\u005c">&lang;" + name + "&rang;</a></u>"+htmlArgs+(topConstructor != null?HTML_START_A+"$"+HTML_END_A:"")
                                +" ::= " + localHtml + " .<br>\u005cn");
                }

                // JavaCC production head.
                javacc.append("\u005cn" +
                                (comment == null ? "/**" : comment.substring(0, comment.length()-2).trim()+"<p>") +
                        "\u005cn * " +
                        "<em>" + name + "</em> ::= "+ localHtml.toString().replace("/*","").replace("*/","").replace("\u005cn", "\u005cn * ") +
                        "\u005cn */\u005cn" +
                        SINK + " N_" + name + "(" + SINK + " sink, " + EXTENSIBLE_STRING_TO_VARIABLE + " env" + extraArgs + ") :\u005cn");

                // JavaCC production declaration.
                if (decls.size() == 0)
                {
                        javacc.append("{}\u005cn");
                }
                else
                {
                        javacc.append("{\u005cn");
                        for (String decl : decls.values())
                                javacc.append("\u005ct"+decl+"\u005cn");
                        javacc.append("}\u005cn");
                }
                javacc.append("{\u005cn");

                // If needed then create meta-variable and inject choices.
                if (metaProduction != null)
                {
                        String metaArg = "sink=N_" + metaArgumentNonterminal + "(sink, env)";
                        javacc.append(
                                "\u005ctt=<MT_"+name+"> {sink = sink .startMetaApplication(t.toString());}" +
                                        " [ " + metaArgumentOpen + " " + metaArg + "( " + metaArgumentSep + " " + metaArg + ")* " + metaArgumentClose + " ]" +
                                        " {return sink.endMetaApplication();}\u005cn" +
                                "|\u005cn");
                }
                if (injectProduction != null)
                {
                        javacc.append(
                                "\u005ct<IT_"+name+"> " +
                                        injectArgumentOpen + " {sink=N_" + injectArgumentNonterminal + "(sink, env);} " + injectArgumentClose +
                                        " {return sink;}\u005cn" +
                                "|\u005cn");
                }
                if (topConstructor != null)
                {
                        javacc.append("{sink = sink.start(makeTConstructor(sink, t, "+q(topConstructor+"("+name+")")+", null));}\u005cn");
                        javacc.append("(\u005cn");
                        javacc.append(body);
                        javacc.append(")\u005cn");
                        javacc.append("{return sink.end();}\u005cn");
                }
                else
                {
                        javacc.append(body);
                }
                javacc.append("}\u005cn");

                // Serializer.
                if (serializer != null)
                        rev.appendRulesTo(serializer, name);
        }
  }

/**
 * Lexical production.
 * Prints the production in JavaCC form to javacc.
 * @param comment javadoc comment for directive
 * @param javacc target for JavaCC directives
 * @param html where the HTML summary is appended, or null if none is needed
 * @return HTML summary of production
 */
  final public void Lexical(String comment, Appendable javacc, Appendable html) throws ParseException, IOException {
        Token t; // scratch token
        String name; // production name
        StringBuilder body = new StringBuilder(); // production body text accumulator
        StringBuilder localHtml = new StringBuilder();
        boolean internal = false;
        List<String> states = new ArrayList<String>();
        String pre = "", post = "", statearg = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
                      internal = true;
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = Name();
                  name = t.toString();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case VAR:
      case CONST:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          Names(states);
                                         pre = states.toString().replace("[","<").replace("]",">").trim()+" "; statearg = pre.substring(1,pre.length()-2);
          break;
        case 12:
          jj_consume_token(12);
                             pre = "<*> "; statearg = "*";
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        jj_consume_token(3);
        t = Name();
                                post = ": "+t.toString(); statearg = statearg + post;
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(13);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(14);
    LexicalChoice(name, body, localHtml);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMBEDDED:
      t = jj_consume_token(EMBEDDED);
                        {String s = t.toString(); post = "{"+unembed(s)+"} "+post;}
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(16);
         {
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +(internal? "<b>fragment</b> ":"")
                                +"<b>token</b> <a name=\u005c"T_"+name+"\u005c">"
                                +name
                                +"</a>"
                                +(statearg.length() > 0 ? HTML_START_A+" ("+statearg+")"+HTML_END_A : "")
                                +"  ::= " + localHtml + " .<br>\u005cn");

                // JavaCC token declaration head.
                tokens.append("\u005cn" +
                        (comment == null ? "/**" : comment.substring(0, comment.length()-2).trim()) +
                        "\u005cn * " +
                        name + " ::= "+ localHtml.toString().replace("\u005cn", "\u005cn * ").replace("*/", "*&zwj;/") +
                        "\u005cn */\u005cn" +
                        pre + "TOKEN : {<" + (internal?"#":"") + "T_" + name + " : " + body + " >" + post + "}\u005cn");
        }
  }

/**
 * skip lexical production.
 * Prints the production in JavaCC form to javacc.
 * @param comment javadoc comment for directive
 * @param javacc target for JavaCC directives
 * @param html where the HTML summary is appended, or null if none is needed
 */
  final public void Skip(String comment, Appendable html) throws ParseException, IOException {
        Token t; // scratch token
        StringBuilder body = new StringBuilder(); // production body text accumulator
        StringBuilder localHtml = new StringBuilder();
        List<String> states = new ArrayList<String>();
        String pre = "", post = "", statearg = "";
    jj_consume_token(19);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case VAR:
      case CONST:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          Names(states);
                                         pre = states.toString().replace("[","<").replace("]",">").trim()+" "; statearg = pre.substring(1,pre.length()-2);
          break;
        case 12:
          jj_consume_token(12);
                             pre = "<*> "; statearg = "*";
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        jj_consume_token(3);
        t = Name();
                                post = ": "+t.toString(); statearg = statearg + post;
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(13);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(14);
    LexicalChoice("skip", body, localHtml);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMBEDDED:
      t = jj_consume_token(EMBEDDED);
                        {String s = t.toString(); post = "{"+unembed(s)+"} "+post;}
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    jj_consume_token(16);
         {
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<b>skip</b> ::= " + localHtml + " .<br>\u005cn");

                // JavaCC token declaration head.
                tokens.append("\u005cn/**" +
                        (comment == null ? "" : htmlcommentify(comment)) +
                        "\u005cn * " +
                        "<b>skip</b>" +
                        (statearg.length() > 0 ? HTML_START_A+" ("+statearg+")"+HTML_END_A : "") +
                        " ::= "+ localHtml.toString().replace("\u005cn", "\u005cn * ").replace("*/", "*&zwj;/") +
                        "\u005cn */\u005cn" +
                        pre + "SKIP : { <" + body + "| \u005c"\u005c\u005c001\u005c" > " + post + "}\u005cn");
        }
  }

/**
 * cast .
 * Prints the production in JavaCC form to javacc.
 * @param comment javadoc comment for directive
 * @param javacc target for JavaCC directives
 * @param html where the HTML summary is appended, or null if none is needed
 */
  final public void Cast(String comment, Appendable javacc, Appendable html) throws ParseException, IOException {
        Token t; // scratch token
        StringBuilder b;
         if (castName != null) {if (true) throw new ParseException("PG error: Duplicate #cast declaration!");}
    jj_consume_token(20);
    jj_consume_token(21);
                    if (html != null) html.append((comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                                  +"<a name=\u005c"N_"+castName+"\u005c"><b>cast</b>[");
    castName = NonterminalName(html);
    jj_consume_token(22);
    jj_consume_token(14);
                if (html != null) html.append("]</a> ::= ");
                b = new StringBuilder();
    LexicalConcatenation("cast", b, html);
                                               castHead = b.toString(); b = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 4:
      jj_consume_token(4);
                     if (html != null) html.append(" , ");
      LexicalConcatenation("cast", b, html);
                                                       castOpen = b.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : b.toString().replace("'","\u005c""); b = new StringBuilder();
      jj_consume_token(4);
                     if (html != null) html.append(" , ");
      LexicalConcatenation("cast", b, html);
                                                       castClose = b.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : b.toString().replace("'","\u005c"");
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(16);
             if (html != null) html.append(" .<p>\u005cn");
  }

/**
 * meta, inject, nometa, and noinject .
 * Prints the production in JavaCC form to javacc.
 * @param comment javadoc comment for directive
 * @param javacc target for JavaCC directives
 * @param html where the HTML summary is appended, or null if none is needed
 */
  final public void Meta(String comment, Appendable javacc, Appendable html) throws ParseException, IOException {
        Token t; // scratch token
        StringBuilder body = new StringBuilder(); // production body text accumulator
        StringBuilder localHtml = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 23:
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<b>meta</b>[");
      jj_consume_token(23);
      jj_consume_token(21);
      metaArgumentNonterminal = NonterminalName(html);
      jj_consume_token(22);
      jj_consume_token(14);
      LexicalConcatenation("meta", body, localHtml);
                // Documentation.
                if (html != null) html.append("] ::= " + localHtml);
                // Store production...
                metaProduction = body.toString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        jj_consume_token(4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          t = jj_consume_token(STRING);
                                if (html != null) html.append(", <code>\u005c""+htmlq(unq(t.toString()))+"\u005c"</code>");
                                metaArgumentOpen = t.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : q(unq(t.toString()));
          break;
        case VAR:
        case CONST:
          t = Name();
                                if (html != null) html.append(", "+t.toString());
                                metaArgumentOpen = "<T_"+t.toString()+">";
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(4);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          t = jj_consume_token(STRING);
                                if (html != null) html.append(", <code>\u005c""+htmlq(unq(t.toString()))+"\u005c"</code>");
                                metaArgumentClose = t.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : q(unq(t.toString()));
          break;
        case VAR:
        case CONST:
          t = Name();
                                if (html != null) html.append(", "+t.toString());
                                metaArgumentClose = "<T_"+t.toString()+">";
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
          jj_consume_token(4);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING:
            t = jj_consume_token(STRING);
                                        if (html != null) html.append(", <code>\u005c""+htmlq(unq(t.toString()))+"\u005c"</code>");
                                        metaArgumentSep = t.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : q(unq(t.toString()));
            break;
          case VAR:
          case CONST:
            t = Name();
                                        if (html != null) html.append(", "+t.toString());
                                        metaArgumentSep = "<T_"+t.toString()+">";
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(16);
                if (html != null) html.append(" .<br>\u005cn");
      break;
    case 24:
      jj_consume_token(24);
      jj_consume_token(16);
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<b>nometa</b> .<br>\u005cn");
                // Store production...
                metaProduction = null;
      break;
    case 25:
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<b>inject</b>[");
      jj_consume_token(25);
      jj_consume_token(21);
      injectArgumentNonterminal = NonterminalName(html);
      jj_consume_token(22);
      jj_consume_token(14);
      LexicalConcatenation("inject", body, localHtml);
                // Documentation.
                if (html != null) html.append("] ::= " + localHtml);
                // Store production...
                injectProduction = body.toString();
                usedNonterminals.add(injectArgumentNonterminal);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        jj_consume_token(4);
        t = jj_consume_token(STRING);
                        if (html != null) html.append(", <code>\u005c""+htmlq(unq(t.toString()))+"\u005c"</code>");
                        injectArgumentOpen = t.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : q(unq(t.toString()));
        jj_consume_token(4);
        t = jj_consume_token(STRING);
                        if (html != null) html.append(", <code>\u005c""+htmlq(unq(t.toString()))+"\u005c"</code>");
                        injectArgumentClose = t.toString().replace("'","\u005c"").equals("\u005c"\u005c"") ? "" : q(unq(t.toString()));
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(16);
                if (html != null) html.append(" .<br>\u005cn");
      break;
    case 26:
      jj_consume_token(26);
      jj_consume_token(16);
                // Documentation.
                if (html != null)
                        html.append("\u005cn"
                                +(comment != null ? "</blockquote>\u005cn"+htmlcommentify(comment)+"\u005cn<blockquote>\u005cn" : "")
                                +"<b>noinject</b> .<br>\u005cn");
                // Store production...
                injectProduction = null;
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Concatenation of one outermost choice.
 * The generated JavaCC action will return the sink argument after it has been populated by the concatenation. 
 * @param productionName name of the production (for error messages)
 * @param topConstructor omit return and expect context to return sink
 * @param globalMetavariables maps argument meta-variables of production to corresponding JavaCC production name
 * @param decls declarations for header portion of enclosing JavaCC production
 * @param body where the body portion of the JavaCC production is appended to 
 * @param html where the printable version of the production should be appended
 */
  final public Reverser.Builder TopConcatenation(String productionName, String topConstructor,
        Map<String, Triple<String, String, String>> globalMetavariables,
        Map<String, String> decls, Appendable body, Appendable html) throws ParseException, IOException {
        SourceBuilder production = new PlainSourceBuilder(body, "\u005ct");
        StringBuilder endings = new StringBuilder();
        Map<String, Variable> variables = new HashMap<String, Variable>();
        Map<String, Triple<String, String, String>> metavariables = new HashMap<String, Triple<String, String, String>>(globalMetavariables);
        Map<Variable, String> variable2java = new HashMap<Variable, String>();
        Reverser.Builder rev, rev2;
    rev = Primary(productionName, decls, production, endings, html, variable2java, variables, metavariables);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 29:
      case 31:
      case LANGLE:
      case COMMENT:
      case STRING:
      case EMBEDDED:
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_9;
      }
                 html.append(" ");
      rev2 = Primary(productionName, decls, production, endings, html, variable2java, variables, metavariables);
                 rev = rev.concatenate(rev2);
    }
                // Emit final action to return sink.
                if (production.nesting() == 0 && endings.length() == 0 && !production.seeded())
                {
                        if (topConstructor == null)
                                production.addStatement("{return sink;}"); // use short form in the trivial case
                }
                else
                {
                        if (production.nesting() == 0) production.openBlock("{"); // make sure action is started
                        if (endings.length() > 0) sink(production, endings); // close open inline constructors
                        if (!production.seeded()) production.seedExpression("sink");
                        if (topConstructor != null)
                                production.addStatement(production.wrapExpression("sink =", ";").harvest()); // make sure result is passed on
                        else
                                production.addStatement(production.wrapExpression("return", ";").harvest()); // this is where the result is actually returned
                        while (production.nesting() > 0) production.closeBlock("}"); // close all scopes
                }
                {if (true) return rev;}
    throw new Error("Missing return statement in function");
  }

/**
 * Basic grammar component.
 * @param productionName name of the production (for error messages)
 * @param decls accumulator of declarations for header portion of enclosing JavaCC production
 * @param production under construction
 * @param endings contains the sink "closing brackets" for open constructions and meta-applications
 * @param html where the printable version of the production should be appended
 * @param variable2java maps variables to the name of the Java variable with the variable
 * @param variables maps already parsed variable names to the created variable
 * @param metavariables maps meta-variables in term to corresponding JavaCC production name
 */
  final public Reverser.Builder Primary(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Reverser.Builder rev = Reverser.dummy();
        String occ = "";
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_10;
      }
      Comment();
    }
         top(production, " ( "); html.append(" ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      rev = Literal(productionName, decls, production, endings, html, variable2java, variables, metavariables);
      break;
    case 31:
    case VAR:
    case CONST:
      rev = Terminal(productionName, decls, production, endings, html, variable2java, variables, metavariables);
      break;
    case LANGLE:
      rev = Nonterminal(productionName, decls, production, endings, html, variable2java, variables, metavariables);
      break;
    case 29:
      rev = Inline(productionName, decls, production, endings, html, variable2java, variables, metavariables);
      break;
    case EMBEDDED:
      rev = Generation(productionName, decls, production, endings, html, variable2java, variables, metavariables);
      break;
    case 11:
      jj_consume_token(11);
                     html.append("( ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 29:
      case 31:
      case LANGLE:
      case COMMENT:
      case STRING:
      case EMBEDDED:
      case VAR:
      case CONST:
        rev = Choice(productionName, decls, production, html, variable2java, variables, metavariables);
        break;
      default:
        jj_la1[48] = jj_gen;
                         top(production, "{}");
      }
      jj_consume_token(13);
                     html.append(" )");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 27:
      case 28:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          jj_consume_token(12);
                       occ = "*";
          break;
        case 27:
          jj_consume_token(27);
                                          occ = "+";
          break;
        case 28:
          jj_consume_token(28);
                                                             occ = "?";
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         top(production, " )"+occ+" "); html.append(occ+" ");
         {if (true) return rev;}
    throw new Error("Missing return statement in function");
  }

/**
 * Literal.
 * @param body where the body portion of the JavaCC production is appended to 
 * @param html where the printable version of the production should be appended
 */
  final public Reverser.Builder Literal(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Token t;
        String literal;
        Usage use;
    t = jj_consume_token(STRING);
                html.append(" \u005c"<code>"+htmlq(unq(t.toString()))+"</code>\u005c"");
                literal = q(unq(t.toString()));
    use = Use("", literal, html, true);
                if (!use.touched)
                {
                        top(production, literal);
                }
                else
                {
                        if (use.needst)
                        {
                                decls.put("t", "Token t = null;");
                                top(production, "t="+literal);
                        }
                        else
                        {
                                top(production, literal);
                        }
                        useUsage(use, ""+decls.size(), decls, production, endings, variable2java, variables, metavariables);
                }
                {if (true) return Reverser.literal(literal, use);}
    throw new Error("Missing return statement in function");
  }

/** Inline. */
  final public Reverser.Builder Inline(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Token t;
        String inline = "";
        Usage use;
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case CONST:
      label_11:
      while (true) {
        t = Name();
                             inline += t.toString();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(30);
                        inline = q(inline);
      break;
    case STRING:
      t = jj_consume_token(STRING);
      jj_consume_token(30);
                        inline = q(unq(t.toString()));
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                html.append(HTML_START_A+"{"+t+"}"+HTML_END_A);
    use = Use(t.toString(), inline, html, false);
                useUsage(use, ""+decls.size(), decls, production, endings, variable2java, variables, metavariables);
                {if (true) return Reverser.inline(inline, use);}
    throw new Error("Missing return statement in function");
  }

/** Terminal. */
  final public Reverser.Builder Terminal(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Token t;
        String terminal, s_name;
        Usage use;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                html.append(" EOF");
                top(production, "<EOF>");
      break;
    case VAR:
    case CONST:
      t = Name();
                terminal = t.toString();
                html.append(" <a href=\u005c"#T_"+terminal+"\u005c">"+terminal+"</a>");
      use = Use(terminal, "t.toString()", html, false);
                if (!use.touched)
                {
                        // Unused terminal just parsed and ignored.
                        top(production, " <T_"+terminal+">");
                }
                else
                {
                        String namebase = use.name.replace("#", "_");
                        // Gotta parse actual token string (possibly converted) and save into s_* variable!
                        decls.put("t", "Token t = null;");
                        top(production, "t=<T_"+terminal+">");
                        useUsage(use, namebase, decls, production, endings, variable2java, variables, metavariables);
                }
                {if (true) return Reverser.terminal(terminal, use);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Reference to nonterminal - with optional occurrence indicator. */
  final public String NonterminalName(Appendable html) throws ParseException, IOException {
        Token t;
        char repeater = 0;
        String nonterminal;
    jj_consume_token(LANGLE);
    t = Name();
                  nonterminal = t.toString();
    jj_consume_token(RANGLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        jj_consume_token(12);
               repeater='*';
        break;
      case 27:
        jj_consume_token(27);
                                     repeater='+';
        break;
      case 28:
        jj_consume_token(28);
                                                           repeater='?';
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
                // In all modes, documentation is just the nonterminal.
                if (html != null) html.append("<a href=\u005c"#N_"+nonterminal+"\u005c">&lang;"+nonterminal+"&rang;</a>"+repeater);
                String realNonterminal = null;
                switch (repeater)
                {
                        case '?' :
                                realNonterminal = nonterminal + "$Maybe";
                                break;
                        case '+' :
                                realNonterminal = nonterminal + "$Sequence";
                                break;
                        case '*' :
                                realNonterminal = nonterminal + "$MaybeSequence";
                                break;
                        default :
                                {if (true) return nonterminal;}
                }
                derivedNonterminals.add(realNonterminal);
                {if (true) return realNonterminal;}
    throw new Error("Missing return statement in function");
  }

/** Nonterminal reference. */
  final public Reverser.Builder Nonterminal(String productionName, Map<String, String> decls, SourceBuilder production, StringBuilder endings, Appendable html, Map<Variable, String> variable2java, Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Token t, t2;
        String nonterminal;
        List<String> arguments = new ArrayList<String>();
        char repeater = 0;
        List<String> vs = new ArrayList<String>();
        String arg = "", extraArgs = "", htmlArgs = "";
        Usage use;
        String namebase, c_in, s_name;
    jj_consume_token(LANGLE);
    t = Name();
                  nonterminal = t.toString();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case STRING:
      case EMBEDDED:
      case VAR:
      case CONST:
      case METAVAR:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                            arg = t.toString(); arguments.add(unq(arg)); htmlArgs = htmlArgs+" "+arg;
        break;
      case EMBEDDED:
        t = jj_consume_token(EMBEDDED);
                              arg = t.toString(); arguments.add(unembed(arg)); htmlArgs = htmlArgs+" "+arg;
        break;
      case 39:
      case VAR:
      case CONST:
      case METAVAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          t = Name();
                            arg = t.toString();
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        t = MetaVar();
                                                                arg = arg + t.toString(); arguments.add(arg); htmlArgs = htmlArgs+" "+arg;
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RANGLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
        jj_consume_token(12);
               repeater='*';
        break;
      case 27:
        jj_consume_token(27);
                                     repeater='+';
        break;
      case 28:
        jj_consume_token(28);
                                                           repeater='?';
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
         {

                // In all modes, documentation is just the nonterminal.
                if (html != null) html.append("<a href=\u005c"#N_"+nonterminal+"\u005c">&lang;"+nonterminal+htmlArgs+"&rang;</a>"+repeater);
                switch (repeater)
                {
                        case '?' :
                                usedNonterminals.add(nonterminal);
                                nonterminal = nonterminal + "$Maybe";
                                derivedNonterminals.add(nonterminal);
                                break;
                        case '+' :
                                usedNonterminals.add(nonterminal);
                                nonterminal = nonterminal + "$Sequence";
                                derivedNonterminals.add(nonterminal);
                                break;
                        case '*' :
                                usedNonterminals.add(nonterminal);
                                nonterminal = nonterminal + "$MaybeSequence";
                                derivedNonterminals.add(nonterminal);
                                break;
                }
                usedNonterminals.add(nonterminal);
                c_in = "c"+decls.size();
                //
                int argCount = 0;
                for (String text : arguments)
                {
                        try
                        {
                                // Store generated text into buffer to pass as parameter
                                String n = "" + (++argCount);
                                String bufferName = "b" + n;
                                decls.put(bufferName, BUFFER+" "+bufferName+" = new "+BUFFER+"(sink);");
                                String sinkName = "s" + n;
                                decls.put(sinkName, SINK+" "+sinkName+" = null;");
                                action(production, sinkName+" = "+bufferName+".sink();");
                                ExpandingJavaSink generatorSink = new ExpandingJavaSink(maker, sinkName, production, variable2java, null, metavariables);
                                factory.parser(factory).parse(generatorSink, null, new StringReader(text), null, 1, 1, new LinkedExtensibleMap<String, Variable>().extend(variables));
                                drop(production);
                                extraArgs = extraArgs + ", " + bufferName;
                        }
                        catch (IOException e)
                        {
                                {if (true) throw new ParseException("CRS term read error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                        catch (CRSException e)
                        {
                                {if (true) throw new ParseException("CRS term parse error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        Names(vs);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(22);
                 {
                        String sep = "";
                        html.append(HTML_START_A+"[");
                        for (String v : vs) {html.append(sep+v); sep = ",";}
                        html.append("]"+HTML_END_A);
                }
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    use = Use(nonterminal, c_in, html, false);
                if (!use.touched)
                {
                        // Parsed non-terminal "just" copied out inline!
                        StringBuilder ext = new StringBuilder(); // for extensions of bound passed to subterms
                        if (vs.size() > 0)
                        {
                                StringBuilder bs = new StringBuilder(); // binders to generate for inline term
                                for (String v : vs)
                                {
                                        // Pass to subterm parser the actual Variable used for this variable name.
                                        ext.append(".extend(s_"+v+", v_"+v+")");
                                        // Add created variable to list of binders.
                                        bs.append((bs.length()>0?",":"")+"v_"+v);
                                }
                                String bsName = "bs"+production.count();
                                declare(production, VARIABLE+"[] "+bsName+" = {"+bs+"};");
                                sink(production, ".binds("+bsName+")");
                        }
                        // Anonymous non-terminal recursively parsed and emitted regardless of state.
                        top(production, "sink=N_"+nonterminal+"(sink, env"+ext+extraArgs+")");
                }
                else
                {
                        // Parsed non-terminal must be buffered for later use.
                        namebase = use.name.replace("#", "_");
                        String bufferName = "b_" + namebase;
                        decls.put(bufferName, BUFFER+" "+bufferName+" = new "+BUFFER+"(sink);");
                        // Collect  binders + subterm in private buffer.
                        String bufferSinkName = "bs_" + namebase;
                        decls.put(bufferSinkName, SINK+" "+bufferSinkName+" = null;");
                        action(production, bufferSinkName+" = "+bufferName+".sink();");
                        StringBuilder ext = new StringBuilder(); // for extensions of bound passed to subterms
                        if (vs.size() > 0)
                        {
                                StringBuilder bs = new StringBuilder(); // binders to generate for inline term
                                for (String v : vs)
                                {
                                        // Pass to subterm parser the actual Variable used for this variable name.
                                        ext.append(".extend(s_"+v+", v_"+v+")");
                                        // Add created variable to list of binders.
                                        bs.append((bs.length()>0?",":"")+"v_"+v);
                                }
                                String bsName = "bs"+production.count();
                                declare(production, VARIABLE+"[] "+bsName+" = {"+bs+"};");
                                action(production, bufferSinkName+" = "+bufferSinkName+".binds("+bsName+");");
                        }
                        top(production, "N_"+nonterminal+"("+bufferSinkName+", env"+ext+extraArgs+")"); // collect subterm in buffer
                        if (use.definition || use.use || use.construct || use.meta || use.wasConverted)
                        {
                                // Compute constant.
                                ///action(production, "if ("+bufferName+".term(false).kind() != "+KIND+".CONSTRUCTION || "+bufferName+".term(false).arity() != 0)\n"
                                ///	+" throw new ParseException(\"Subterm can only be used as constant if it contains a single constructor (\"+"+bufferName+".term(false)+\")\");");
                                decls.put(c_in, "String "+c_in+" = null;");
                                action(production, c_in+" = "+UTIL+".symbol("+bufferName+".term(true));");
                                // Generate use!
                                useUsage(use, namebase, decls, production, endings, variable2java, variables, metavariables);
                        }
                        else // no explicit marking...
                        {
                                // Use of the named meta-variable in subsequent embedded terms should just copy the buffer.
                                metavariables.put(use.name, new Triple<String, String, String>("", ".copy("+bufferName+", true)", null));
                        }
                }
                {if (true) return Reverser.nonterminal(nonterminal, vs, use);}
    throw new Error("Missing return statement in function");
  }

/** Generation of term. */
  final public Reverser.Builder Generation(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Token t;
        String text;
        boolean java = false;
        Usage use;
        String namebase, c_in;
    t = jj_consume_token(EMBEDDED);
                        text = unembed(t.toString());
                html.append(HTML_START_A+t+HTML_END_A);
                c_in = "c"+decls.size();
    use = Use(c_in, c_in, html, false);
                if (text.startsWith(":"))
                {
                        action(production, text.substring(1));
                }
                else if (!use.touched)
                {
                        try
                        {
                                action(production, ""); // make sure "sink" is available for use
                                ExpandingJavaSink generatorSink = new ExpandingJavaSink(maker, "sink", production, variable2java, null, metavariables);
                                factory.parser(factory).parse(generatorSink, use.category, new StringReader(text), null, 1, 1, new LinkedExtensibleMap<String, Variable>().extend(variables));
                        }
                        catch (IOException e)
                        {
                                {if (true) throw new ParseException("CRS term read error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                        catch (CRSException e)
                        {
                                {if (true) throw new ParseException("CRS term parse error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                }
                else
                {
                        // Parsed embedded must be buffered for later use.
                        // Collect subterm in private buffer.
                        namebase = use.name.replace("#", "_");
                        String bufferName = "buf_" + namebase;
                        String sinkName = "sink_" + namebase;
                        decls.put(bufferName, BUFFER+" "+bufferName+" = new "+BUFFER+"(sink);");
                        decls.put(sinkName, SINK+" "+sinkName+" = null;");
                        try
                        {
                                action(production, ""); // make sure "sink" is available for use
                                production.addStatement(sinkName+" = "+bufferName+".sink();");
                                ExpandingJavaSink generatorSink = new ExpandingJavaSink(maker, sinkName, production, variable2java, null, metavariables);
                                factory.parser(factory).parse(generatorSink, use.category, new StringReader(text), null, 1, 1, new LinkedExtensibleMap<String, Variable>().extend(variables));
                                production.addStatement(production.wrapExpression(sinkName+" = ", ";").harvest());
                        }
                        catch (IOException e)
                        {
                                {if (true) throw new ParseException("CRS term read error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                        catch (CRSException e)
                        {
                                {if (true) throw new ParseException("CRS term parse error: "+e.getMessage()+"\u005cnin "+t.toString());}
                        }
                        if (use.definition || use.use || use.construct || use.meta || use.wasConverted)
                        {
                                // Compute constant.
                                ///action(production, "if ("+bufferName+".term(false).kind() != "+KIND+".CONSTRUCTION || "+bufferName+".term(false).arity() != 0)\n"
                                ///	+" throw new ParseException(\"Subterm can only be used as constant if it contains a single constructor (\"+"+bufferName+".term(false)+\")\");");
                                decls.put(c_in, "String "+c_in+" = null;");
                                action(production, c_in+" = "+UTIL+".symbol("+bufferName+".term(true));");
                                // Generate use!
                                useUsage(use, namebase, decls, production, endings, variable2java, variables, metavariables);
                        }
                        else // no explicit marking...
                        {
                                // Use of the named meta-variable in subsequent embedded terms should just copy the buffer.
                                metavariables.put(use.name, new Triple<String, String, String>("", ".copy("+bufferName+".term(false), true)", null));
                        }
                }
                {if (true) return Reverser.generation(text);}
    throw new Error("Missing return statement in function");
  }

/** Choice. */
  final public Reverser.Builder Choice(String productionName, Map<String, String> decls, SourceBuilder production,
        Appendable html, Map<Variable, String> variable2java, Map<String, Variable> variables,
        Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        StringBuilder localEndings;
        Reverser.Builder rev, rev2;
                in(production);
                localEndings = new StringBuilder();
    rev = Concatenation(productionName, decls, production, localEndings, html,
                                    new HashMap<Variable, String>(variable2java),
                                    new HashMap<String, Variable>(variables),
                                    new HashMap<String, Triple<String, String, String>>(metavariables));
                if (localEndings.length() > 0) sink(production, localEndings); // close open inline constructors
                out(production);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_13;
      }
      jj_consume_token(15);
                        top(production, "|"); html.append(" | ");
                        in(production);
                        localEndings = new StringBuilder();
      rev2 = Concatenation(productionName, decls, production, localEndings, html,
                                              new HashMap<Variable, String>(variable2java),
                                              new HashMap<String, Variable>(variables),
                                              new HashMap<String, Triple<String, String, String>>(metavariables));
                        if (localEndings.length() > 0) sink(production, localEndings); // close open inline constructors
                        out(production);
                        rev = rev.choice(rev2);
    }
         {if (true) return rev;}
    throw new Error("Missing return statement in function");
  }

/** Nested concatenation. */
  final public Reverser.Builder Concatenation(String productionName, Map<String, String> decls, SourceBuilder production,
        StringBuilder endings, Appendable html, Map<Variable, String> variable2java,
        Map<String, Variable> variables, Map<String, Triple<String, String, String>> metavariables) throws ParseException, IOException {
        Reverser.Builder rev, rev2;
    rev = Primary(productionName, decls, production, endings, html, variable2java, variables, metavariables);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 29:
      case 31:
      case LANGLE:
      case COMMENT:
      case STRING:
      case EMBEDDED:
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_14;
      }
                 html.append(" ");
      rev2 = Primary(productionName, decls, production, endings, html, variable2java, variables, metavariables);
                 rev = rev.concatenate(rev2);
    }
         {if (true) return rev;}
    throw new Error("Missing return statement in function");
  }

/**
 * Copy stuff.
 * @return HTML text describing the effect.
 */
  final public void Copy(String comment, Appendable javacc) throws ParseException, IOException {
        Token t;
    t = jj_consume_token(EMBEDDED);
         {
                String s = t.toString();
                if (comment != null) javacc.append(comment);
                javacc.append(unembed(s)+"\u005cn");
        }
  }

/**
 * Include stuff.
 * @return HTML text describing the effect.
 */
  final public void Include(String comment, Appendable javacc, Appendable html, Appendable serializer) throws ParseException, IOException {
        Token t;
    jj_consume_token(32);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                 {
                        String s = unq(t.toString());
                        if (comment != null) javacc.append(comment);
                        InputStream input = new URL(new URL("file:."), s).openStream();
                        PGParser p = new PGParser(input);
                        p.Productions(javacc, html, serializer);
                        input.close();
                }
      break;
    case 33:
      jj_consume_token(33);
      t = jj_consume_token(STRING);
                 {
                        String s = unq(t.toString());
                        if (comment != null) javacc.append(comment);
                        Reader input = new InputStreamReader(new URL(new URL("file:."), s).openStream());
                        CharBuffer chars = CharBuffer.allocate(1024);
                        for (int z = input.read(chars); z >= 0; z = input.read(chars))
                        {
                                chars.clear();
                                javacc.append(chars, 0, z);
                        }
                        input.close();
                }
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * List of names.
 * @param names accumulates list of names
 */
  final public void Names(List<String> names) throws ParseException {
        Token t;
    t = Name();
                  names.add(t.toString());
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_15;
      }
      jj_consume_token(4);
      t = Name();
                              names.add(t.toString());
    }
  }

/** Parse usage description. */
  final public Usage Use(String prefix, String initial, Appendable html, boolean isConstant) throws ParseException, IOException {
        Token t;
        Usage use = new Usage(prefix, initial);
        StringBuilder annotation = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
                 use.touched = true;
      jj_consume_token(34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
                          use.linear = true;
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      t = jj_consume_token(VAR);
                 use.definition = true; use.name = t.toString(); annotation.append("^"+(use.linear?"^":"")+t);
      break;
    default:
      jj_la1[76] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
      case METAVAR:
                         use.touched = true;
        t = MetaVar();
                                     use.buffer = true; use.name = use.name + t.toString(); annotation.append(t.toString());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
                                      use.name = use.name + t.toString(); annotation.append(t.toString());
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 35:
      case 36:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
                         use.touched = true;
          jj_consume_token(35);
                             use.use = true; annotation.append("!");
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 35:
            jj_consume_token(35);
                               use.freeVar = true; annotation.append("!");
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 35:
              jj_consume_token(35);
                                 use.freshVar = true; annotation.append("!");
              break;
            default:
              jj_la1[71] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[72] = jj_gen;
            ;
          }
          break;
        case 10:
                         use.touched = true;
          jj_consume_token(10);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 10:
            jj_consume_token(10);
                               use.embedded = true; annotation.append("$$");
            break;
          default:
            jj_la1[73] = jj_gen;
                           use.literal = true; annotation.append("$");
          }
          break;
        case 36:
                         use.touched = true;
          jj_consume_token(36);
                             use.meta = true; annotation.append("@");
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 37:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        jj_consume_token(3);
                     annotation.append(":");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          // :Name means "convert using static String Name(String) method".
                                  t = Name();
                                  use.touched = true; use.converted = t.toString() + "(" + use.converted + ")"; annotation.append(""+t); use.wasConverted = true;
          break;
        case EMBEDDED:
          // :«Expr» means "convert using code of type String where # is substituted by the value!
                                  t = jj_consume_token(EMBEDDED);
                                      use.touched = true; use.converted = unembed(t.toString()).replaceAll("#", use.converted); annotation.append(""+t); use.wasConverted = true;
          break;
        case 39:
        case METAVAR:
          // :# means that whatever was generated is stored and can be referenced with the meta-application #[...] with explicit subterm group.
                                  t = MetaVar();
                                     use.touched = true; use.buffer = true; use.name = t.toString(); annotation.append(t.toString());
          break;
        case 29:
          jj_consume_token(29);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 3:
            jj_consume_token(3);
            t = Name();
            jj_consume_token(30);
                                              use.category = t.toString() + "(" + use.converted + ")"; annotation.append("{:"+t+"}");
            break;
          case VAR:
          case CONST:
            // :{category} means reparse using category. note: DOES NOT TOUCH!
                                         t = Name();
            jj_consume_token(30);
                                           use.category = t.toString(); annotation.append("{"+t+"}");
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        jj_consume_token(37);
                     use.touched = true; annotation.append("_");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          jj_consume_token(28);
                             use.use = true; annotation.append("?");
          break;
        case 35:
          jj_consume_token(35);
                             if (!use.freeVar) use.use = use.freeVar = true; else use.freshVar = true; annotation.append("!");
          break;
        case VAR:
          // _x means "create binder from name" the scope of which will be the single subterm with an [x] tail.
                                  t = jj_consume_token(VAR);
                                 use.definition = true; use.name = t.toString(); annotation.append(use.name+" .");
          break;
        case 10:
        case 29:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 10:
            jj_consume_token(10);
            break;
          case 29:
            jj_consume_token(29);
            jj_consume_token(30);
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                           use.construct = true; annotation.append("$");
          break;
        case 39:
        case METAVAR:
          // _# means "interpret unit as an actual meta-variable applied to the remaining subterms in group".
                                  t = MetaVar();
                                     use.meta = true; annotation.append(t.toString());
          break;
        case 7:
          jj_consume_token(7);
                             use.embedded = true; annotation.append("=");
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if (annotation.length() > 0)
                {
                        html.append(HTML_START_A + annotation.toString() + HTML_END_A);
                }
                if (use.construct && !use.wasConverted && isConstant && constantsClass != null)
                {
                        String token = unq(use.converted);
                        if (!constants.contains(token)) constants.add(token);
                        use.converted = constantsClass + ".STRING[" + constantsClass + ".C_" + javaq(token) + "]";
                }
                {if (true) return use;}
    throw new Error("Missing return statement in function");
  }

/** Parse and echo lexical choice. */
  final public void LexicalChoice(String productionName, Appendable body, Appendable html) throws ParseException, IOException {
    LexicalConcatenation(productionName, body, html);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_17;
      }
      jj_consume_token(15);
                     body.append(" | "); html.append(" | ");
      LexicalConcatenation(productionName, body, html);
    }
  }

/** Parse and echo lexical concatenation. */
  final public void LexicalConcatenation(String productionName, Appendable body, Appendable html) throws ParseException, IOException {
    LexicalSimple(productionName, body, html);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 21:
      case NOT:
      case STRING:
      case VAR:
      case CONST:
      case CHAR:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_18;
      }
                 body.append(" "); html.append(" ");
      LexicalSimple(productionName, body, html);
    }
  }

/** Parse and echo simple lexical tokens. */
  final public void LexicalSimple(String productionName, Appendable body, Appendable html) throws ParseException, IOException {
        Token t;
        boolean needsParentheses = false;
        StringBuilder b = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                 {
                        String s = t.toString(); b.append(q(unq(s)));
                        html.append(" \u005c"<code>"+htmlq(s.substring(1, s.length()-1))+"</code>\u005c"");
                }
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                 {
                        String s = t.toString(); html.append("<code>"+htmlq(s)+"</code>");
                        b.append(q(unChar(s)));
                }
      break;
    case VAR:
    case CONST:
      t = Name();
                          b.append("<T_"+t.toString()+">"); html.append(htmlq(t.toString()));
      break;
    case 21:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
                         b.append("~["); html.append("&not;[");
        break;
      case 21:
        jj_consume_token(21);
               b.append("["); html.append("[");
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 4:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 27:
      case 28:
      case 29:
      case 30:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case DASH:
      case STRING:
      case VAR:
      case CONST:
      case NUMBER:
      case CHAR:
        LexicalChars(productionName, b, html);
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      jj_consume_token(22);
                     b.append("]"); html.append("]");
      break;
    case 11:
      jj_consume_token(11);
                     html.append("(");
      LexicalChoice(productionName, b, html);
      jj_consume_token(13);
                     html.append(")");
                 needsParentheses = true;
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
                     body.append("("+b.toString()+")?"); html.append("?");
      break;
    case 12:
      jj_consume_token(12);
                     body.append("("+b.toString()+")*"); html.append("*");
      break;
    case 27:
      jj_consume_token(27);
                     body.append("("+b.toString()+")+"); html.append("+");
      break;
    default:
      jj_la1[88] = jj_gen;
                 body.append(needsParentheses ? "("+b.toString()+")" : b.toString() );
    }
  }

/** Parse and echo lexical character class. */
  final public void LexicalChars(String productionName, Appendable b, Appendable html) throws ParseException, IOException {
        Token t;
        boolean rangestart = false; // true when dash creates range
        String separator = ""; // set to "-" when range active
    String s;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 27:
      case 28:
      case 29:
      case 30:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case STRING:
      case CHAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          t = jj_consume_token(STRING);
                         s = t.toString(); html.append("\u005c"<code>"+htmlq(unq(s))+"</code>\u005c""); s = unq(s);
          break;
        case 3:
        case 7:
        case 10:
        case 11:
        case 12:
        case 13:
        case 15:
        case 16:
        case 27:
        case 28:
        case 29:
        case 30:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case CHAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            t = jj_consume_token(CHAR);
            break;
          case 38:
            t = jj_consume_token(38);
            break;
          case 35:
            t = jj_consume_token(35);
            break;
          case 36:
            t = jj_consume_token(36);
            break;
          case 39:
            t = jj_consume_token(39);
            break;
          case 10:
            t = jj_consume_token(10);
            break;
          case 40:
            t = jj_consume_token(40);
            break;
          case 34:
            t = jj_consume_token(34);
            break;
          case 41:
            t = jj_consume_token(41);
            break;
          case 12:
            t = jj_consume_token(12);
            break;
          case 11:
            t = jj_consume_token(11);
            break;
          case 13:
            t = jj_consume_token(13);
            break;
          case 37:
            t = jj_consume_token(37);
            break;
          case 27:
            t = jj_consume_token(27);
            break;
          case 7:
            t = jj_consume_token(7);
            break;
          case 29:
            t = jj_consume_token(29);
            break;
          case 30:
            t = jj_consume_token(30);
            break;
          case 15:
            t = jj_consume_token(15);
            break;
          case 3:
            t = jj_consume_token(3);
            break;
          case 42:
            t = jj_consume_token(42);
            break;
          case 16:
            t = jj_consume_token(16);
            break;
          case 28:
            t = jj_consume_token(28);
            break;
          case 43:
            t = jj_consume_token(43);
            break;
          default:
            jj_la1[89] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                         s = t.toString(); html.append("<code>"+htmlq(s)+"</code>"); s = unChar(s);
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        b.append(separator); b.append(q(s));
                        rangestart = !separator.equals("-"); separator = ",";
        break;
      case VAR:
      case CONST:
      case NUMBER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case CONST:
          t = Name();
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        s = t.toString();
                        html.append("<code>"+htmlq(s)+"</code>");
                        for (int i = 0; i < s.length(); ++i)
                        {
                                char c = s.charAt(i);
                                if (c == '-')
                                {
                                        if (rangestart)
                                        {
                                                rangestart = false; separator = "-";
                                        }
                                        else
                                        {
                                                b.append(separator); b.append(q("-"));
                                                rangestart = !separator.equals("-"); separator = ",";
                                        }
                                }
                                else
                                {
                                        b.append(separator);
                                        b.append(q(""+c));
                                        rangestart = true; separator = ",";
                                }
                        }
        break;
      case DASH:
        jj_consume_token(DASH);
                        html.append("&ndash;");
                        if (rangestart)
                        {
                                separator = "-";
                                rangestart = false;
                        }
                        else
                        {
                                b.append(separator); b.append(q("-"));
                                rangestart = !separator.equals("-"); separator = ",";
                        }
        break;
      case 4:
        jj_consume_token(4);
                        html.append(",");
                        rangestart = false; separator = ",";
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 4:
      case 7:
      case 10:
      case 11:
      case 12:
      case 13:
      case 15:
      case 16:
      case 27:
      case 28:
      case 29:
      case 30:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case DASH:
      case STRING:
      case VAR:
      case CONST:
      case NUMBER:
      case CHAR:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_19;
      }
    }
                // Deal with hanging dash.
                if (separator.equals("-"))
                {
                        b.append(","); b.append(q("-"));
                }
  }

/**
 * Comment.
 * Return the comment as a string.
 */
  final public String Comment() throws ParseException, IOException {
        Token t;
    t = jj_consume_token(COMMENT);
                     {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

/** Complex tokens. */
  final public Token Name() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
      break;
    case CONST:
      t = jj_consume_token(CONST);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token MetaVar() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case METAVAR:
      t = jj_consume_token(METAVAR);
      break;
    case 39:
      t = jj_consume_token(39);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PGParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x6,0x10,0x360,0x0,0x0,0x80,0x10,0x0,0x80,0x10,0x360,0x79e0000,0x79e0000,0x79e0000,0x0,0x0,0x0,0x0,0x0,0x408,0x408,0x1000,0x1000,0x800,0x8000,0x20000,0x40000,0x1000,0x1000,0x8,0x800,0x0,0x1000,0x1000,0x8,0x800,0x0,0x10,0x0,0x0,0x0,0x10,0x10,0x10,0x7800000,0xa0000800,0x0,0xa0000800,0x18001000,0x18001000,0xa0000800,0x0,0x0,0x80000000,0x18001000,0x18001000,0x0,0x0,0x0,0x18001000,0x18001000,0x0,0x200000,0x8000,0xa0000800,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x0,0x8,0x8,0x20000000,0x20000400,0x30000480,0x8,0x8000,0x200800,0x200000,0x7801bc98,0x200800,0x18001000,0x7801bc88,0x7801bc88,0x0,0x7801bc98,0x7801bc98,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000000,0x0,0x0,0x0,0x1a000000,0x3a000000,0x0,0x0,0x3a000000,0x0,0x0,0x0,0x5d100081,0x5c100081,0x5d100081,0x18000000,0x58000080,0x18000000,0x58000080,0x40100080,0x0,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0x0,0x0,0x4000000,0x18000000,0x18000000,0x0,0x0,0x4000000,0x0,0x1a000000,0x1a000000,0x1a000000,0x0,0x0,0x0,0x0,0x1f100000,0x1000000,0x1f100000,0x0,0x0,0x1e100000,0x18000000,0x1a000000,0x18000000,0x0,0x0,0x5e000080,0x18000000,0x5e000080,0x0,0x0,0x18000000,0x0,0x0,0x1f100000,0x2000002,0x0,0x4,0x20000000,0x40000080,0x8,0x8,0x0,0x18,0x18,0x4,0x20,0x18000000,0x5c000080,0x0,0x48000088,0x20,0x0,0x1a800000,0x800000,0x3a400ffc,0x1a800000,0x0,0xffc,0x2000ffc,0x38000000,0x3a400ffc,0x3a400ffc,0x18000000,0x40000080,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PGParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PGParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PGParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PGParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PGParser(PGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PGParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
